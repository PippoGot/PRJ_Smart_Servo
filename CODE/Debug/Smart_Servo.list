
Smart_Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087bc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080088c8  080088c8  000098c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008934  08008934  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000000  08008934  08008934  0000a05c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008934  08008934  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008934  08008934  00009934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800893c  0800893c  0000993c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008944  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca0  2000005c  080089a0  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cfc  080089a0  0000acfc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f781  00000000  00000000  0000a085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000461e  00000000  00000000  00029806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0002de28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ded  00000000  00000000  0002f050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e853  00000000  00000000  0002fe3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c0e  00000000  00000000  0004e690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cc44  00000000  00000000  0006829e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104ee2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005248  00000000  00000000  00104f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0010a170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080088b0 	.word	0x080088b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080088b0 	.word	0x080088b0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	@ 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	@ 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	@ 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_f2uiz>:
 8000f30:	0042      	lsls	r2, r0, #1
 8000f32:	d20e      	bcs.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f34:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f38:	d30b      	bcc.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f3a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f42:	d409      	bmi.n	8000f58 <__aeabi_f2uiz+0x28>
 8000f44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f50:	4770      	bx	lr
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	4770      	bx	lr
 8000f58:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f5c:	d101      	bne.n	8000f62 <__aeabi_f2uiz+0x32>
 8000f5e:	0242      	lsls	r2, r0, #9
 8000f60:	d102      	bne.n	8000f68 <__aeabi_f2uiz+0x38>
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295
 8000f66:	4770      	bx	lr
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <_ZN6AS560012digitalAngleEPtNS_12DigitalAngleE>:
#include "AS5600.hpp"

// --- Data

// Angle Reading
HAL_StatusTypeDef AS5600::digitalAngle(uint16_t* buffer, AS5600::DigitalAngle type) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	71fb      	strb	r3, [r7, #7]
	switch (type) {
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00a      	beq.n	8000f9a <_ZN6AS560012digitalAngleEPtNS_12DigitalAngleE+0x2a>
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10f      	bne.n	8000faa <_ZN6AS560012digitalAngleEPtNS_12DigitalAngleE+0x3a>
		case DigitalAngle::NORMAL:
			return read<uint16_t>(static_cast<uint8_t>(Register::ANGLE_H), buffer);
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	210e      	movs	r1, #14
 8000f92:	f000 f80f 	bl	8000fb4 <_ZN3I2C6Device4readItEE17HAL_StatusTypeDefhPT_N4byte10EndianTypeE>
 8000f96:	4603      	mov	r3, r0
 8000f98:	e008      	b.n	8000fac <_ZN6AS560012digitalAngleEPtNS_12DigitalAngleE+0x3c>
		case DigitalAngle::RAW:
			return read<uint16_t>(static_cast<uint8_t>(Register::RAW_ANGLE_H), buffer);
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	210c      	movs	r1, #12
 8000fa2:	f000 f807 	bl	8000fb4 <_ZN3I2C6Device4readItEE17HAL_StatusTypeDefhPT_N4byte10EndianTypeE>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	e000      	b.n	8000fac <_ZN6AS560012digitalAngleEPtNS_12DigitalAngleE+0x3c>
	}

	return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_ZN3I2C6Device4readItEE17HAL_StatusTypeDefhPT_N4byte10EndianTypeE>:
		 * @param data Pointer to store the read value.
		 * @param order byte::EndianType (BigEndian by default).
		 * @return HAL_StatusTypeDef HAL_OK if successful, error code otherwise.
		 */
		template<typename T>
		HAL_StatusTypeDef read(uint8_t reg, T* data, byte::EndianType order = byte::EndianType::BigEndian){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	72fb      	strb	r3, [r7, #11]
			// Acquire the bus
			HAL_StatusTypeDef status = acquireBus();
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f001 f85d 	bl	8002084 <_ZN3I2C6Device10acquireBusEv>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	75fb      	strb	r3, [r7, #23]
			if (status != HAL_OK) return status;
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <_ZN3I2C6Device4readItEE17HAL_StatusTypeDefhPT_N4byte10EndianTypeE+0x24>
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	e026      	b.n	8001026 <_ZN3I2C6Device4readItEE17HAL_StatusTypeDefhPT_N4byte10EndianTypeE+0x72>

			// Read
			uint8_t buffer[sizeof(T)];
			status = HAL_I2C_Mem_Read(
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6818      	ldr	r0, [r3, #0]
					_handle,
					_address,
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	791b      	ldrb	r3, [r3, #4]
			status = HAL_I2C_Mem_Read(
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	7afb      	ldrb	r3, [r7, #11]
 8000fe4:	b29a      	uxth	r2, r3
					reg,
					I2C_MEMADD_SIZE_8BIT,
					buffer,
					sizeof(T),
					_wait_delay
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	689b      	ldr	r3, [r3, #8]
			status = HAL_I2C_Mem_Read(
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	2302      	movs	r3, #2
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f003 fa74 	bl	80044e4 <HAL_I2C_Mem_Read>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	75fb      	strb	r3, [r7, #23]
					);

			// Release the bus
			releaseBus();
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f001 f84f 	bl	80020a4 <_ZN3I2C6Device10releaseBusEv>
			if (status != HAL_OK) return status;
 8001006:	7dfb      	ldrb	r3, [r7, #23]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <_ZN3I2C6Device4readItEE17HAL_StatusTypeDefhPT_N4byte10EndianTypeE+0x5c>
 800100c:	7dfb      	ldrb	r3, [r7, #23]
 800100e:	e00a      	b.n	8001026 <_ZN3I2C6Device4readItEE17HAL_StatusTypeDefhPT_N4byte10EndianTypeE+0x72>

			// Concatenate bytes
			*data = byte::concat<T>(buffer, order);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	6839      	ldr	r1, [r7, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f809 	bl	800102e <_ZN4byte6concatItEET_PKhNS_10EndianTypeE>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	801a      	strh	r2, [r3, #0]
			return HAL_OK;
 8001024:	2300      	movs	r3, #0
		}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_ZN4byte6concatItEET_PKhNS_10EndianTypeE>:
	 * @param bytes Pointer to the byte array.
	 * @param order Byte order to use (default: BigEndian).
	 * @return The combined integer value.
	 */
	template<typename T>
	constexpr inline T concat(const uint8_t* bytes, EndianType order = EndianType::BigEndian) {
 800102e:	b480      	push	{r7}
 8001030:	b085      	sub	sp, #20
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
		T value = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	81fb      	strh	r3, [r7, #14]
		for (size_t i = 0; i < sizeof(T); ++i) {
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	e026      	b.n	8001090 <_ZN4byte6concatItEET_PKhNS_10EndianTypeE+0x62>
			if (order == EndianType::BigEndian)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d111      	bne.n	800106c <_ZN4byte6concatItEET_PKhNS_10EndianTypeE+0x3e>
				value |= static_cast<T>(bytes[i]) << (8 * (sizeof(T) - 1 - i));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	4413      	add	r3, r2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f1c3 0301 	rsb	r3, r3, #1
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	b21a      	sxth	r2, r3
 8001060:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001064:	4313      	orrs	r3, r2
 8001066:	b21b      	sxth	r3, r3
 8001068:	81fb      	strh	r3, [r7, #14]
 800106a:	e00e      	b.n	800108a <_ZN4byte6concatItEET_PKhNS_10EndianTypeE+0x5c>
			else
				value |= static_cast<T>(bytes[i]) << (8 * i);
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	b21a      	sxth	r2, r3
 8001080:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001084:	4313      	orrs	r3, r2
 8001086:	b21b      	sxth	r3, r3
 8001088:	81fb      	strh	r3, [r7, #14]
		for (size_t i = 0; i < sizeof(T); ++i) {
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	3301      	adds	r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d9d5      	bls.n	8001042 <_ZN4byte6concatItEET_PKhNS_10EndianTypeE+0x14>
		}
		return value;
 8001096:	89fb      	ldrh	r3, [r7, #14]
	}
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <_ZN7DRV88704initEP17TIM_HandleTypeDef>:
#include "DRV8870.hpp"

// --- Core Methods

void DRV8870::init(TIM_HandleTypeDef* htim) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
	_handle = htim;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(_handle, _in1_channel);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	4619      	mov	r1, r3
 80010bc:	4610      	mov	r0, r2
 80010be:	f006 fbd3 	bl	8007868 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(_handle, _in2_channel);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4610      	mov	r0, r2
 80010ce:	f006 fbcb 	bl	8007868 <HAL_TIM_PWM_Start>

	stop(StopMode::BRAKE);
 80010d2:	2101      	movs	r1, #1
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f9a6 	bl	8001426 <_ZN7DRV88704stopENS_8StopModeE>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_ZN7DRV88704dutyEfNS_8StopModeE>:

void DRV8870::duty(float duty, StopMode mode) {
 80010e2:	b590      	push	{r4, r7, lr}
 80010e4:	b087      	sub	sp, #28
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71fb      	strb	r3, [r7, #7]
	// Guard for initialization
	 if (!_handle) return;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 8192 	beq.w	800141e <_ZN7DRV88704dutyEfNS_8StopModeE+0x33c>

	// Get the direction and magnitude of the duty cycle
	bool direction = (duty > 0.0f);
 80010fa:	2301      	movs	r3, #1
 80010fc:	461c      	mov	r4, r3
 80010fe:	f04f 0100 	mov.w	r1, #0
 8001102:	68b8      	ldr	r0, [r7, #8]
 8001104:	f7ff ff0a 	bl	8000f1c <__aeabi_fcmpgt>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <_ZN7DRV88704dutyEfNS_8StopModeE+0x30>
 800110e:	2300      	movs	r3, #0
 8001110:	461c      	mov	r4, r3
 8001112:	75fc      	strb	r4, [r7, #23]
	duty = (direction ? duty : -duty);
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <_ZN7DRV88704dutyEfNS_8StopModeE+0x3c>
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	e002      	b.n	8001124 <_ZN7DRV88704dutyEfNS_8StopModeE+0x42>
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001124:	60bb      	str	r3, [r7, #8]

	// If duty cycle is lower than minimum value, set to 0
	if (_min_duty > duty) {
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	4619      	mov	r1, r3
 800112c:	68b8      	ldr	r0, [r7, #8]
 800112e:	f7ff fed7 	bl	8000ee0 <__aeabi_fcmplt>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <_ZN7DRV88704dutyEfNS_8StopModeE+0x62>
		stop(mode);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4619      	mov	r1, r3
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f000 f972 	bl	8001426 <_ZN7DRV88704stopENS_8StopModeE>
		return;
 8001142:	e16d      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
	}

	// If duty cycle is greater than 1, set to 1
	if (1 < duty) duty = 1.0f;
 8001144:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f7ff fee7 	bl	8000f1c <__aeabi_fcmpgt>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <_ZN7DRV88704dutyEfNS_8StopModeE+0x78>
 8001154:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001158:	60bb      	str	r3, [r7, #8]

	// Convert the duty cycle magnitude to a timer register value
	uint16_t step = static_cast<uint16_t>(_pwm_steps*duty);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	899b      	ldrh	r3, [r3, #12]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fccc 	bl	8000afc <__aeabi_i2f>
 8001164:	4603      	mov	r3, r0
 8001166:	68b9      	ldr	r1, [r7, #8]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fd1b 	bl	8000ba4 <__aeabi_fmul>
 800116e:	4603      	mov	r3, r0
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fedd 	bl	8000f30 <__aeabi_f2uiz>
 8001176:	4603      	mov	r3, r0
 8001178:	82bb      	strh	r3, [r7, #20]

	switch (mode) {
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80bd 	beq.w	80012fc <_ZN7DRV88704dutyEfNS_8StopModeE+0x21a>
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b01      	cmp	r3, #1
 8001186:	f040 814b 	bne.w	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
		case StopMode::BRAKE:
			// In BRAKE mode one of the two pins is always high
			if (direction) {
 800118a:	7dfb      	ldrb	r3, [r7, #23]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d05a      	beq.n	8001246 <_ZN7DRV88704dutyEfNS_8StopModeE+0x164>
				__HAL_TIM_SET_COMPARE(_handle, _in1_channel, _pwm_steps);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d106      	bne.n	80011a6 <_ZN7DRV88704dutyEfNS_8StopModeE+0xc4>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	899a      	ldrh	r2, [r3, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80011a4:	e01b      	b.n	80011de <_ZN7DRV88704dutyEfNS_8StopModeE+0xfc>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d106      	bne.n	80011bc <_ZN7DRV88704dutyEfNS_8StopModeE+0xda>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	899a      	ldrh	r2, [r3, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80011ba:	e010      	b.n	80011de <_ZN7DRV88704dutyEfNS_8StopModeE+0xfc>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d106      	bne.n	80011d2 <_ZN7DRV88704dutyEfNS_8StopModeE+0xf0>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	899a      	ldrh	r2, [r3, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011d0:	e005      	b.n	80011de <_ZN7DRV88704dutyEfNS_8StopModeE+0xfc>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	899a      	ldrh	r2, [r3, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	641a      	str	r2, [r3, #64]	@ 0x40
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, _pwm_steps - step);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d109      	bne.n	80011fa <_ZN7DRV88704dutyEfNS_8StopModeE+0x118>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	899b      	ldrh	r3, [r3, #12]
 80011ea:	461a      	mov	r2, r3
 80011ec:	8abb      	ldrh	r3, [r7, #20]
 80011ee:	1ad2      	subs	r2, r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	635a      	str	r2, [r3, #52]	@ 0x34
			}
			else {
				__HAL_TIM_SET_COMPARE(_handle, _in1_channel, _pwm_steps - step);
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, _pwm_steps);
			}
			break;
 80011f8:	e112      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, _pwm_steps - step);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d109      	bne.n	8001216 <_ZN7DRV88704dutyEfNS_8StopModeE+0x134>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	899b      	ldrh	r3, [r3, #12]
 8001206:	461a      	mov	r2, r3
 8001208:	8abb      	ldrh	r3, [r7, #20]
 800120a:	1ad2      	subs	r2, r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001214:	e104      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, _pwm_steps - step);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b08      	cmp	r3, #8
 800121c:	d109      	bne.n	8001232 <_ZN7DRV88704dutyEfNS_8StopModeE+0x150>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	899b      	ldrh	r3, [r3, #12]
 8001222:	461a      	mov	r2, r3
 8001224:	8abb      	ldrh	r3, [r7, #20]
 8001226:	1ad2      	subs	r2, r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001230:	e0f6      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, _pwm_steps - step);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	899b      	ldrh	r3, [r3, #12]
 8001236:	461a      	mov	r2, r3
 8001238:	8abb      	ldrh	r3, [r7, #20]
 800123a:	1ad2      	subs	r2, r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8001244:	e0ec      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
				__HAL_TIM_SET_COMPARE(_handle, _in1_channel, _pwm_steps - step);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <_ZN7DRV88704dutyEfNS_8StopModeE+0x180>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	899b      	ldrh	r3, [r3, #12]
 8001252:	461a      	mov	r2, r3
 8001254:	8abb      	ldrh	r3, [r7, #20]
 8001256:	1ad2      	subs	r2, r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001260:	e024      	b.n	80012ac <_ZN7DRV88704dutyEfNS_8StopModeE+0x1ca>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b04      	cmp	r3, #4
 8001268:	d109      	bne.n	800127e <_ZN7DRV88704dutyEfNS_8StopModeE+0x19c>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	899b      	ldrh	r3, [r3, #12]
 800126e:	461a      	mov	r2, r3
 8001270:	8abb      	ldrh	r3, [r7, #20]
 8001272:	1ad2      	subs	r2, r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	639a      	str	r2, [r3, #56]	@ 0x38
 800127c:	e016      	b.n	80012ac <_ZN7DRV88704dutyEfNS_8StopModeE+0x1ca>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b08      	cmp	r3, #8
 8001284:	d109      	bne.n	800129a <_ZN7DRV88704dutyEfNS_8StopModeE+0x1b8>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	899b      	ldrh	r3, [r3, #12]
 800128a:	461a      	mov	r2, r3
 800128c:	8abb      	ldrh	r3, [r7, #20]
 800128e:	1ad2      	subs	r2, r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001298:	e008      	b.n	80012ac <_ZN7DRV88704dutyEfNS_8StopModeE+0x1ca>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	899b      	ldrh	r3, [r3, #12]
 800129e:	461a      	mov	r2, r3
 80012a0:	8abb      	ldrh	r3, [r7, #20]
 80012a2:	1ad2      	subs	r2, r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	641a      	str	r2, [r3, #64]	@ 0x40
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, _pwm_steps);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d106      	bne.n	80012c2 <_ZN7DRV88704dutyEfNS_8StopModeE+0x1e0>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	899a      	ldrh	r2, [r3, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80012c0:	e0ae      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, _pwm_steps);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d106      	bne.n	80012d8 <_ZN7DRV88704dutyEfNS_8StopModeE+0x1f6>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	899a      	ldrh	r2, [r3, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80012d6:	e0a3      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, _pwm_steps);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b08      	cmp	r3, #8
 80012de:	d106      	bne.n	80012ee <_ZN7DRV88704dutyEfNS_8StopModeE+0x20c>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	899a      	ldrh	r2, [r3, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80012ec:	e098      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, _pwm_steps);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	899a      	ldrh	r2, [r3, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 80012fa:	e091      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
		case StopMode::COAST:
			// In COAST mode one of the two pins is always low
			if (direction) {
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d046      	beq.n	8001390 <_ZN7DRV88704dutyEfNS_8StopModeE+0x2ae>
				__HAL_TIM_SET_COMPARE(_handle, _in1_channel, step);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d105      	bne.n	8001316 <_ZN7DRV88704dutyEfNS_8StopModeE+0x234>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	8aba      	ldrh	r2, [r7, #20]
 8001312:	635a      	str	r2, [r3, #52]	@ 0x34
 8001314:	e018      	b.n	8001348 <_ZN7DRV88704dutyEfNS_8StopModeE+0x266>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b04      	cmp	r3, #4
 800131c:	d105      	bne.n	800132a <_ZN7DRV88704dutyEfNS_8StopModeE+0x248>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	8aba      	ldrh	r2, [r7, #20]
 8001326:	639a      	str	r2, [r3, #56]	@ 0x38
 8001328:	e00e      	b.n	8001348 <_ZN7DRV88704dutyEfNS_8StopModeE+0x266>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b08      	cmp	r3, #8
 8001330:	d105      	bne.n	800133e <_ZN7DRV88704dutyEfNS_8StopModeE+0x25c>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	8aba      	ldrh	r2, [r7, #20]
 800133a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800133c:	e004      	b.n	8001348 <_ZN7DRV88704dutyEfNS_8StopModeE+0x266>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	8aba      	ldrh	r2, [r7, #20]
 8001346:	641a      	str	r2, [r3, #64]	@ 0x40
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, 0);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d105      	bne.n	800135c <_ZN7DRV88704dutyEfNS_8StopModeE+0x27a>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2200      	movs	r2, #0
 8001358:	635a      	str	r2, [r3, #52]	@ 0x34
			}
			else {
				__HAL_TIM_SET_COMPARE(_handle, _in1_channel, 0);
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, step);
			}
			break;
 800135a:	e061      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, 0);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b04      	cmp	r3, #4
 8001362:	d105      	bne.n	8001370 <_ZN7DRV88704dutyEfNS_8StopModeE+0x28e>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2200      	movs	r2, #0
 800136c:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800136e:	e057      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, 0);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b08      	cmp	r3, #8
 8001376:	d105      	bne.n	8001384 <_ZN7DRV88704dutyEfNS_8StopModeE+0x2a2>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2200      	movs	r2, #0
 8001380:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001382:	e04d      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, 0);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2200      	movs	r2, #0
 800138c:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 800138e:	e047      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
				__HAL_TIM_SET_COMPARE(_handle, _in1_channel, 0);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d105      	bne.n	80013a4 <_ZN7DRV88704dutyEfNS_8StopModeE+0x2c2>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2200      	movs	r2, #0
 80013a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013a2:	e018      	b.n	80013d6 <_ZN7DRV88704dutyEfNS_8StopModeE+0x2f4>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d105      	bne.n	80013b8 <_ZN7DRV88704dutyEfNS_8StopModeE+0x2d6>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80013b6:	e00e      	b.n	80013d6 <_ZN7DRV88704dutyEfNS_8StopModeE+0x2f4>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d105      	bne.n	80013cc <_ZN7DRV88704dutyEfNS_8StopModeE+0x2ea>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013ca:	e004      	b.n	80013d6 <_ZN7DRV88704dutyEfNS_8StopModeE+0x2f4>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2200      	movs	r2, #0
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, step);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d105      	bne.n	80013ea <_ZN7DRV88704dutyEfNS_8StopModeE+0x308>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	8aba      	ldrh	r2, [r7, #20]
 80013e6:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80013e8:	e01a      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, step);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d105      	bne.n	80013fe <_ZN7DRV88704dutyEfNS_8StopModeE+0x31c>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	8aba      	ldrh	r2, [r7, #20]
 80013fa:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80013fc:	e010      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, step);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b08      	cmp	r3, #8
 8001404:	d105      	bne.n	8001412 <_ZN7DRV88704dutyEfNS_8StopModeE+0x330>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	8aba      	ldrh	r2, [r7, #20]
 800140e:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001410:	e006      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
				__HAL_TIM_SET_COMPARE(_handle, _in2_channel, step);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	8aba      	ldrh	r2, [r7, #20]
 800141a:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 800141c:	e000      	b.n	8001420 <_ZN7DRV88704dutyEfNS_8StopModeE+0x33e>
	 if (!_handle) return;
 800141e:	bf00      	nop
	}
}
 8001420:	371c      	adds	r7, #28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd90      	pop	{r4, r7, pc}

08001426 <_ZN7DRV88704stopENS_8StopModeE>:

void DRV8870::stop(StopMode mode) {
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	70fb      	strb	r3, [r7, #3]
	// Guard for initialization
	if (!_handle) return;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 8099 	beq.w	800156e <_ZN7DRV88704stopENS_8StopModeE+0x148>

	// Both pins high or low based on stop mode
	if (StopMode::BRAKE == mode) {
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d14e      	bne.n	80014e0 <_ZN7DRV88704stopENS_8StopModeE+0xba>
		__HAL_TIM_SET_COMPARE(_handle, _in1_channel, _pwm_steps);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d106      	bne.n	8001458 <_ZN7DRV88704stopENS_8StopModeE+0x32>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	899a      	ldrh	r2, [r3, #12]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	635a      	str	r2, [r3, #52]	@ 0x34
 8001456:	e01b      	b.n	8001490 <_ZN7DRV88704stopENS_8StopModeE+0x6a>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b04      	cmp	r3, #4
 800145e:	d106      	bne.n	800146e <_ZN7DRV88704stopENS_8StopModeE+0x48>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	899a      	ldrh	r2, [r3, #12]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	639a      	str	r2, [r3, #56]	@ 0x38
 800146c:	e010      	b.n	8001490 <_ZN7DRV88704stopENS_8StopModeE+0x6a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b08      	cmp	r3, #8
 8001474:	d106      	bne.n	8001484 <_ZN7DRV88704stopENS_8StopModeE+0x5e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	899a      	ldrh	r2, [r3, #12]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001482:	e005      	b.n	8001490 <_ZN7DRV88704stopENS_8StopModeE+0x6a>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	899a      	ldrh	r2, [r3, #12]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	641a      	str	r2, [r3, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(_handle, _in2_channel, _pwm_steps);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d106      	bne.n	80014a6 <_ZN7DRV88704stopENS_8StopModeE+0x80>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	899a      	ldrh	r2, [r3, #12]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80014a4:	e064      	b.n	8001570 <_ZN7DRV88704stopENS_8StopModeE+0x14a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d106      	bne.n	80014bc <_ZN7DRV88704stopENS_8StopModeE+0x96>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	899a      	ldrh	r2, [r3, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80014ba:	e059      	b.n	8001570 <_ZN7DRV88704stopENS_8StopModeE+0x14a>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d106      	bne.n	80014d2 <_ZN7DRV88704stopENS_8StopModeE+0xac>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	899a      	ldrh	r2, [r3, #12]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014d0:	e04e      	b.n	8001570 <_ZN7DRV88704stopENS_8StopModeE+0x14a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	899a      	ldrh	r2, [r3, #12]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80014de:	e047      	b.n	8001570 <_ZN7DRV88704stopENS_8StopModeE+0x14a>
	}
	else {
		__HAL_TIM_SET_COMPARE(_handle, _in1_channel, 0);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d105      	bne.n	80014f4 <_ZN7DRV88704stopENS_8StopModeE+0xce>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2200      	movs	r2, #0
 80014f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80014f2:	e018      	b.n	8001526 <_ZN7DRV88704stopENS_8StopModeE+0x100>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d105      	bne.n	8001508 <_ZN7DRV88704stopENS_8StopModeE+0xe2>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2200      	movs	r2, #0
 8001504:	639a      	str	r2, [r3, #56]	@ 0x38
 8001506:	e00e      	b.n	8001526 <_ZN7DRV88704stopENS_8StopModeE+0x100>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b08      	cmp	r3, #8
 800150e:	d105      	bne.n	800151c <_ZN7DRV88704stopENS_8StopModeE+0xf6>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2200      	movs	r2, #0
 8001518:	63da      	str	r2, [r3, #60]	@ 0x3c
 800151a:	e004      	b.n	8001526 <_ZN7DRV88704stopENS_8StopModeE+0x100>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2200      	movs	r2, #0
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(_handle, _in2_channel, 0);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d105      	bne.n	800153a <_ZN7DRV88704stopENS_8StopModeE+0x114>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	635a      	str	r2, [r3, #52]	@ 0x34
 8001538:	e01a      	b.n	8001570 <_ZN7DRV88704stopENS_8StopModeE+0x14a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b04      	cmp	r3, #4
 8001540:	d105      	bne.n	800154e <_ZN7DRV88704stopENS_8StopModeE+0x128>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2200      	movs	r2, #0
 800154a:	639a      	str	r2, [r3, #56]	@ 0x38
 800154c:	e010      	b.n	8001570 <_ZN7DRV88704stopENS_8StopModeE+0x14a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b08      	cmp	r3, #8
 8001554:	d105      	bne.n	8001562 <_ZN7DRV88704stopENS_8StopModeE+0x13c>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2200      	movs	r2, #0
 800155e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001560:	e006      	b.n	8001570 <_ZN7DRV88704stopENS_8StopModeE+0x14a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2200      	movs	r2, #0
 800156a:	641a      	str	r2, [r3, #64]	@ 0x40
 800156c:	e000      	b.n	8001570 <_ZN7DRV88704stopENS_8StopModeE+0x14a>
	if (!_handle) return;
 800156e:	bf00      	nop
	}
}
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <_ZN3I2C5Slave4initEP17I2C_HandleTypeDef>:
			_handle(nullptr),
			_regMap(regMap),
			_currentRegisterAddr(0), _currentRegister(nullptr)
		{}

		void init(I2C_HandleTypeDef *handle) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
			_handle = handle;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	601a      	str	r2, [r3, #0]
			HAL_I2C_EnableListen_IT(_handle);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f003 fb01 	bl	8004b94 <HAL_I2C_EnableListen_IT>
		}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_ZN3I2C6Device4initEP17I2C_HandleTypeDef>:
		inline void init(I2C_HandleTypeDef* handle) { _handle = handle; }
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	6039      	str	r1, [r7, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <_ZN6AS560013startPositionEt>:
	 *
	 * The angular range must be greater than 18 degrees.
	 * In case of narrowed angular range, the resolution is not scaled to
	 * narrowed range (e.g. 0° to 360°(full-turn) → 4096dec; 0° to 180° → 2048dec).
	 */
	inline bool startPosition(uint16_t value) { return write<uint16_t>(static_cast<uint8_t>(Register::ZPOS_H), value) == HAL_OK; }
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	2300      	movs	r3, #0
 80015c6:	2101      	movs	r1, #1
 80015c8:	f000 f916 	bl	80017f8 <_ZN3I2C6Device5writeItEE17HAL_StatusTypeDefhT_N4byte10EndianTypeE>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	bf0c      	ite	eq
 80015d2:	2301      	moveq	r3, #1
 80015d4:	2300      	movne	r3, #0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_ZN6AS560012stopPositionEt>:
	 *
	 * The angular range must be greater than 18 degrees.
	 * In case of narrowed angular range, the resolution is not scaled to
	 * narrowed range (e.g. 0° to 360°(full-turn) → 4096dec; 0° to 180° → 2048dec).
	 */
	inline bool stopPosition(uint16_t value) { return write<uint16_t>(static_cast<uint8_t>(Register::MPOS_H), value) == HAL_OK; }
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	2300      	movs	r3, #0
 80015f2:	2103      	movs	r1, #3
 80015f4:	f000 f900 	bl	80017f8 <_ZN3I2C6Device5writeItEE17HAL_StatusTypeDefhT_N4byte10EndianTypeE>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bf0c      	ite	eq
 80015fe:	2301      	moveq	r3, #1
 8001600:	2300      	movne	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_ZN15SWPIDController7computeEttf>:
	SWPIDController(float dt, float Kp, float Ki, float Kd);

	// --- Controller core method -------------------------------------------------------

	float compute(float x_ref, float x_k);
	float compute(uint16_t x_ref, uint16_t x_k, float convert) { return compute(convert * x_ref, convert * x_k); }
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	817b      	strh	r3, [r7, #10]
 800161a:	4613      	mov	r3, r2
 800161c:	813b      	strh	r3, [r7, #8]
 800161e:	897b      	ldrh	r3, [r7, #10]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fa6b 	bl	8000afc <__aeabi_i2f>
 8001626:	4603      	mov	r3, r0
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff faba 	bl	8000ba4 <__aeabi_fmul>
 8001630:	4603      	mov	r3, r0
 8001632:	461c      	mov	r4, r3
 8001634:	893b      	ldrh	r3, [r7, #8]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fa60 	bl	8000afc <__aeabi_i2f>
 800163c:	4603      	mov	r3, r0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff faaf 	bl	8000ba4 <__aeabi_fmul>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	4621      	mov	r1, r4
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 fae9 	bl	8001c24 <_ZN15SWPIDController7computeEff>
 8001652:	4603      	mov	r3, r0
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <_ZN6MG996R4initEP17I2C_HandleTypeDefS1_P17TIM_HandleTypeDefS3_>:
void MG996R::init(
		I2C_HandleTypeDef* external_i2c_handle,
		I2C_HandleTypeDef* internal_i2c_handle,
		TIM_HandleTypeDef* control_loop_timer_handle,
		TIM_HandleTypeDef* driver_timer_handle
	) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	603b      	str	r3, [r7, #0]
	// Handle storing
	_external_i2c_handle = external_i2c_handle;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	615a      	str	r2, [r3, #20]
	_internal_i2c_handle = internal_i2c_handle;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	619a      	str	r2, [r3, #24]
	_control_loop_timer_handle = control_loop_timer_handle;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	61da      	str	r2, [r3, #28]
	_driver_timer_handle = driver_timer_handle;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6a3a      	ldr	r2, [r7, #32]
 8001680:	621a      	str	r2, [r3, #32]


	// Slave setup
	slave.init(_external_i2c_handle);
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	4619      	mov	r1, r3
 800168a:	4610      	mov	r0, r2
 800168c:	f7ff ff74 	bl	8001578 <_ZN3I2C5Slave4initEP17I2C_HandleTypeDef>


	// Encoder setup
	_encoder.init(_internal_i2c_handle);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f603 02e8 	addw	r2, r3, #2280	@ 0x8e8
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	4619      	mov	r1, r3
 800169c:	4610      	mov	r0, r2
 800169e:	f7ff ff7c 	bl	800159a <_ZN3I2C6Device4initEP17I2C_HandleTypeDef>

	_encoder.startPosition(DefaultSettings::AS5600_ZeroPos);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f603 03e8 	addw	r3, r3, #2280	@ 0x8e8
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff82 	bl	80015b4 <_ZN6AS560013startPositionEt>
	_encoder.stopPosition(DefaultSettings::AS5600_StopPos);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f603 03e8 	addw	r3, r3, #2280	@ 0x8e8
 80016b6:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff90 	bl	80015e0 <_ZN6AS560012stopPositionEt>

	uint16_t initial_position;
	_encoder.digitalAngle(&initial_position);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f603 03e8 	addw	r3, r3, #2280	@ 0x8e8
 80016c6:	f107 0116 	add.w	r1, r7, #22
 80016ca:	2201      	movs	r2, #1
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fc4f 	bl	8000f70 <_ZN6AS560012digitalAngleEPtNS_12DigitalAngleE>
	regActualPosition.typedSet(initial_position);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 80016d8:	8afa      	ldrh	r2, [r7, #22]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f8c1 	bl	8001864 <_ZN3I2C15VirtualRegisterItE8typedSetEt>
	regDesiredPosition.typedSet(initial_position);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f603 0364 	addw	r3, r3, #2148	@ 0x864
 80016e8:	8afa      	ldrh	r2, [r7, #22]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f8b9 	bl	8001864 <_ZN3I2C15VirtualRegisterItE8typedSetEt>


	// Controller setup
	_controller.setOutputLimits(DefaultSettings::OutputMin, DefaultSettings::OutputMax);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f603 03fc 	addw	r3, r3, #2300	@ 0x8fc
 80016f8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80016fc:	490c      	ldr	r1, [pc, #48]	@ (8001730 <_ZN6MG996R4initEP17I2C_HandleTypeDefS1_P17TIM_HandleTypeDefS3_+0xd4>)
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fa45 	bl	8001b8e <_ZN13PIDController15setOutputLimitsEff>


	// Driver setup
	_driver.init(_driver_timer_handle);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f603 1224 	addw	r2, r3, #2340	@ 0x924
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f7ff fcc6 	bl	80010a2 <_ZN7DRV88704initEP17TIM_HandleTypeDef>


	// Control loop timer start
	HAL_TIM_Base_Start_IT(_control_loop_timer_handle);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	4618      	mov	r0, r3
 800171c:	f005 fffa 	bl	8007714 <HAL_TIM_Base_Start_IT>


	// Toggle init flag
	_isInit = true;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2201      	movs	r2, #1
 8001724:	741a      	strb	r2, [r3, #16]
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	bf800000 	.word	0xbf800000

08001734 <_ZN6MG996R11controlLoopEv>:

void MG996R::controlLoop() {
 8001734:	b5b0      	push	{r4, r5, r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	// Init guard
	if (!_isInit) return;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7c1b      	ldrb	r3, [r3, #16]
 8001740:	f083 0301 	eor.w	r3, r3, #1
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d14c      	bne.n	80017e4 <_ZN6MG996R11controlLoopEv+0xb0>
	// Loop variables
	HAL_StatusTypeDef status;
	uint16_t current_position;

	// Position reading (extend to sensor reading)
	status = _encoder.digitalAngle(&current_position);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f603 03e8 	addw	r3, r3, #2280	@ 0x8e8
 8001750:	f107 0108 	add.w	r1, r7, #8
 8001754:	2201      	movs	r2, #1
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fc0a 	bl	8000f70 <_ZN6AS560012digitalAngleEPtNS_12DigitalAngleE>
 800175c:	4603      	mov	r3, r0
 800175e:	72fb      	strb	r3, [r7, #11]
	if (status == HAL_OK) {
 8001760:	7afb      	ldrb	r3, [r7, #11]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d140      	bne.n	80017e8 <_ZN6MG996R11controlLoopEv+0xb4>
		regActualPosition.typedSet(current_position);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 800176c:	893a      	ldrh	r2, [r7, #8]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f877 	bl	8001864 <_ZN3I2C15VirtualRegisterItE8typedSetEt>
	else {
		return;
	}

	// Compute control input
	float u_PID = _controller.compute(regDesiredPosition.typedGet(), regActualPosition.typedGet(), PI / 4096.0f);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f603 04fc 	addw	r4, r3, #2300	@ 0x8fc
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f603 0364 	addw	r3, r3, #2148	@ 0x864
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f881 	bl	800188a <_ZNK3I2C15VirtualRegisterItE8typedGetEv>
 8001788:	4603      	mov	r3, r0
 800178a:	461d      	mov	r5, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f879 	bl	800188a <_ZNK3I2C15VirtualRegisterItE8typedGetEv>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <_ZN6MG996R11controlLoopEv+0xbc>)
 800179e:	4629      	mov	r1, r5
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff ff33 	bl	800160c <_ZN15SWPIDController7computeEttf>
 80017a6:	60f8      	str	r0, [r7, #12]

	// Clamp control input
	if (u_PID > 1.0f) u_PID = 1.0f;
 80017a8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7ff fbb5 	bl	8000f1c <__aeabi_fcmpgt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <_ZN6MG996R11controlLoopEv+0x8c>
 80017b8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	e008      	b.n	80017d2 <_ZN6MG996R11controlLoopEv+0x9e>
	else if (u_PID < -1.0f) u_PID = -1.0f;
 80017c0:	490c      	ldr	r1, [pc, #48]	@ (80017f4 <_ZN6MG996R11controlLoopEv+0xc0>)
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f7ff fb8c 	bl	8000ee0 <__aeabi_fcmplt>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <_ZN6MG996R11controlLoopEv+0x9e>
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <_ZN6MG996R11controlLoopEv+0xc0>)
 80017d0:	60fb      	str	r3, [r7, #12]

	// Set driver duty cycle
	_driver.duty(u_PID, DRV8870::StopMode::BRAKE);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f603 1324 	addw	r3, r3, #2340	@ 0x924
 80017d8:	2201      	movs	r2, #1
 80017da:	68f9      	ldr	r1, [r7, #12]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fc80 	bl	80010e2 <_ZN7DRV88704dutyEfNS_8StopModeE>
 80017e2:	e002      	b.n	80017ea <_ZN6MG996R11controlLoopEv+0xb6>
	if (!_isInit) return;
 80017e4:	bf00      	nop
 80017e6:	e000      	b.n	80017ea <_ZN6MG996R11controlLoopEv+0xb6>
		return;
 80017e8:	bf00      	nop
}
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bdb0      	pop	{r4, r5, r7, pc}
 80017f0:	3a490fdb 	.word	0x3a490fdb
 80017f4:	bf800000 	.word	0xbf800000

080017f8 <_ZN3I2C6Device5writeItEE17HAL_StatusTypeDefhT_N4byte10EndianTypeE>:
		 * @param data Value to write.
		 * @param order byte::EndianType (BigEndian by default).
		 * @return HAL_StatusTypeDef HAL_OK if successful, error code otherwise.
		 */
		template<typename T>
		HAL_StatusTypeDef write(uint8_t reg, T data, byte::EndianType order = byte::EndianType::BigEndian) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	@ 0x28
 80017fc:	af04      	add	r7, sp, #16
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	72fb      	strb	r3, [r7, #11]
 8001806:	4613      	mov	r3, r2
 8001808:	813b      	strh	r3, [r7, #8]
			// Acquire the bus
			HAL_StatusTypeDef status = acquireBus();
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 fc3a 	bl	8002084 <_ZN3I2C6Device10acquireBusEv>
 8001810:	4603      	mov	r3, r0
 8001812:	75fb      	strb	r3, [r7, #23]
			if (status != HAL_OK) return status;
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <_ZN3I2C6Device5writeItEE17HAL_StatusTypeDefhT_N4byte10EndianTypeE+0x26>
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	e01e      	b.n	800185c <_ZN3I2C6Device5writeItEE17HAL_StatusTypeDefhT_N4byte10EndianTypeE+0x64>

			// Split bytes
			uint8_t buffer[sizeof(T)];
			byte::split<T>(data, buffer, order);
 800181e:	f107 0114 	add.w	r1, r7, #20
 8001822:	893b      	ldrh	r3, [r7, #8]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f844 	bl	80018b4 <_ZN4byte5splitItEEvT_PhNS_10EndianTypeE>

			// Write
			status = HAL_I2C_Mem_Write(
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6818      	ldr	r0, [r3, #0]
					_handle,
					_address,
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	791b      	ldrb	r3, [r3, #4]
			status = HAL_I2C_Mem_Write(
 8001834:	4619      	mov	r1, r3
 8001836:	7afb      	ldrb	r3, [r7, #11]
 8001838:	b29a      	uxth	r2, r3
					reg,
					I2C_MEMADD_SIZE_8BIT,
					buffer,
					sizeof(T),
					_wait_delay
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	689b      	ldr	r3, [r3, #8]
			status = HAL_I2C_Mem_Write(
 800183e:	9302      	str	r3, [sp, #8]
 8001840:	2302      	movs	r3, #2
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2301      	movs	r3, #1
 800184c:	f002 fd50 	bl	80042f0 <HAL_I2C_Mem_Write>
 8001850:	4603      	mov	r3, r0
 8001852:	75fb      	strb	r3, [r7, #23]
					);

			// Release the bus
			releaseBus();
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 fc25 	bl	80020a4 <_ZN3I2C6Device10releaseBusEv>
			return status;
 800185a:	7dfb      	ldrb	r3, [r7, #23]
		}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_ZN3I2C15VirtualRegisterItE8typedSetEt>:
    	T typedGet() const {
    		T value{};
    		std::memcpy(&value, content, _size);
    		return value;
    	}
    	void typedSet(T value) { std::memcpy(content, &value, _size); }
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6858      	ldr	r0, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7a5b      	ldrb	r3, [r3, #9]
 8001878:	461a      	mov	r2, r3
 800187a:	1cbb      	adds	r3, r7, #2
 800187c:	4619      	mov	r1, r3
 800187e:	f006 ffc1 	bl	8008804 <memcpy>
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_ZNK3I2C15VirtualRegisterItE8typedGetEv>:
    	T typedGet() const {
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
    		T value{};
 8001892:	2300      	movs	r3, #0
 8001894:	81fb      	strh	r3, [r7, #14]
    		std::memcpy(&value, content, _size);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	7a5b      	ldrb	r3, [r3, #9]
 800189e:	461a      	mov	r2, r3
 80018a0:	f107 030e 	add.w	r3, r7, #14
 80018a4:	4618      	mov	r0, r3
 80018a6:	f006 ffad 	bl	8008804 <memcpy>
    		return value;
 80018aa:	89fb      	ldrh	r3, [r7, #14]
    	}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_ZN4byte5splitItEEvT_PhNS_10EndianTypeE>:
	 * @param value The integer value to split.
	 * @param result Pointer to the array to store the bytes.
	 * @param order Byte order to use (default: BigEndian).
	 */
	template<typename T>
	constexpr inline void split(T value, uint8_t* result, EndianType order = EndianType::BigEndian) {
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	81fb      	strh	r3, [r7, #14]
		for (size_t i = 0; i < sizeof(T); ++i) {
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e01c      	b.n	8001902 <_ZN4byte5splitItEEvT_PhNS_10EndianTypeE+0x4e>
			if (order == EndianType::BigEndian)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10c      	bne.n	80018e8 <_ZN4byte5splitItEEvT_PhNS_10EndianTypeE+0x34>
				result[i] = static_cast<uint8_t>((value >> (8 * (sizeof(T) - 1 - i))) & 0xFF);
 80018ce:	89fa      	ldrh	r2, [r7, #14]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f1c3 0301 	rsb	r3, r3, #1
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	fa42 f103 	asr.w	r1, r2, r3
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	4413      	add	r3, r2
 80018e2:	b2ca      	uxtb	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	e009      	b.n	80018fc <_ZN4byte5splitItEEvT_PhNS_10EndianTypeE+0x48>
			else
				result[i] = static_cast<uint8_t>((value >> (8 * i)) & 0xFF);
 80018e8:	89fa      	ldrh	r2, [r7, #14]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	fa42 f103 	asr.w	r1, r2, r3
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	4413      	add	r3, r2
 80018f8:	b2ca      	uxtb	r2, r1
 80018fa:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < sizeof(T); ++i) {
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d9df      	bls.n	80018c8 <_ZN4byte5splitItEEvT_PhNS_10EndianTypeE+0x14>
		}
	}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	371c      	adds	r7, #28
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001924:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <MX_ADC1_Init+0x74>)
 8001926:	4a19      	ldr	r2, [pc, #100]	@ (800198c <MX_ADC1_Init+0x78>)
 8001928:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <MX_ADC1_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <MX_ADC1_Init+0x74>)
 8001932:	2201      	movs	r2, #1
 8001934:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001936:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <MX_ADC1_Init+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <MX_ADC1_Init+0x74>)
 800193e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001942:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001944:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <MX_ADC1_Init+0x74>)
 8001946:	2200      	movs	r2, #0
 8001948:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800194a:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <MX_ADC1_Init+0x74>)
 800194c:	2201      	movs	r2, #1
 800194e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001950:	480d      	ldr	r0, [pc, #52]	@ (8001988 <MX_ADC1_Init+0x74>)
 8001952:	f001 fb71 	bl	8003038 <HAL_ADC_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800195c:	f000 ffd8 	bl	8002910 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001960:	2302      	movs	r3, #2
 8001962:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001964:	2301      	movs	r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	@ (8001988 <MX_ADC1_Init+0x74>)
 8001972:	f001 fc39 	bl	80031e8 <HAL_ADC_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800197c:	f000 ffc8 	bl	8002910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000078 	.word	0x20000078
 800198c:	40012400 	.word	0x40012400

08001990 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a14      	ldr	r2, [pc, #80]	@ (80019fc <HAL_ADC_MspInit+0x6c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d121      	bne.n	80019f4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <HAL_ADC_MspInit+0x70>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <HAL_ADC_MspInit+0x70>)
 80019b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <HAL_ADC_MspInit+0x70>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <HAL_ADC_MspInit+0x70>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001a00 <HAL_ADC_MspInit+0x70>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_ADC_MspInit+0x70>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019e0:	230c      	movs	r3, #12
 80019e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e4:	2303      	movs	r3, #3
 80019e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4619      	mov	r1, r3
 80019ee:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <HAL_ADC_MspInit+0x74>)
 80019f0:	f002 f8b6 	bl	8003b60 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40012400 	.word	0x40012400
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010800 	.word	0x40010800

08001a08 <_ZN13PIDControllerC1Effff>:
#include "control.hpp"


// --- Controller constructor -----------------------------------------------------------

PIDController::PIDController(float dt, float Kp, float Ki, float Kd) :
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
		_dt(dt), _Kp(Kp), _Ki(Ki), _Kd(Kd) {}
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4a05      	ldr	r2, [pc, #20]	@ (8001a58 <_ZN13PIDControllerC1Effff+0x50>)
 8001a42:	619a      	str	r2, [r3, #24]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4a05      	ldr	r2, [pc, #20]	@ (8001a5c <_ZN13PIDControllerC1Effff+0x54>)
 8001a48:	61da      	str	r2, [r3, #28]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	c9742400 	.word	0xc9742400
 8001a5c:	49742400 	.word	0x49742400

08001a60 <_ZN13PIDController7computeEf>:


// --- Controller core method -----------------------------------------------------------

float PIDController::compute(float e_k) {
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	// Proportional
	float P = _Kp * e_k;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	6838      	ldr	r0, [r7, #0]
 8001a72:	f7ff f897 	bl	8000ba4 <__aeabi_fmul>
 8001a76:	4603      	mov	r3, r0
 8001a78:	61bb      	str	r3, [r7, #24]

	// Integral (cumulative and anti-windup)
	float I_candidate = _integral + (_Ki * _dt * (e_k + _e_k1)) / 2.0f;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691c      	ldr	r4, [r3, #16]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4610      	mov	r0, r2
 8001a8a:	f7ff f88b 	bl	8000ba4 <__aeabi_fmul>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461d      	mov	r5, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe ff7b 	bl	8000994 <__addsf3>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	f7ff f87e 	bl	8000ba4 <__aeabi_fmul>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f92c 	bl	8000d0c <__aeabi_fdiv>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7fe ff6b 	bl	8000994 <__addsf3>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	617b      	str	r3, [r7, #20]

	// Derivative (discrete derivative filter)
    float D = _Kd * (e_k - _e_k1) / _dt;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68dc      	ldr	r4, [r3, #12]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	4619      	mov	r1, r3
 8001acc:	6838      	ldr	r0, [r7, #0]
 8001ace:	f7fe ff5f 	bl	8000990 <__aeabi_fsub>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7ff f864 	bl	8000ba4 <__aeabi_fmul>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f7ff f910 	bl	8000d0c <__aeabi_fdiv>
 8001aec:	4603      	mov	r3, r0
 8001aee:	613b      	str	r3, [r7, #16]

    //_antiWindupClamp(e_k, P, D);
	//float I = _integral;

    // Candidate output
    float u_raw = P + I_candidate + D;
 8001af0:	6979      	ldr	r1, [r7, #20]
 8001af2:	69b8      	ldr	r0, [r7, #24]
 8001af4:	f7fe ff4e 	bl	8000994 <__addsf3>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4619      	mov	r1, r3
 8001afc:	6938      	ldr	r0, [r7, #16]
 8001afe:	f7fe ff49 	bl	8000994 <__addsf3>
 8001b02:	4603      	mov	r3, r0
 8001b04:	60fb      	str	r3, [r7, #12]

    // Saturation
    float u_sat = _clamp(u_raw, _out_min, _out_max);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	68f9      	ldr	r1, [r7, #12]
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f84d 	bl	8001bb0 <_ZN13PIDController6_clampEfff>
 8001b16:	60b8      	str	r0, [r7, #8]

    // Clamping logic
    bool update_integrator = true;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	77fb      	strb	r3, [r7, #31]
    if (u_raw != u_sat) {
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f7ff f9d4 	bl	8000ecc <__aeabi_fcmpeq>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d123      	bne.n	8001b72 <_ZN13PIDController7computeEf+0x112>
    	if ((u_sat >= _out_max && e_k > 0) || (u_sat <= _out_min && e_k < 0)) {
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	68b8      	ldr	r0, [r7, #8]
 8001b32:	f7ff f9e9 	bl	8000f08 <__aeabi_fcmpge>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <_ZN13PIDController7computeEf+0xec>
 8001b3c:	f04f 0100 	mov.w	r1, #0
 8001b40:	6838      	ldr	r0, [r7, #0]
 8001b42:	f7ff f9eb 	bl	8000f1c <__aeabi_fcmpgt>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d110      	bne.n	8001b6e <_ZN13PIDController7computeEf+0x10e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4619      	mov	r1, r3
 8001b52:	68b8      	ldr	r0, [r7, #8]
 8001b54:	f7ff f9ce 	bl	8000ef4 <__aeabi_fcmple>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d009      	beq.n	8001b72 <_ZN13PIDController7computeEf+0x112>
 8001b5e:	f04f 0100 	mov.w	r1, #0
 8001b62:	6838      	ldr	r0, [r7, #0]
 8001b64:	f7ff f9bc 	bl	8000ee0 <__aeabi_fcmplt>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <_ZN13PIDController7computeEf+0x112>
    		update_integrator = false;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	77fb      	strb	r3, [r7, #31]
    	}
    }

    if (update_integrator) {
 8001b72:	7ffb      	ldrb	r3, [r7, #31]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <_ZN13PIDController7computeEf+0x11e>
    	_integral = I_candidate;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	611a      	str	r2, [r3, #16]
    }

    // Update error and return
    _e_k1 = e_k;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	615a      	str	r2, [r3, #20]

    return u_sat;
 8001b84:	68bb      	ldr	r3, [r7, #8]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3720      	adds	r7, #32
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bdb0      	pop	{r4, r5, r7, pc}

08001b8e <_ZN13PIDController15setOutputLimitsEff>:
void PIDController::reset(void) {
	_integral = 0.0f;
	_e_k1 = 0.0f;
}

void PIDController::setOutputLimits(float min, float max) {
 8001b8e:	b480      	push	{r7}
 8001b90:	b085      	sub	sp, #20
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
	_out_min = min;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	619a      	str	r2, [r3, #24]
	_out_max = max;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	61da      	str	r2, [r3, #28]
}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <_ZN13PIDController6_clampEfff>:

// --- Controller helper methods --------------------------------------------------------

float PIDController::_clamp(float x, float lo, float hi) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
	if (x < lo) return lo;
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	68b8      	ldr	r0, [r7, #8]
 8001bc2:	f7ff f98d 	bl	8000ee0 <__aeabi_fcmplt>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <_ZN13PIDController6_clampEfff+0x20>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	e009      	b.n	8001be4 <_ZN13PIDController6_clampEfff+0x34>
	if (x > hi) return hi;
 8001bd0:	6839      	ldr	r1, [r7, #0]
 8001bd2:	68b8      	ldr	r0, [r7, #8]
 8001bd4:	f7ff f9a2 	bl	8000f1c <__aeabi_fcmpgt>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <_ZN13PIDController6_clampEfff+0x32>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	e000      	b.n	8001be4 <_ZN13PIDController6_clampEfff+0x34>
	return x;
 8001be2:	68bb      	ldr	r3, [r7, #8]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_ZN15SWPIDControllerC1Effff>:

// --------------------------------------------- SWPIDController class implementation ---

// --- Controller constructor -----------------------------------------------------------

SWPIDController::SWPIDController(float dt, float Kp, float Ki, float Kd) :
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
		PIDController(dt, Kp, Ki, 0.0f) {}
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	68b9      	ldr	r1, [r7, #8]
 8001c08:	f7ff fefe 	bl	8001a08 <_ZN13PIDControllerC1Effff>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_ZN15SWPIDController7computeEff>:

// --- Controller core method (partial override) ----------------------------------------

float SWPIDController::compute(float x_ref, float x_k) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
	// Pre operations
	float velocity = (x_k - _x_k1) / _dt;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe feaa 	bl	8000990 <__aeabi_fsub>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	4610      	mov	r0, r2
 8001c48:	f7ff f860 	bl	8000d0c <__aeabi_fdiv>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	61bb      	str	r3, [r7, #24]
	float e_k = x_ref - x_k;
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	68b8      	ldr	r0, [r7, #8]
 8001c54:	f7fe fe9c 	bl	8000990 <__aeabi_fsub>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	617b      	str	r3, [r7, #20]

	float sigma = _Ki * e_k;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4619      	mov	r1, r3
 8001c62:	6978      	ldr	r0, [r7, #20]
 8001c64:	f7fe ff9e 	bl	8000ba4 <__aeabi_fmul>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	613b      	str	r3, [r7, #16]

	// Superclass method call
	float phi = PIDController::compute(e_k);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6979      	ldr	r1, [r7, #20]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fef5 	bl	8001a60 <_ZN13PIDController7computeEf>
 8001c76:	61f8      	str	r0, [r7, #28]

	// Post operations
	if (SYSTEM_STATE::STICK_SLIP == _st && 0 >= sigma*phi) {
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d114      	bne.n	8001caa <_ZN15SWPIDController7computeEff+0x86>
 8001c80:	69f9      	ldr	r1, [r7, #28]
 8001c82:	6938      	ldr	r0, [r7, #16]
 8001c84:	f7fe ff8e 	bl	8000ba4 <__aeabi_fmul>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f04f 0100 	mov.w	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f930 	bl	8000ef4 <__aeabi_fcmple>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <_ZN15SWPIDController7computeEff+0x86>
		// Transition to OVERSHOOT
		phi = -phi;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001ca0:	61fb      	str	r3, [r7, #28]
		_st = SYSTEM_STATE::OVERSHOOT;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ca8:	e01f      	b.n	8001cea <_ZN15SWPIDController7computeEff+0xc6>
	}
	else if (SYSTEM_STATE::OVERSHOOT && 0 <= velocity*phi) {
 8001caa:	69f9      	ldr	r1, [r7, #28]
 8001cac:	69b8      	ldr	r0, [r7, #24]
 8001cae:	f7fe ff79 	bl	8000ba4 <__aeabi_fmul>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f04f 0100 	mov.w	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f925 	bl	8000f08 <__aeabi_fcmpge>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d012      	beq.n	8001cea <_ZN15SWPIDController7computeEff+0xc6>
		// Transition to STICK_SLIP
		phi = sigma * _Kp / _Ki;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	6939      	ldr	r1, [r7, #16]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe ff6a 	bl	8000ba4 <__aeabi_fmul>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4610      	mov	r0, r2
 8001cdc:	f7ff f816 	bl	8000d0c <__aeabi_fdiv>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	61fb      	str	r3, [r7, #28]
		_st = SYSTEM_STATE::STICK_SLIP;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	return phi - _Kd * velocity;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	69b9      	ldr	r1, [r7, #24]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe ff57 	bl	8000ba4 <__aeabi_fmul>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	69f8      	ldr	r0, [r7, #28]
 8001cfc:	f7fe fe48 	bl	8000990 <__aeabi_fsub>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3720      	adds	r7, #32
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <MX_GPIO_Init+0x40>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <MX_GPIO_Init+0x40>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6193      	str	r3, [r2, #24]
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <MX_GPIO_Init+0x40>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <MX_GPIO_Init+0x40>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	4a07      	ldr	r2, [pc, #28]	@ (8001d4c <MX_GPIO_Init+0x40>)
 8001d30:	f043 0308 	orr.w	r3, r3, #8
 8001d34:	6193      	str	r3, [r2, #24]
 8001d36:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <MX_GPIO_Init+0x40>)
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]

}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	40021000 	.word	0x40021000

08001d50 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d54:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d56:	4a13      	ldr	r2, [pc, #76]	@ (8001da4 <MX_I2C1_Init+0x54>)
 8001d58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d5c:	4a12      	ldr	r2, [pc, #72]	@ (8001da8 <MX_I2C1_Init+0x58>)
 8001d5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 132;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d68:	2284      	movs	r2, #132	@ 0x84
 8001d6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d74:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d80:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	@ (8001da0 <MX_I2C1_Init+0x50>)
 8001d8e:	f002 f927 	bl	8003fe0 <HAL_I2C_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d98:	f000 fdba 	bl	8002910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	200000a8 	.word	0x200000a8
 8001da4:	40005400 	.word	0x40005400
 8001da8:	00061a80 	.word	0x00061a80

08001dac <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001db0:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001db2:	4a13      	ldr	r2, [pc, #76]	@ (8001e00 <MX_I2C2_Init+0x54>)
 8001db4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001db6:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001db8:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <MX_I2C2_Init+0x58>)
 8001dba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001dca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001de8:	4804      	ldr	r0, [pc, #16]	@ (8001dfc <MX_I2C2_Init+0x50>)
 8001dea:	f002 f8f9 	bl	8003fe0 <HAL_I2C_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001df4:	f000 fd8c 	bl	8002910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200000fc 	.word	0x200000fc
 8001e00:	40005800 	.word	0x40005800
 8001e04:	00061a80 	.word	0x00061a80

08001e08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	@ 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0318 	add.w	r3, r7, #24
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a5a      	ldr	r2, [pc, #360]	@ (8001f8c <HAL_I2C_MspInit+0x184>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	f040 8083 	bne.w	8001f30 <HAL_I2C_MspInit+0x128>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	4b59      	ldr	r3, [pc, #356]	@ (8001f90 <HAL_I2C_MspInit+0x188>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	4a58      	ldr	r2, [pc, #352]	@ (8001f90 <HAL_I2C_MspInit+0x188>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6193      	str	r3, [r2, #24]
 8001e36:	4b56      	ldr	r3, [pc, #344]	@ (8001f90 <HAL_I2C_MspInit+0x188>)
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e42:	23c0      	movs	r3, #192	@ 0xc0
 8001e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e46:	2312      	movs	r3, #18
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4e:	f107 0318 	add.w	r3, r7, #24
 8001e52:	4619      	mov	r1, r3
 8001e54:	484f      	ldr	r0, [pc, #316]	@ (8001f94 <HAL_I2C_MspInit+0x18c>)
 8001e56:	f001 fe83 	bl	8003b60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e5a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f90 <HAL_I2C_MspInit+0x188>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a4c      	ldr	r2, [pc, #304]	@ (8001f90 <HAL_I2C_MspInit+0x188>)
 8001e60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <HAL_I2C_MspInit+0x188>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001e72:	4b49      	ldr	r3, [pc, #292]	@ (8001f98 <HAL_I2C_MspInit+0x190>)
 8001e74:	4a49      	ldr	r2, [pc, #292]	@ (8001f9c <HAL_I2C_MspInit+0x194>)
 8001e76:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e78:	4b47      	ldr	r3, [pc, #284]	@ (8001f98 <HAL_I2C_MspInit+0x190>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7e:	4b46      	ldr	r3, [pc, #280]	@ (8001f98 <HAL_I2C_MspInit+0x190>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e84:	4b44      	ldr	r3, [pc, #272]	@ (8001f98 <HAL_I2C_MspInit+0x190>)
 8001e86:	2280      	movs	r2, #128	@ 0x80
 8001e88:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e8a:	4b43      	ldr	r3, [pc, #268]	@ (8001f98 <HAL_I2C_MspInit+0x190>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e90:	4b41      	ldr	r3, [pc, #260]	@ (8001f98 <HAL_I2C_MspInit+0x190>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001e96:	4b40      	ldr	r3, [pc, #256]	@ (8001f98 <HAL_I2C_MspInit+0x190>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e9c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f98 <HAL_I2C_MspInit+0x190>)
 8001e9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ea2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001ea4:	483c      	ldr	r0, [pc, #240]	@ (8001f98 <HAL_I2C_MspInit+0x190>)
 8001ea6:	f001 fc19 	bl	80036dc <HAL_DMA_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 8001eb0:	f000 fd2e 	bl	8002910 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a38      	ldr	r2, [pc, #224]	@ (8001f98 <HAL_I2C_MspInit+0x190>)
 8001eb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001eba:	4a37      	ldr	r2, [pc, #220]	@ (8001f98 <HAL_I2C_MspInit+0x190>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001ec0:	4b37      	ldr	r3, [pc, #220]	@ (8001fa0 <HAL_I2C_MspInit+0x198>)
 8001ec2:	4a38      	ldr	r2, [pc, #224]	@ (8001fa4 <HAL_I2C_MspInit+0x19c>)
 8001ec4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec6:	4b36      	ldr	r3, [pc, #216]	@ (8001fa0 <HAL_I2C_MspInit+0x198>)
 8001ec8:	2210      	movs	r2, #16
 8001eca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ecc:	4b34      	ldr	r3, [pc, #208]	@ (8001fa0 <HAL_I2C_MspInit+0x198>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed2:	4b33      	ldr	r3, [pc, #204]	@ (8001fa0 <HAL_I2C_MspInit+0x198>)
 8001ed4:	2280      	movs	r2, #128	@ 0x80
 8001ed6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed8:	4b31      	ldr	r3, [pc, #196]	@ (8001fa0 <HAL_I2C_MspInit+0x198>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ede:	4b30      	ldr	r3, [pc, #192]	@ (8001fa0 <HAL_I2C_MspInit+0x198>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa0 <HAL_I2C_MspInit+0x198>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001eea:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa0 <HAL_I2C_MspInit+0x198>)
 8001eec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ef0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001ef2:	482b      	ldr	r0, [pc, #172]	@ (8001fa0 <HAL_I2C_MspInit+0x198>)
 8001ef4:	f001 fbf2 	bl	80036dc <HAL_DMA_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8001efe:	f000 fd07 	bl	8002910 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a26      	ldr	r2, [pc, #152]	@ (8001fa0 <HAL_I2C_MspInit+0x198>)
 8001f06:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f08:	4a25      	ldr	r2, [pc, #148]	@ (8001fa0 <HAL_I2C_MspInit+0x198>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	201f      	movs	r0, #31
 8001f14:	f001 fb9d 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001f18:	201f      	movs	r0, #31
 8001f1a:	f001 fbb6 	bl	800368a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	2020      	movs	r0, #32
 8001f24:	f001 fb95 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001f28:	2020      	movs	r0, #32
 8001f2a:	f001 fbae 	bl	800368a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001f2e:	e029      	b.n	8001f84 <HAL_I2C_MspInit+0x17c>
  else if(i2cHandle->Instance==I2C2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa8 <HAL_I2C_MspInit+0x1a0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d124      	bne.n	8001f84 <HAL_I2C_MspInit+0x17c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <HAL_I2C_MspInit+0x188>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	4a14      	ldr	r2, [pc, #80]	@ (8001f90 <HAL_I2C_MspInit+0x188>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6193      	str	r3, [r2, #24]
 8001f46:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <HAL_I2C_MspInit+0x188>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f52:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f58:	2312      	movs	r3, #18
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	f107 0318 	add.w	r3, r7, #24
 8001f64:	4619      	mov	r1, r3
 8001f66:	480b      	ldr	r0, [pc, #44]	@ (8001f94 <HAL_I2C_MspInit+0x18c>)
 8001f68:	f001 fdfa 	bl	8003b60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f6c:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <HAL_I2C_MspInit+0x188>)
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	4a07      	ldr	r2, [pc, #28]	@ (8001f90 <HAL_I2C_MspInit+0x188>)
 8001f72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f76:	61d3      	str	r3, [r2, #28]
 8001f78:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <HAL_I2C_MspInit+0x188>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	@ 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40005400 	.word	0x40005400
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010c00 	.word	0x40010c00
 8001f98:	20000150 	.word	0x20000150
 8001f9c:	40020080 	.word	0x40020080
 8001fa0:	20000194 	.word	0x20000194
 8001fa4:	4002006c 	.word	0x4002006c
 8001fa8:	40005800 	.word	0x40005800

08001fac <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002030 <HAL_I2C_MspDeInit+0x84>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d11e      	bne.n	8001ffc <HAL_I2C_MspDeInit+0x50>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_I2C_MspDeInit+0x88>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8002034 <HAL_I2C_MspDeInit+0x88>)
 8001fc4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001fc8:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001fca:	2140      	movs	r1, #64	@ 0x40
 8001fcc:	481a      	ldr	r0, [pc, #104]	@ (8002038 <HAL_I2C_MspDeInit+0x8c>)
 8001fce:	f001 ff4b 	bl	8003e68 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001fd2:	2180      	movs	r1, #128	@ 0x80
 8001fd4:	4818      	ldr	r0, [pc, #96]	@ (8002038 <HAL_I2C_MspDeInit+0x8c>)
 8001fd6:	f001 ff47 	bl	8003e68 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f001 fbd6 	bl	8003790 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f001 fbd1 	bl	8003790 <HAL_DMA_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001fee:	201f      	movs	r0, #31
 8001ff0:	f001 fb59 	bl	80036a6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001ff4:	2020      	movs	r0, #32
 8001ff6:	f001 fb56 	bl	80036a6 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001ffa:	e014      	b.n	8002026 <HAL_I2C_MspDeInit+0x7a>
  else if(i2cHandle->Instance==I2C2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0e      	ldr	r2, [pc, #56]	@ (800203c <HAL_I2C_MspDeInit+0x90>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10f      	bne.n	8002026 <HAL_I2C_MspDeInit+0x7a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <HAL_I2C_MspDeInit+0x88>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a0a      	ldr	r2, [pc, #40]	@ (8002034 <HAL_I2C_MspDeInit+0x88>)
 800200c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002010:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002012:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002016:	4808      	ldr	r0, [pc, #32]	@ (8002038 <HAL_I2C_MspDeInit+0x8c>)
 8002018:	f001 ff26 	bl	8003e68 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800201c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002020:	4805      	ldr	r0, [pc, #20]	@ (8002038 <HAL_I2C_MspDeInit+0x8c>)
 8002022:	f001 ff21 	bl	8003e68 <HAL_GPIO_DeInit>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40005400 	.word	0x40005400
 8002034:	40021000 	.word	0x40021000
 8002038:	40010c00 	.word	0x40010c00
 800203c:	40005800 	.word	0x40005800

08002040 <_ZN3I2C6DeviceC1Ehm>:
		// Return
		return result;
	}


	Device::Device(uint8_t address, uint32_t wait_delay)
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	460b      	mov	r3, r1
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	72fb      	strb	r3, [r7, #11]
		: _address(address << 1), _wait_delay(wait_delay)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	7afb      	ldrb	r3, [r7, #11]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	b2da      	uxtb	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	711a      	strb	r2, [r3, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	609a      	str	r2, [r3, #8]
	{
	#ifdef USE_FREERTOS
		_mutex = xSemaphoreCreateMutex();
	#endif
	}
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <_ZN3I2C6DeviceD1Ev>:

	Device::~Device() {
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
		if(_mutex) {
			vSemaphoreDelete(_mutex);
			_mutex = nullptr;
		}
	#endif
	}
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <_ZN3I2C6Device10acquireBusEv>:

	HAL_StatusTypeDef Device::acquireBus() {
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
		if (!_handle) return HAL_ERROR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <_ZN3I2C6Device10acquireBusEv+0x14>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <_ZN3I2C6Device10acquireBusEv+0x16>
	#ifdef USE_FREERTOS
		if(_mutex == nullptr) return HAL_ERROR;
		if(xSemaphoreTake(_mutex, _wait_delay) != pdTRUE) return HAL_TIMEOUT;
	#endif

		return HAL_OK;
 8002098:	2300      	movs	r3, #0
	}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <_ZN3I2C6Device10releaseBusEv>:

	void Device::releaseBus() {
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	#ifdef USE_FREERTOS
		if(_mutex) xSemaphoreGive(_mutex);
	#endif
	}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
	...

080020b8 <_ZN3I2C16IVirtualRegisterC1Ehh>:
		IVirtualRegister(uint8_t addr, uint8_t size) : _address(addr), _size(size) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
 80020c4:	4613      	mov	r3, r2
 80020c6:	70bb      	strb	r3, [r7, #2]
 80020c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002108 <_ZN3I2C16IVirtualRegisterC1Ehh+0x50>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	78fa      	ldrb	r2, [r7, #3]
 80020d2:	721a      	strb	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	78ba      	ldrb	r2, [r7, #2]
 80020d8:	725a      	strb	r2, [r3, #9]
			content = new uint8_t[_size];
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7a5b      	ldrb	r3, [r3, #9]
 80020de:	4618      	mov	r0, r3
 80020e0:	f006 fa24 	bl	800852c <_Znaj>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	605a      	str	r2, [r3, #4]
			std::memset(content, 0, _size);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6858      	ldr	r0, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7a5b      	ldrb	r3, [r3, #9]
 80020f4:	461a      	mov	r2, r3
 80020f6:	2100      	movs	r1, #0
 80020f8:	f006 fafc 	bl	80086f4 <memset>
		}
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	08008900 	.word	0x08008900

0800210c <_ZNK3I2C16IVirtualRegister4sizeEv>:
	    const uint8_t size() const { return _size; }
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7a5b      	ldrb	r3, [r3, #9]
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <_ZNK3I2C16IVirtualRegister7addressEv>:
	    const uint8_t address() const { return _address; }
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	7a1b      	ldrb	r3, [r3, #8]
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <_ZN3I2C11RegisterMapC1Ev>:
    	RegisterMap() : _count(0) {}
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2800 	strb.w	r2, [r3, #2048]	@ 0x800
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <_ZN3I2C11RegisterMap6appendERNS_16IVirtualRegisterE>:
    	bool append(IVirtualRegister& reg) {
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
    		_entries[_count].address = reg.address();
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 8002164:	461c      	mov	r4, r3
 8002166:	6838      	ldr	r0, [r7, #0]
 8002168:	f7ff ffdb 	bl	8002122 <_ZNK3I2C16IVirtualRegister7addressEv>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
    		_entries[_count].reg = &reg;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	605a      	str	r2, [r3, #4]
    		_count++;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 800218c:	3301      	adds	r3, #1
 800218e:	b2da      	uxtb	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f883 2800 	strb.w	r2, [r3, #2048]	@ 0x800
    		return true;
 8002196:	2301      	movs	r3, #1
    	}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bd90      	pop	{r4, r7, pc}

080021a0 <_ZN3I2C11RegisterMap6accessEh>:
    	IVirtualRegister* access(uint8_t addr) {
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	70fb      	strb	r3, [r7, #3]
    		for (uint8_t i = 0; i < _count; i++) {
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	e00f      	b.n	80021d2 <_ZN3I2C11RegisterMap6accessEh+0x32>
    			if (_entries[i].address == addr) return _entries[i].reg;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d105      	bne.n	80021cc <_ZN3I2C11RegisterMap6accessEh+0x2c>
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	e009      	b.n	80021e0 <_ZN3I2C11RegisterMap6accessEh+0x40>
    		for (uint8_t i = 0; i < _count; i++) {
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	3301      	adds	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3800 	ldrb.w	r3, [r3, #2048]	@ 0x800
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d3e9      	bcc.n	80021b2 <_ZN3I2C11RegisterMap6accessEh+0x12>
    		return nullptr;
 80021de:	2300      	movs	r3, #0
    	}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <_ZN3I2C5SlaveC1ERNS_11RegisterMapE>:
		Slave(RegisterMap& regMap) :
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
			_handle(nullptr),
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
			_regMap(regMap),
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	605a      	str	r2, [r3, #4]
			_currentRegisterAddr(0), _currentRegister(nullptr)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	721a      	strb	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	60da      	str	r2, [r3, #12]
		{}
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <_ZN3I2C5Slave11onAddrMatchEh>:

		void onAddrMatch(uint8_t transferDirection) {
 8002218:	b5b0      	push	{r4, r5, r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
			if (!_handle) return;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d02d      	beq.n	8002288 <_ZN3I2C5Slave11onAddrMatchEh+0x70>

			if (transferDirection == I2C_DIRECTION_TRANSMIT) {
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d109      	bne.n	8002246 <_ZN3I2C5Slave11onAddrMatchEh+0x2e>
				// Master → Slave

				HAL_I2C_Slave_Seq_Receive_IT(
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f103 0108 	add.w	r1, r3, #8
 800223c:	2301      	movs	r3, #1
 800223e:	2201      	movs	r2, #1
 8002240:	f002 fc36 	bl	8004ab0 <HAL_I2C_Slave_Seq_Receive_IT>
 8002244:	e021      	b.n	800228a <_ZN3I2C5Slave11onAddrMatchEh+0x72>
						I2C_FIRST_FRAME
						);
			}
			else {
				// Master ← Slave
				_currentRegister = _regMap.access(_currentRegisterAddr);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7a1b      	ldrb	r3, [r3, #8]
 800224e:	4619      	mov	r1, r3
 8002250:	4610      	mov	r0, r2
 8002252:	f7ff ffa5 	bl	80021a0 <_ZN3I2C11RegisterMap6accessEh>
 8002256:	4602      	mov	r2, r0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	60da      	str	r2, [r3, #12]

				if (_currentRegister) {
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d012      	beq.n	800228a <_ZN3I2C5Slave11onAddrMatchEh+0x72>
					HAL_I2C_Slave_Seq_Transmit_IT(
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681c      	ldr	r4, [r3, #0]
						_handle,
						_currentRegister -> content,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
					HAL_I2C_Slave_Seq_Transmit_IT(
 800226c:	685d      	ldr	r5, [r3, #4]
						_currentRegister -> size(),
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff4a 	bl	800210c <_ZNK3I2C16IVirtualRegister4sizeEv>
 8002278:	4603      	mov	r3, r0
					HAL_I2C_Slave_Seq_Transmit_IT(
 800227a:	461a      	mov	r2, r3
 800227c:	2308      	movs	r3, #8
 800227e:	4629      	mov	r1, r5
 8002280:	4620      	mov	r0, r4
 8002282:	f002 fba3 	bl	80049cc <HAL_I2C_Slave_Seq_Transmit_IT>
 8002286:	e000      	b.n	800228a <_ZN3I2C5Slave11onAddrMatchEh+0x72>
			if (!_handle) return;
 8002288:	bf00      	nop
						I2C_FIRST_AND_LAST_FRAME
					);
				}
			}
		}
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bdb0      	pop	{r4, r5, r7, pc}

08002290 <_ZN3I2C5Slave17onReceiveCompleteEv>:

		void onReceiveComplete() {
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
			if (!_currentRegister) {
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d120      	bne.n	80022e2 <_ZN3I2C5Slave17onReceiveCompleteEv+0x52>
				_currentRegister = _regMap.access(_currentRegisterAddr);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7a1b      	ldrb	r3, [r3, #8]
 80022a8:	4619      	mov	r1, r3
 80022aa:	4610      	mov	r0, r2
 80022ac:	f7ff ff78 	bl	80021a0 <_ZN3I2C11RegisterMap6accessEh>
 80022b0:	4602      	mov	r2, r0
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60da      	str	r2, [r3, #12]
				if (_currentRegister) {
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d014      	beq.n	80022e8 <_ZN3I2C5Slave17onReceiveCompleteEv+0x58>
					HAL_I2C_Slave_Seq_Receive_IT(
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681c      	ldr	r4, [r3, #0]
						_handle,
						_currentRegister -> content,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
					HAL_I2C_Slave_Seq_Receive_IT(
 80022c6:	685d      	ldr	r5, [r3, #4]
						_currentRegister -> size(),
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff1d 	bl	800210c <_ZNK3I2C16IVirtualRegister4sizeEv>
 80022d2:	4603      	mov	r3, r0
					HAL_I2C_Slave_Seq_Receive_IT(
 80022d4:	461a      	mov	r2, r3
 80022d6:	2308      	movs	r3, #8
 80022d8:	4629      	mov	r1, r5
 80022da:	4620      	mov	r0, r4
 80022dc:	f002 fbe8 	bl	8004ab0 <HAL_I2C_Slave_Seq_Receive_IT>
 80022e0:	e002      	b.n	80022e8 <_ZN3I2C5Slave17onReceiveCompleteEv+0x58>
						I2C_FIRST_AND_LAST_FRAME
					);
				}
			}
			else {
				processReceivedData();
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f843 	bl	800236e <_ZN3I2C5Slave19processReceivedDataEv>
			}

			_currentRegister = nullptr;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
		}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bdb0      	pop	{r4, r5, r7, pc}

080022f6 <_ZN3I2C5Slave18onTransmitCompleteEv>:

		void onTransmitComplete() {
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
			_currentRegister = nullptr;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]
		}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <_ZN3I2C5Slave16onListenCompleteEv>:

		void onListenComplete() {
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
			HAL_I2C_EnableListen_IT(_handle);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fc3a 	bl	8004b94 <HAL_I2C_EnableListen_IT>
		}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_ZN3I2C5Slave7onErrorEv>:

		void onError() {
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
			uint32_t errorCode = HAL_I2C_GetError(_handle);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f002 feaf 	bl	8005098 <HAL_I2C_GetError>
 800233a:	60f8      	str	r0, [r7, #12]

			// AF ERROR
			if (errorCode == HAL_I2C_ERROR_AF) {
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b04      	cmp	r3, #4
 8002340:	d00c      	beq.n	800235c <_ZN3I2C5Slave7onErrorEv+0x34>

			}

			// BUS ERROR
			else if (errorCode == HAL_I2C_ERROR_BERR) {
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d109      	bne.n	800235c <_ZN3I2C5Slave7onErrorEv+0x34>
				HAL_I2C_DeInit(_handle);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f001 ff8b 	bl	8004268 <HAL_I2C_DeInit>
				HAL_I2C_Init(_handle);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f001 fe42 	bl	8003fe0 <HAL_I2C_Init>
			}

			HAL_I2C_EnableListen_IT(_handle);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f002 fc17 	bl	8004b94 <HAL_I2C_EnableListen_IT>
		}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_ZN3I2C5Slave19processReceivedDataEv>:
		RegisterMap& _regMap;

		uint8_t _currentRegisterAddr;
		IVirtualRegister* _currentRegister;

		void processReceivedData() {
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
			if (!_currentRegister) return;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
		}
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <_ZN6AS5600C1Ehm>:
	AS5600(uint8_t address = DEFAULT_ADDRESS, uint32_t wait_delay = HAL_MAX_DELAY)
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	460b      	mov	r3, r1
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	72fb      	strb	r3, [r7, #11]
		: I2C::Device(address, wait_delay) {}
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	7af9      	ldrb	r1, [r7, #11]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fe51 	bl	8002040 <_ZN3I2C6DeviceC1Ehm>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	731a      	strb	r2, [r3, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <_ZN7DRV8870C1Emmt>:
	};


	// --- Constructor

	DRV8870(uint32_t in1_channel, uint32_t in2_channel,	uint16_t pwm_steps)
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	807b      	strh	r3, [r7, #2]
		: _in1_channel(in1_channel), _in2_channel(in2_channel),	_pwm_steps(pwm_steps) {}
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	819a      	strh	r2, [r3, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	899b      	ldrh	r3, [r3, #12]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe f804 	bl	80003f0 <__aeabi_i2d>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	f04f 0000 	mov.w	r0, #0
 80023f0:	4909      	ldr	r1, [pc, #36]	@ (8002418 <_ZN7DRV8870C1Emmt+0x60>)
 80023f2:	f7fe f991 	bl	8000718 <__aeabi_ddiv>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7fe fa73 	bl	80008e8 <__aeabi_d2f>
 8002402:	4602      	mov	r2, r0
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	611a      	str	r2, [r3, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	751a      	strb	r2, [r3, #20]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	3ff00000 	.word	0x3ff00000

0800241c <_ZN3I2C16IVirtualRegisterD1Ev>:
		virtual ~IVirtualRegister() = default;
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <_ZN3I2C16IVirtualRegisterD1Ev+0x1c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	08008900 	.word	0x08008900

0800243c <_ZN3I2C16IVirtualRegisterD0Ev>:
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ffe9 	bl	800241c <_ZN3I2C16IVirtualRegisterD1Ev>
 800244a:	210c      	movs	r1, #12
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f006 f86b 	bl	8008528 <_ZdlPvj>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_ZN3I2C15VirtualRegisterIfED1Ev>:
    class VirtualRegister : public IVirtualRegister{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	4a05      	ldr	r2, [pc, #20]	@ (800247c <_ZN3I2C15VirtualRegisterIfED1Ev+0x20>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ffd5 	bl	800241c <_ZN3I2C16IVirtualRegisterD1Ev>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	080088f0 	.word	0x080088f0

08002480 <_ZN3I2C15VirtualRegisterIfED0Ev>:
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ffe7 	bl	800245c <_ZN3I2C15VirtualRegisterIfED1Ev>
 800248e:	210c      	movs	r1, #12
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f006 f849 	bl	8008528 <_ZdlPvj>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <_ZN3I2C15VirtualRegisterItED1Ev>:
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	4a05      	ldr	r2, [pc, #20]	@ (80024c0 <_ZN3I2C15VirtualRegisterItED1Ev+0x20>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ffb3 	bl	800241c <_ZN3I2C16IVirtualRegisterD1Ev>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	080088e0 	.word	0x080088e0

080024c4 <_ZN3I2C15VirtualRegisterItED0Ev>:
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ffe7 	bl	80024a0 <_ZN3I2C15VirtualRegisterItED1Ev>
 80024d2:	210c      	movs	r1, #12
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f006 f827 	bl	8008528 <_ZdlPvj>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_ZN3I2C15VirtualRegisterIhED1Ev>:
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <_ZN3I2C15VirtualRegisterIhED1Ev+0x20>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff91 	bl	800241c <_ZN3I2C16IVirtualRegisterD1Ev>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	080088d0 	.word	0x080088d0

08002508 <_ZN3I2C15VirtualRegisterIhED0Ev>:
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ffe7 	bl	80024e4 <_ZN3I2C15VirtualRegisterIhED1Ev>
 8002516:	210c      	movs	r1, #12
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f006 f805 	bl	8008528 <_ZdlPvj>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_ZN6AS5600D1Ev>:
class AS5600 : public I2C::Device {
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fd9c 	bl	8002070 <_ZN3I2C6DeviceD1Ev>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <_ZN6MG996RC1Ev>:

public:

	// --- Constructor

	MG996R() = default;
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af02      	add	r7, sp, #8
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3324      	adds	r3, #36	@ 0x24
 8002552:	4619      	mov	r1, r3
 8002554:	4610      	mov	r0, r2
 8002556:	f7ff fe48 	bl	80021ea <_ZN3I2C5SlaveC1ERNS_11RegisterMapE>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	741a      	strb	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3324      	adds	r3, #36	@ 0x24
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fde7 	bl	8002138 <_ZN3I2C11RegisterMapC1Ev>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f603 0028 	addw	r0, r3, #2088	@ 0x828
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3324      	adds	r3, #36	@ 0x24
 8002574:	461a      	mov	r2, r3
 8002576:	2100      	movs	r1, #0
 8002578:	f000 f9d0 	bl	800291c <_ZN3I2C15VirtualRegisterIfEC1EhRNS_11RegisterMapE>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f603 0034 	addw	r0, r3, #2100	@ 0x834
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3324      	adds	r3, #36	@ 0x24
 8002586:	461a      	mov	r2, r3
 8002588:	2101      	movs	r1, #1
 800258a:	f000 f9c7 	bl	800291c <_ZN3I2C15VirtualRegisterIfEC1EhRNS_11RegisterMapE>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f503 6004 	add.w	r0, r3, #2112	@ 0x840
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3324      	adds	r3, #36	@ 0x24
 8002598:	461a      	mov	r2, r3
 800259a:	2102      	movs	r1, #2
 800259c:	f000 f9be 	bl	800291c <_ZN3I2C15VirtualRegisterIfEC1EhRNS_11RegisterMapE>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f603 004c 	addw	r0, r3, #2124	@ 0x84c
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3324      	adds	r3, #36	@ 0x24
 80025aa:	461a      	mov	r2, r3
 80025ac:	2103      	movs	r1, #3
 80025ae:	f000 f9b5 	bl	800291c <_ZN3I2C15VirtualRegisterIfEC1EhRNS_11RegisterMapE>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f603 0058 	addw	r0, r3, #2136	@ 0x858
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3324      	adds	r3, #36	@ 0x24
 80025bc:	461a      	mov	r2, r3
 80025be:	2104      	movs	r1, #4
 80025c0:	f000 f9ac 	bl	800291c <_ZN3I2C15VirtualRegisterIfEC1EhRNS_11RegisterMapE>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f603 0064 	addw	r0, r3, #2148	@ 0x864
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3324      	adds	r3, #36	@ 0x24
 80025ce:	461a      	mov	r2, r3
 80025d0:	2120      	movs	r1, #32
 80025d2:	f000 f9bf 	bl	8002954 <_ZN3I2C15VirtualRegisterItEC1EhRNS_11RegisterMapE>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f503 6007 	add.w	r0, r3, #2160	@ 0x870
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3324      	adds	r3, #36	@ 0x24
 80025e0:	461a      	mov	r2, r3
 80025e2:	2121      	movs	r1, #33	@ 0x21
 80025e4:	f000 f9b6 	bl	8002954 <_ZN3I2C15VirtualRegisterItEC1EhRNS_11RegisterMapE>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f603 007c 	addw	r0, r3, #2172	@ 0x87c
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3324      	adds	r3, #36	@ 0x24
 80025f2:	461a      	mov	r2, r3
 80025f4:	2122      	movs	r1, #34	@ 0x22
 80025f6:	f000 f9ad 	bl	8002954 <_ZN3I2C15VirtualRegisterItEC1EhRNS_11RegisterMapE>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f603 0088 	addw	r0, r3, #2184	@ 0x888
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3324      	adds	r3, #36	@ 0x24
 8002604:	461a      	mov	r2, r3
 8002606:	2123      	movs	r1, #35	@ 0x23
 8002608:	f000 f9a4 	bl	8002954 <_ZN3I2C15VirtualRegisterItEC1EhRNS_11RegisterMapE>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f603 0094 	addw	r0, r3, #2196	@ 0x894
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3324      	adds	r3, #36	@ 0x24
 8002616:	461a      	mov	r2, r3
 8002618:	2124      	movs	r1, #36	@ 0x24
 800261a:	f000 f99b 	bl	8002954 <_ZN3I2C15VirtualRegisterItEC1EhRNS_11RegisterMapE>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f503 600a 	add.w	r0, r3, #2208	@ 0x8a0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3324      	adds	r3, #36	@ 0x24
 8002628:	461a      	mov	r2, r3
 800262a:	2125      	movs	r1, #37	@ 0x25
 800262c:	f000 f992 	bl	8002954 <_ZN3I2C15VirtualRegisterItEC1EhRNS_11RegisterMapE>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f603 00ac 	addw	r0, r3, #2220	@ 0x8ac
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3324      	adds	r3, #36	@ 0x24
 800263a:	461a      	mov	r2, r3
 800263c:	2140      	movs	r1, #64	@ 0x40
 800263e:	f000 f989 	bl	8002954 <_ZN3I2C15VirtualRegisterItEC1EhRNS_11RegisterMapE>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f603 00b8 	addw	r0, r3, #2232	@ 0x8b8
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3324      	adds	r3, #36	@ 0x24
 800264c:	461a      	mov	r2, r3
 800264e:	2141      	movs	r1, #65	@ 0x41
 8002650:	f000 f980 	bl	8002954 <_ZN3I2C15VirtualRegisterItEC1EhRNS_11RegisterMapE>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f603 00c4 	addw	r0, r3, #2244	@ 0x8c4
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3324      	adds	r3, #36	@ 0x24
 800265e:	461a      	mov	r2, r3
 8002660:	2142      	movs	r1, #66	@ 0x42
 8002662:	f000 f977 	bl	8002954 <_ZN3I2C15VirtualRegisterItEC1EhRNS_11RegisterMapE>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f503 600d 	add.w	r0, r3, #2256	@ 0x8d0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3324      	adds	r3, #36	@ 0x24
 8002670:	461a      	mov	r2, r3
 8002672:	21f0      	movs	r1, #240	@ 0xf0
 8002674:	f000 f98a 	bl	800298c <_ZN3I2C15VirtualRegisterIhEC1EhRNS_11RegisterMapE>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f603 00dc 	addw	r0, r3, #2268	@ 0x8dc
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3324      	adds	r3, #36	@ 0x24
 8002682:	461a      	mov	r2, r3
 8002684:	21ff      	movs	r1, #255	@ 0xff
 8002686:	f000 f981 	bl	800298c <_ZN3I2C15VirtualRegisterIhEC1EhRNS_11RegisterMapE>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f603 03e8 	addw	r3, r3, #2280	@ 0x8e8
 8002690:	2201      	movs	r2, #1
 8002692:	2136      	movs	r1, #54	@ 0x36
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fe75 	bl	8002384 <_ZN6AS5600C1Ehm>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f603 00fc 	addw	r0, r3, #2300	@ 0x8fc
 80026a0:	4b0a      	ldr	r3, [pc, #40]	@ (80026cc <_ZN6MG996RC1Ev+0x188>)
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	4b0a      	ldr	r3, [pc, #40]	@ (80026d0 <_ZN6MG996RC1Ev+0x18c>)
 80026a6:	4a0b      	ldr	r2, [pc, #44]	@ (80026d4 <_ZN6MG996RC1Ev+0x190>)
 80026a8:	490b      	ldr	r1, [pc, #44]	@ (80026d8 <_ZN6MG996RC1Ev+0x194>)
 80026aa:	f7ff fa9f 	bl	8001bec <_ZN15SWPIDControllerC1Effff>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f603 1024 	addw	r0, r3, #2340	@ 0x924
 80026b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026b8:	2204      	movs	r2, #4
 80026ba:	2100      	movs	r1, #0
 80026bc:	f7ff fe7c 	bl	80023b8 <_ZN7DRV8870C1Emmt>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	3dcccccd 	.word	0x3dcccccd
 80026d0:	3f666666 	.word	0x3f666666
 80026d4:	41200000 	.word	0x41200000
 80026d8:	3a83126f 	.word	0x3a83126f

080026dc <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/// Flag setting for 1kHz frequency control loop handling
extern "C" void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
    if (htim -> Instance == TIM3)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a05      	ldr	r2, [pc, #20]	@ (8002700 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d102      	bne.n	80026f4 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
    	control_loop_flag = true;
 80026ee:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
    }
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40000400 	.word	0x40000400
 8002704:	200001d8 	.word	0x200001d8

08002708 <HAL_I2C_ListenCpltCallback>:


extern "C" {
	void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
	{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
		if (hi2c -> Instance == I2C1) Motor.slave.onListenComplete();
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a04      	ldr	r2, [pc, #16]	@ (8002728 <HAL_I2C_ListenCpltCallback+0x20>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d102      	bne.n	8002720 <HAL_I2C_ListenCpltCallback+0x18>
 800271a:	4804      	ldr	r0, [pc, #16]	@ (800272c <HAL_I2C_ListenCpltCallback+0x24>)
 800271c:	f7ff fdf7 	bl	800230e <_ZN3I2C5Slave16onListenCompleteEv>
	}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40005400 	.word	0x40005400
 800272c:	200001dc 	.word	0x200001dc

08002730 <HAL_I2C_AddrCallback>:

	void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
	{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	70fb      	strb	r3, [r7, #3]
 800273c:	4613      	mov	r3, r2
 800273e:	803b      	strh	r3, [r7, #0]
		if (hi2c -> Instance == I2C1) Motor.slave.onAddrMatch(TransferDirection);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a05      	ldr	r2, [pc, #20]	@ (800275c <HAL_I2C_AddrCallback+0x2c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d104      	bne.n	8002754 <HAL_I2C_AddrCallback+0x24>
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	4619      	mov	r1, r3
 800274e:	4804      	ldr	r0, [pc, #16]	@ (8002760 <HAL_I2C_AddrCallback+0x30>)
 8002750:	f7ff fd62 	bl	8002218 <_ZN3I2C5Slave11onAddrMatchEh>
	}
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40005400 	.word	0x40005400
 8002760:	200001dc 	.word	0x200001dc

08002764 <HAL_I2C_SlaveTxCpltCallback>:

	void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
	{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
		if (hi2c -> Instance == I2C1) Motor.slave.onTransmitComplete();
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a04      	ldr	r2, [pc, #16]	@ (8002784 <HAL_I2C_SlaveTxCpltCallback+0x20>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d102      	bne.n	800277c <HAL_I2C_SlaveTxCpltCallback+0x18>
 8002776:	4804      	ldr	r0, [pc, #16]	@ (8002788 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 8002778:	f7ff fdbd 	bl	80022f6 <_ZN3I2C5Slave18onTransmitCompleteEv>
	}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40005400 	.word	0x40005400
 8002788:	200001dc 	.word	0x200001dc

0800278c <HAL_I2C_SlaveRxCpltCallback>:

	void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
	{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
		if (hi2c -> Instance == I2C1) Motor.slave.onReceiveComplete();
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a04      	ldr	r2, [pc, #16]	@ (80027ac <HAL_I2C_SlaveRxCpltCallback+0x20>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d102      	bne.n	80027a4 <HAL_I2C_SlaveRxCpltCallback+0x18>
 800279e:	4804      	ldr	r0, [pc, #16]	@ (80027b0 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 80027a0:	f7ff fd76 	bl	8002290 <_ZN3I2C5Slave17onReceiveCompleteEv>
	}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40005400 	.word	0x40005400
 80027b0:	200001dc 	.word	0x200001dc

080027b4 <HAL_I2C_ErrorCallback>:

	void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
	{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
		if (hi2c -> Instance == I2C1) Motor.slave.onError();
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a04      	ldr	r2, [pc, #16]	@ (80027d4 <HAL_I2C_ErrorCallback+0x20>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d102      	bne.n	80027cc <HAL_I2C_ErrorCallback+0x18>
 80027c6:	4804      	ldr	r0, [pc, #16]	@ (80027d8 <HAL_I2C_ErrorCallback+0x24>)
 80027c8:	f7ff fdae 	bl	8002328 <_ZN3I2C5Slave7onErrorEv>
	}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40005400 	.word	0x40005400
 80027d8:	200001dc 	.word	0x200001dc

080027dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027e2:	f000 fbc7 	bl	8002f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027e6:	f000 f82d 	bl	8002844 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027ea:	f7ff fa8f 	bl	8001d0c <MX_GPIO_Init>
  MX_I2C1_Init();
 80027ee:	f7ff faaf 	bl	8001d50 <MX_I2C1_Init>
  MX_ADC1_Init();
 80027f2:	f7ff f88f 	bl	8001914 <MX_ADC1_Init>
  MX_I2C2_Init();
 80027f6:	f7ff fad9 	bl	8001dac <MX_I2C2_Init>
  MX_TIM2_Init();
 80027fa:	f000 fa5f 	bl	8002cbc <MX_TIM2_Init>
  MX_TIM3_Init();
 80027fe:	f000 fadd 	bl	8002dbc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  Motor.init(&hi2c1, &hi2c2, &htim3, &htim2);
 8002802:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <main+0x50>)
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <main+0x54>)
 8002808:	4a0a      	ldr	r2, [pc, #40]	@ (8002834 <main+0x58>)
 800280a:	490b      	ldr	r1, [pc, #44]	@ (8002838 <main+0x5c>)
 800280c:	480b      	ldr	r0, [pc, #44]	@ (800283c <main+0x60>)
 800280e:	f7fe ff25 	bl	800165c <_ZN6MG996R4initEP17I2C_HandleTypeDefS1_P17TIM_HandleTypeDefS3_>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (control_loop_flag) {
 8002812:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <main+0x64>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0fa      	beq.n	8002812 <main+0x36>
		// Flag reset
		control_loop_flag = false;
 800281c:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <main+0x64>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]

		// Control loop
		Motor.controlLoop();
 8002822:	4806      	ldr	r0, [pc, #24]	@ (800283c <main+0x60>)
 8002824:	f7fe ff86 	bl	8001734 <_ZN6MG996R11controlLoopEv>
	if (control_loop_flag) {
 8002828:	e7f3      	b.n	8002812 <main+0x36>
 800282a:	bf00      	nop
 800282c:	20000b1c 	.word	0x20000b1c
 8002830:	20000b64 	.word	0x20000b64
 8002834:	200000fc 	.word	0x200000fc
 8002838:	200000a8 	.word	0x200000a8
 800283c:	200001dc 	.word	0x200001dc
 8002840:	200001d8 	.word	0x200001d8

08002844 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b094      	sub	sp, #80	@ 0x50
 8002848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800284a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800284e:	2228      	movs	r2, #40	@ 0x28
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f005 ff4e 	bl	80086f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002874:	2302      	movs	r3, #2
 8002876:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002878:	2301      	movs	r3, #1
 800287a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800287c:	2310      	movs	r3, #16
 800287e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002880:	2302      	movs	r3, #2
 8002882:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002884:	2300      	movs	r3, #0
 8002886:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002888:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800288c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800288e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002892:	4618      	mov	r0, r3
 8002894:	f004 fa3c 	bl	8006d10 <HAL_RCC_OscConfig>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	bf14      	ite	ne
 800289e:	2301      	movne	r3, #1
 80028a0:	2300      	moveq	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 80028a8:	f000 f832 	bl	8002910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ac:	230f      	movs	r3, #15
 80028ae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028b0:	2302      	movs	r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	2102      	movs	r1, #2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f004 fca3 	bl	8007214 <HAL_RCC_ClockConfig>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80028de:	f000 f817 	bl	8002910 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028e2:	2302      	movs	r3, #2
 80028e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80028e6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80028ea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 fe0a 	bl	8007508 <HAL_RCCEx_PeriphCLKConfig>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf14      	ite	ne
 80028fa:	2301      	movne	r3, #1
 80028fc:	2300      	moveq	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8002904:	f000 f804 	bl	8002910 <Error_Handler>
  }
}
 8002908:	bf00      	nop
 800290a:	3750      	adds	r7, #80	@ 0x50
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002914:	b672      	cpsid	i
}
 8002916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <Error_Handler+0x8>

0800291c <_ZN3I2C15VirtualRegisterIfEC1EhRNS_11RegisterMapE>:
    	VirtualRegister(uint8_t addr, RegisterMap& map) : IVirtualRegister(addr, sizeof(T)) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	460b      	mov	r3, r1
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	72fb      	strb	r3, [r7, #11]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	7af9      	ldrb	r1, [r7, #11]
 800292e:	2204      	movs	r2, #4
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fbc1 	bl	80020b8 <_ZN3I2C16IVirtualRegisterC1Ehh>
 8002936:	4a06      	ldr	r2, [pc, #24]	@ (8002950 <_ZN3I2C15VirtualRegisterIfEC1EhRNS_11RegisterMapE+0x34>)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	601a      	str	r2, [r3, #0]
    		map.append(*this);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fc07 	bl	8002154 <_ZN3I2C11RegisterMap6appendERNS_16IVirtualRegisterE>
    	}
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	080088f0 	.word	0x080088f0

08002954 <_ZN3I2C15VirtualRegisterItEC1EhRNS_11RegisterMapE>:
    	VirtualRegister(uint8_t addr, RegisterMap& map) : IVirtualRegister(addr, sizeof(T)) {
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	460b      	mov	r3, r1
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	72fb      	strb	r3, [r7, #11]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	7af9      	ldrb	r1, [r7, #11]
 8002966:	2202      	movs	r2, #2
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fba5 	bl	80020b8 <_ZN3I2C16IVirtualRegisterC1Ehh>
 800296e:	4a06      	ldr	r2, [pc, #24]	@ (8002988 <_ZN3I2C15VirtualRegisterItEC1EhRNS_11RegisterMapE+0x34>)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	601a      	str	r2, [r3, #0]
    		map.append(*this);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4619      	mov	r1, r3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff fbeb 	bl	8002154 <_ZN3I2C11RegisterMap6appendERNS_16IVirtualRegisterE>
    	}
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	080088e0 	.word	0x080088e0

0800298c <_ZN3I2C15VirtualRegisterIhEC1EhRNS_11RegisterMapE>:
    	VirtualRegister(uint8_t addr, RegisterMap& map) : IVirtualRegister(addr, sizeof(T)) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	460b      	mov	r3, r1
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	72fb      	strb	r3, [r7, #11]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	7af9      	ldrb	r1, [r7, #11]
 800299e:	2201      	movs	r2, #1
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fb89 	bl	80020b8 <_ZN3I2C16IVirtualRegisterC1Ehh>
 80029a6:	4a06      	ldr	r2, [pc, #24]	@ (80029c0 <_ZN3I2C15VirtualRegisterIhEC1EhRNS_11RegisterMapE+0x34>)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	601a      	str	r2, [r3, #0]
    		map.append(*this);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff fbcf 	bl	8002154 <_ZN3I2C11RegisterMap6appendERNS_16IVirtualRegisterE>
    	}
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	080088d0 	.word	0x080088d0

080029c4 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
MG996R Motor;
 80029c8:	4802      	ldr	r0, [pc, #8]	@ (80029d4 <_Z41__static_initialization_and_destruction_0v+0x10>)
 80029ca:	f7ff fdbb 	bl	8002544 <_ZN6MG996RC1Ev>
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200001dc 	.word	0x200001dc

080029d8 <_ZN6MG996RD1Ev>:
class MG996R {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f603 03e8 	addw	r3, r3, #2280	@ 0x8e8
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fd9e 	bl	8002528 <_ZN6AS5600D1Ev>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f603 03dc 	addw	r3, r3, #2268	@ 0x8dc
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fd76 	bl	80024e4 <_ZN3I2C15VirtualRegisterIhED1Ev>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f503 630d 	add.w	r3, r3, #2256	@ 0x8d0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fd70 	bl	80024e4 <_ZN3I2C15VirtualRegisterIhED1Ev>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fd48 	bl	80024a0 <_ZN3I2C15VirtualRegisterItED1Ev>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f603 03b8 	addw	r3, r3, #2232	@ 0x8b8
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fd42 	bl	80024a0 <_ZN3I2C15VirtualRegisterItED1Ev>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f603 03ac 	addw	r3, r3, #2220	@ 0x8ac
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fd3c 	bl	80024a0 <_ZN3I2C15VirtualRegisterItED1Ev>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fd36 	bl	80024a0 <_ZN3I2C15VirtualRegisterItED1Ev>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f603 0394 	addw	r3, r3, #2196	@ 0x894
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fd30 	bl	80024a0 <_ZN3I2C15VirtualRegisterItED1Ev>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fd2a 	bl	80024a0 <_ZN3I2C15VirtualRegisterItED1Ev>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f603 037c 	addw	r3, r3, #2172	@ 0x87c
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fd24 	bl	80024a0 <_ZN3I2C15VirtualRegisterItED1Ev>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f503 6307 	add.w	r3, r3, #2160	@ 0x870
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fd1e 	bl	80024a0 <_ZN3I2C15VirtualRegisterItED1Ev>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f603 0364 	addw	r3, r3, #2148	@ 0x864
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fd18 	bl	80024a0 <_ZN3I2C15VirtualRegisterItED1Ev>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f603 0358 	addw	r3, r3, #2136	@ 0x858
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fcf0 	bl	800245c <_ZN3I2C15VirtualRegisterIfED1Ev>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f603 034c 	addw	r3, r3, #2124	@ 0x84c
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fcea 	bl	800245c <_ZN3I2C15VirtualRegisterIfED1Ev>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f503 6304 	add.w	r3, r3, #2112	@ 0x840
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fce4 	bl	800245c <_ZN3I2C15VirtualRegisterIfED1Ev>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f603 0334 	addw	r3, r3, #2100	@ 0x834
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fcde 	bl	800245c <_ZN3I2C15VirtualRegisterIfED1Ev>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f603 0328 	addw	r3, r3, #2088	@ 0x828
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fcd8 	bl	800245c <_ZN3I2C15VirtualRegisterIfED1Ev>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <_Z41__static_initialization_and_destruction_1v>:
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
MG996R Motor;
 8002abc:	4802      	ldr	r0, [pc, #8]	@ (8002ac8 <_Z41__static_initialization_and_destruction_1v+0x10>)
 8002abe:	f7ff ff8b 	bl	80029d8 <_ZN6MG996RD1Ev>
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200001dc 	.word	0x200001dc

08002acc <_GLOBAL__sub_I_control_loop_flag>:
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	f7ff ff78 	bl	80029c4 <_Z41__static_initialization_and_destruction_0v>
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <_GLOBAL__sub_D_control_loop_flag>:
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	f7ff ffed 	bl	8002ab8 <_Z41__static_initialization_and_destruction_1v>
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ae6:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <HAL_MspInit+0x5c>)
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	4a14      	ldr	r2, [pc, #80]	@ (8002b3c <HAL_MspInit+0x5c>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6193      	str	r3, [r2, #24]
 8002af2:	4b12      	ldr	r3, [pc, #72]	@ (8002b3c <HAL_MspInit+0x5c>)
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	4b0f      	ldr	r3, [pc, #60]	@ (8002b3c <HAL_MspInit+0x5c>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	4a0e      	ldr	r2, [pc, #56]	@ (8002b3c <HAL_MspInit+0x5c>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	61d3      	str	r3, [r2, #28]
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b3c <HAL_MspInit+0x5c>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b16:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <HAL_MspInit+0x60>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	4a04      	ldr	r2, [pc, #16]	@ (8002b40 <HAL_MspInit+0x60>)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40010000 	.word	0x40010000

08002b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <NMI_Handler+0x4>

08002b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b50:	bf00      	nop
 8002b52:	e7fd      	b.n	8002b50 <HardFault_Handler+0x4>

08002b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <MemManage_Handler+0x4>

08002b5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b60:	bf00      	nop
 8002b62:	e7fd      	b.n	8002b60 <BusFault_Handler+0x4>

08002b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b68:	bf00      	nop
 8002b6a:	e7fd      	b.n	8002b68 <UsageFault_Handler+0x4>

08002b6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b94:	f000 fa34 	bl	8003000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002ba0:	4802      	ldr	r0, [pc, #8]	@ (8002bac <DMA1_Channel6_IRQHandler+0x10>)
 8002ba2:	f000 fec9 	bl	8003938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000194 	.word	0x20000194

08002bb0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002bb4:	4802      	ldr	r0, [pc, #8]	@ (8002bc0 <DMA1_Channel7_IRQHandler+0x10>)
 8002bb6:	f000 febf 	bl	8003938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000150 	.word	0x20000150

08002bc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bc8:	4802      	ldr	r0, [pc, #8]	@ (8002bd4 <TIM3_IRQHandler+0x10>)
 8002bca:	f004 feef 	bl	80079ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000b64 	.word	0x20000b64

08002bd8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002bdc:	4802      	ldr	r0, [pc, #8]	@ (8002be8 <I2C1_EV_IRQHandler+0x10>)
 8002bde:	f002 f80e 	bl	8004bfe <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200000a8 	.word	0x200000a8

08002bec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002bf0:	4802      	ldr	r0, [pc, #8]	@ (8002bfc <I2C1_ER_IRQHandler+0x10>)
 8002bf2:	f002 f975 	bl	8004ee0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200000a8 	.word	0x200000a8

08002c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return 1;
 8002c04:	2301      	movs	r3, #1
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <_kill>:

int _kill(int pid, int sig)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c18:	f005 fdc8 	bl	80087ac <__errno>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2216      	movs	r2, #22
 8002c20:	601a      	str	r2, [r3, #0]
  return -1;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <_exit>:

void _exit (int status)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c36:	f04f 31ff 	mov.w	r1, #4294967295
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff ffe7 	bl	8002c0e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c40:	bf00      	nop
 8002c42:	e7fd      	b.n	8002c40 <_exit+0x12>

08002c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ca0 <_sbrk+0x5c>)
 8002c4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <_sbrk+0x60>)
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c58:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c60:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <_sbrk+0x64>)
 8002c62:	4a12      	ldr	r2, [pc, #72]	@ (8002cac <_sbrk+0x68>)
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c66:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <_sbrk+0x64>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d207      	bcs.n	8002c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c74:	f005 fd9a 	bl	80087ac <__errno>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c82:	e009      	b.n	8002c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c84:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <_sbrk+0x64>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ca8 <_sbrk+0x64>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	4a05      	ldr	r2, [pc, #20]	@ (8002ca8 <_sbrk+0x64>)
 8002c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c96:	68fb      	ldr	r3, [r7, #12]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20005000 	.word	0x20005000
 8002ca4:	00000400 	.word	0x00000400
 8002ca8:	20000b18 	.word	0x20000b18
 8002cac:	20000d00 	.word	0x20000d00

08002cb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08e      	sub	sp, #56	@ 0x38
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd0:	f107 0320 	add.w	r3, r7, #32
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
 8002ce8:	615a      	str	r2, [r3, #20]
 8002cea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cec:	4b32      	ldr	r3, [pc, #200]	@ (8002db8 <MX_TIM2_Init+0xfc>)
 8002cee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002cf4:	4b30      	ldr	r3, [pc, #192]	@ (8002db8 <MX_TIM2_Init+0xfc>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002db8 <MX_TIM2_Init+0xfc>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1023;
 8002d00:	4b2d      	ldr	r3, [pc, #180]	@ (8002db8 <MX_TIM2_Init+0xfc>)
 8002d02:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d08:	4b2b      	ldr	r3, [pc, #172]	@ (8002db8 <MX_TIM2_Init+0xfc>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002db8 <MX_TIM2_Init+0xfc>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d14:	4828      	ldr	r0, [pc, #160]	@ (8002db8 <MX_TIM2_Init+0xfc>)
 8002d16:	f004 fcad 	bl	8007674 <HAL_TIM_Base_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002d20:	f7ff fdf6 	bl	8002910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4821      	ldr	r0, [pc, #132]	@ (8002db8 <MX_TIM2_Init+0xfc>)
 8002d32:	f004 ffed 	bl	8007d10 <HAL_TIM_ConfigClockSource>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002d3c:	f7ff fde8 	bl	8002910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d40:	481d      	ldr	r0, [pc, #116]	@ (8002db8 <MX_TIM2_Init+0xfc>)
 8002d42:	f004 fd39 	bl	80077b8 <HAL_TIM_PWM_Init>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002d4c:	f7ff fde0 	bl	8002910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d58:	f107 0320 	add.w	r3, r7, #32
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4816      	ldr	r0, [pc, #88]	@ (8002db8 <MX_TIM2_Init+0xfc>)
 8002d60:	f005 fb72 	bl	8008448 <HAL_TIMEx_MasterConfigSynchronization>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002d6a:	f7ff fdd1 	bl	8002910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d6e:	2360      	movs	r3, #96	@ 0x60
 8002d70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	2200      	movs	r2, #0
 8002d82:	4619      	mov	r1, r3
 8002d84:	480c      	ldr	r0, [pc, #48]	@ (8002db8 <MX_TIM2_Init+0xfc>)
 8002d86:	f004 ff01 	bl	8007b8c <HAL_TIM_PWM_ConfigChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002d90:	f7ff fdbe 	bl	8002910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	2204      	movs	r2, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4807      	ldr	r0, [pc, #28]	@ (8002db8 <MX_TIM2_Init+0xfc>)
 8002d9c:	f004 fef6 	bl	8007b8c <HAL_TIM_PWM_ConfigChannel>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002da6:	f7ff fdb3 	bl	8002910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002daa:	4803      	ldr	r0, [pc, #12]	@ (8002db8 <MX_TIM2_Init+0xfc>)
 8002dac:	f000 f88c 	bl	8002ec8 <HAL_TIM_MspPostInit>

}
 8002db0:	bf00      	nop
 8002db2:	3738      	adds	r7, #56	@ 0x38
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000b1c 	.word	0x20000b1c

08002dbc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dc2:	f107 0308 	add.w	r3, r7, #8
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd0:	463b      	mov	r3, r7
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <MX_TIM3_Init+0x94>)
 8002dda:	4a1e      	ldr	r2, [pc, #120]	@ (8002e54 <MX_TIM3_Init+0x98>)
 8002ddc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8002dde:	4b1c      	ldr	r3, [pc, #112]	@ (8002e50 <MX_TIM3_Init+0x94>)
 8002de0:	223f      	movs	r2, #63	@ 0x3f
 8002de2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e50 <MX_TIM3_Init+0x94>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002dea:	4b19      	ldr	r3, [pc, #100]	@ (8002e50 <MX_TIM3_Init+0x94>)
 8002dec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002df0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df2:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <MX_TIM3_Init+0x94>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002df8:	4b15      	ldr	r3, [pc, #84]	@ (8002e50 <MX_TIM3_Init+0x94>)
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002dfe:	4814      	ldr	r0, [pc, #80]	@ (8002e50 <MX_TIM3_Init+0x94>)
 8002e00:	f004 fc38 	bl	8007674 <HAL_TIM_Base_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002e0a:	f7ff fd81 	bl	8002910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e14:	f107 0308 	add.w	r3, r7, #8
 8002e18:	4619      	mov	r1, r3
 8002e1a:	480d      	ldr	r0, [pc, #52]	@ (8002e50 <MX_TIM3_Init+0x94>)
 8002e1c:	f004 ff78 	bl	8007d10 <HAL_TIM_ConfigClockSource>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002e26:	f7ff fd73 	bl	8002910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e32:	463b      	mov	r3, r7
 8002e34:	4619      	mov	r1, r3
 8002e36:	4806      	ldr	r0, [pc, #24]	@ (8002e50 <MX_TIM3_Init+0x94>)
 8002e38:	f005 fb06 	bl	8008448 <HAL_TIMEx_MasterConfigSynchronization>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002e42:	f7ff fd65 	bl	8002910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000b64 	.word	0x20000b64
 8002e54:	40000400 	.word	0x40000400

08002e58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e68:	d10c      	bne.n	8002e84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e6a:	4b15      	ldr	r3, [pc, #84]	@ (8002ec0 <HAL_TIM_Base_MspInit+0x68>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4a14      	ldr	r2, [pc, #80]	@ (8002ec0 <HAL_TIM_Base_MspInit+0x68>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	61d3      	str	r3, [r2, #28]
 8002e76:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_TIM_Base_MspInit+0x68>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e82:	e018      	b.n	8002eb6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0e      	ldr	r2, [pc, #56]	@ (8002ec4 <HAL_TIM_Base_MspInit+0x6c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d113      	bne.n	8002eb6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <HAL_TIM_Base_MspInit+0x68>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec0 <HAL_TIM_Base_MspInit+0x68>)
 8002e94:	f043 0302 	orr.w	r3, r3, #2
 8002e98:	61d3      	str	r3, [r2, #28]
 8002e9a:	4b09      	ldr	r3, [pc, #36]	@ (8002ec0 <HAL_TIM_Base_MspInit+0x68>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	201d      	movs	r0, #29
 8002eac:	f000 fbd1 	bl	8003652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002eb0:	201d      	movs	r0, #29
 8002eb2:	f000 fbea 	bl	800368a <HAL_NVIC_EnableIRQ>
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40000400 	.word	0x40000400

08002ec8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0310 	add.w	r3, r7, #16
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee6:	d117      	bne.n	8002f18 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <HAL_TIM_MspPostInit+0x58>)
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	4a0c      	ldr	r2, [pc, #48]	@ (8002f20 <HAL_TIM_MspPostInit+0x58>)
 8002eee:	f043 0304 	orr.w	r3, r3, #4
 8002ef2:	6193      	str	r3, [r2, #24]
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <HAL_TIM_MspPostInit+0x58>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f00:	2303      	movs	r3, #3
 8002f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f04:	2302      	movs	r3, #2
 8002f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	f107 0310 	add.w	r3, r7, #16
 8002f10:	4619      	mov	r1, r3
 8002f12:	4804      	ldr	r0, [pc, #16]	@ (8002f24 <HAL_TIM_MspPostInit+0x5c>)
 8002f14:	f000 fe24 	bl	8003b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002f18:	bf00      	nop
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40010800 	.word	0x40010800

08002f28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f28:	f7ff fec2 	bl	8002cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f2c:	480b      	ldr	r0, [pc, #44]	@ (8002f5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002f2e:	490c      	ldr	r1, [pc, #48]	@ (8002f60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002f30:	4a0c      	ldr	r2, [pc, #48]	@ (8002f64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f34:	e002      	b.n	8002f3c <LoopCopyDataInit>

08002f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3a:	3304      	adds	r3, #4

08002f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f40:	d3f9      	bcc.n	8002f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f42:	4a09      	ldr	r2, [pc, #36]	@ (8002f68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002f44:	4c09      	ldr	r4, [pc, #36]	@ (8002f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f48:	e001      	b.n	8002f4e <LoopFillZerobss>

08002f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f4c:	3204      	adds	r2, #4

08002f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f50:	d3fb      	bcc.n	8002f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f52:	f005 fc31 	bl	80087b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f56:	f7ff fc41 	bl	80027dc <main>
  bx lr
 8002f5a:	4770      	bx	lr
  ldr r0, =_sdata
 8002f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f60:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002f64:	08008944 	.word	0x08008944
  ldr r2, =_sbss
 8002f68:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002f6c:	20000cfc 	.word	0x20000cfc

08002f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f70:	e7fe      	b.n	8002f70 <ADC1_2_IRQHandler>
	...

08002f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f78:	4b08      	ldr	r3, [pc, #32]	@ (8002f9c <HAL_Init+0x28>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a07      	ldr	r2, [pc, #28]	@ (8002f9c <HAL_Init+0x28>)
 8002f7e:	f043 0310 	orr.w	r3, r3, #16
 8002f82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f84:	2003      	movs	r0, #3
 8002f86:	f000 fb59 	bl	800363c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f8a:	200f      	movs	r0, #15
 8002f8c:	f000 f808 	bl	8002fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f90:	f7ff fda6 	bl	8002ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40022000 	.word	0x40022000

08002fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fa8:	4b12      	ldr	r3, [pc, #72]	@ (8002ff4 <HAL_InitTick+0x54>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b12      	ldr	r3, [pc, #72]	@ (8002ff8 <HAL_InitTick+0x58>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fb7f 	bl	80036c2 <HAL_SYSTICK_Config>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00e      	b.n	8002fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b0f      	cmp	r3, #15
 8002fd2:	d80a      	bhi.n	8002fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	f000 fb39 	bl	8003652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fe0:	4a06      	ldr	r2, [pc, #24]	@ (8002ffc <HAL_InitTick+0x5c>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e000      	b.n	8002fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	20000008 	.word	0x20000008
 8002ffc:	20000004 	.word	0x20000004

08003000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003004:	4b05      	ldr	r3, [pc, #20]	@ (800301c <HAL_IncTick+0x1c>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <HAL_IncTick+0x20>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4413      	add	r3, r2
 8003010:	4a03      	ldr	r2, [pc, #12]	@ (8003020 <HAL_IncTick+0x20>)
 8003012:	6013      	str	r3, [r2, #0]
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	20000008 	.word	0x20000008
 8003020:	20000bac 	.word	0x20000bac

08003024 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return uwTick;
 8003028:	4b02      	ldr	r3, [pc, #8]	@ (8003034 <HAL_GetTick+0x10>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	20000bac 	.word	0x20000bac

08003038 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e0be      	b.n	80031d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fe fc8a 	bl	8001990 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f9ab 	bl	80033d8 <ADC_ConversionStop_Disable>
 8003082:	4603      	mov	r3, r0
 8003084:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 8099 	bne.w	80031c6 <HAL_ADC_Init+0x18e>
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 8095 	bne.w	80031c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030a4:	f023 0302 	bic.w	r3, r3, #2
 80030a8:	f043 0202 	orr.w	r2, r3, #2
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7b1b      	ldrb	r3, [r3, #12]
 80030be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030d0:	d003      	beq.n	80030da <HAL_ADC_Init+0xa2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d102      	bne.n	80030e0 <HAL_ADC_Init+0xa8>
 80030da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030de:	e000      	b.n	80030e2 <HAL_ADC_Init+0xaa>
 80030e0:	2300      	movs	r3, #0
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7d1b      	ldrb	r3, [r3, #20]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d119      	bne.n	8003124 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7b1b      	ldrb	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	035a      	lsls	r2, r3, #13
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	e00b      	b.n	8003124 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	4b28      	ldr	r3, [pc, #160]	@ (80031e0 <HAL_ADC_Init+0x1a8>)
 8003140:	4013      	ands	r3, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	430b      	orrs	r3, r1
 800314a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003154:	d003      	beq.n	800315e <HAL_ADC_Init+0x126>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d104      	bne.n	8003168 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	3b01      	subs	r3, #1
 8003164:	051b      	lsls	r3, r3, #20
 8003166:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	430a      	orrs	r2, r1
 800317a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	4b18      	ldr	r3, [pc, #96]	@ (80031e4 <HAL_ADC_Init+0x1ac>)
 8003184:	4013      	ands	r3, r2
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	d10b      	bne.n	80031a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003196:	f023 0303 	bic.w	r3, r3, #3
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031a2:	e018      	b.n	80031d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a8:	f023 0312 	bic.w	r3, r3, #18
 80031ac:	f043 0210 	orr.w	r2, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031c4:	e007      	b.n	80031d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ca:	f043 0210 	orr.w	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	ffe1f7fd 	.word	0xffe1f7fd
 80031e4:	ff1f0efe 	.word	0xff1f0efe

080031e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x20>
 8003204:	2302      	movs	r3, #2
 8003206:	e0dc      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x1da>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b06      	cmp	r3, #6
 8003216:	d81c      	bhi.n	8003252 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	3b05      	subs	r3, #5
 800322a:	221f      	movs	r2, #31
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	4019      	ands	r1, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	3b05      	subs	r3, #5
 8003244:	fa00 f203 	lsl.w	r2, r0, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003250:	e03c      	b.n	80032cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d81c      	bhi.n	8003294 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	3b23      	subs	r3, #35	@ 0x23
 800326c:	221f      	movs	r2, #31
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	4019      	ands	r1, r3
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	3b23      	subs	r3, #35	@ 0x23
 8003286:	fa00 f203 	lsl.w	r2, r0, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	631a      	str	r2, [r3, #48]	@ 0x30
 8003292:	e01b      	b.n	80032cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	3b41      	subs	r3, #65	@ 0x41
 80032a6:	221f      	movs	r2, #31
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	4019      	ands	r1, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	3b41      	subs	r3, #65	@ 0x41
 80032c0:	fa00 f203 	lsl.w	r2, r0, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b09      	cmp	r3, #9
 80032d2:	d91c      	bls.n	800330e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68d9      	ldr	r1, [r3, #12]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	3b1e      	subs	r3, #30
 80032e6:	2207      	movs	r2, #7
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	4019      	ands	r1, r3
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	6898      	ldr	r0, [r3, #8]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	3b1e      	subs	r3, #30
 8003300:	fa00 f203 	lsl.w	r2, r0, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	60da      	str	r2, [r3, #12]
 800330c:	e019      	b.n	8003342 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6919      	ldr	r1, [r3, #16]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	2207      	movs	r2, #7
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	4019      	ands	r1, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6898      	ldr	r0, [r3, #8]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	fa00 f203 	lsl.w	r2, r0, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b10      	cmp	r3, #16
 8003348:	d003      	beq.n	8003352 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800334e:	2b11      	cmp	r3, #17
 8003350:	d132      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1d      	ldr	r2, [pc, #116]	@ (80033cc <HAL_ADC_ConfigChannel+0x1e4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d125      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d126      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003378:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b10      	cmp	r3, #16
 8003380:	d11a      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003382:	4b13      	ldr	r3, [pc, #76]	@ (80033d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a13      	ldr	r2, [pc, #76]	@ (80033d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	0c9a      	lsrs	r2, r3, #18
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003398:	e002      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3b01      	subs	r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f9      	bne.n	800339a <HAL_ADC_ConfigChannel+0x1b2>
 80033a6:	e007      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ac:	f043 0220 	orr.w	r2, r3, #32
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	40012400 	.word	0x40012400
 80033d0:	20000000 	.word	0x20000000
 80033d4:	431bde83 	.word	0x431bde83

080033d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d12e      	bne.n	8003450 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0201 	bic.w	r2, r2, #1
 8003400:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003402:	f7ff fe0f 	bl	8003024 <HAL_GetTick>
 8003406:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003408:	e01b      	b.n	8003442 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800340a:	f7ff fe0b 	bl	8003024 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d914      	bls.n	8003442 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b01      	cmp	r3, #1
 8003424:	d10d      	bne.n	8003442 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342a:	f043 0210 	orr.w	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	f043 0201 	orr.w	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e007      	b.n	8003452 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b01      	cmp	r3, #1
 800344e:	d0dc      	beq.n	800340a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800346c:	4b0c      	ldr	r3, [pc, #48]	@ (80034a0 <__NVIC_SetPriorityGrouping+0x44>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003478:	4013      	ands	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003484:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800348c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800348e:	4a04      	ldr	r2, [pc, #16]	@ (80034a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	60d3      	str	r3, [r2, #12]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a8:	4b04      	ldr	r3, [pc, #16]	@ (80034bc <__NVIC_GetPriorityGrouping+0x18>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	0a1b      	lsrs	r3, r3, #8
 80034ae:	f003 0307 	and.w	r3, r3, #7
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	db0b      	blt.n	80034ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	4906      	ldr	r1, [pc, #24]	@ (80034f4 <__NVIC_EnableIRQ+0x34>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	2001      	movs	r0, #1
 80034e2:	fa00 f202 	lsl.w	r2, r0, r2
 80034e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	e000e100 	.word	0xe000e100

080034f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	2b00      	cmp	r3, #0
 8003508:	db12      	blt.n	8003530 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	f003 021f 	and.w	r2, r3, #31
 8003510:	490a      	ldr	r1, [pc, #40]	@ (800353c <__NVIC_DisableIRQ+0x44>)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2001      	movs	r0, #1
 800351a:	fa00 f202 	lsl.w	r2, r0, r2
 800351e:	3320      	adds	r3, #32
 8003520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003524:	f3bf 8f4f 	dsb	sy
}
 8003528:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800352a:	f3bf 8f6f 	isb	sy
}
 800352e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	e000e100 	.word	0xe000e100

08003540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	6039      	str	r1, [r7, #0]
 800354a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003550:	2b00      	cmp	r3, #0
 8003552:	db0a      	blt.n	800356a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	490c      	ldr	r1, [pc, #48]	@ (800358c <__NVIC_SetPriority+0x4c>)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	440b      	add	r3, r1
 8003564:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003568:	e00a      	b.n	8003580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4908      	ldr	r1, [pc, #32]	@ (8003590 <__NVIC_SetPriority+0x50>)
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	3b04      	subs	r3, #4
 8003578:	0112      	lsls	r2, r2, #4
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	440b      	add	r3, r1
 800357e:	761a      	strb	r2, [r3, #24]
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000e100 	.word	0xe000e100
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003594:	b480      	push	{r7}
 8003596:	b089      	sub	sp, #36	@ 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f1c3 0307 	rsb	r3, r3, #7
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	bf28      	it	cs
 80035b2:	2304      	movcs	r3, #4
 80035b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3304      	adds	r3, #4
 80035ba:	2b06      	cmp	r3, #6
 80035bc:	d902      	bls.n	80035c4 <NVIC_EncodePriority+0x30>
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3b03      	subs	r3, #3
 80035c2:	e000      	b.n	80035c6 <NVIC_EncodePriority+0x32>
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c8:	f04f 32ff 	mov.w	r2, #4294967295
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43da      	mvns	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	401a      	ands	r2, r3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035dc:	f04f 31ff 	mov.w	r1, #4294967295
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	43d9      	mvns	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ec:	4313      	orrs	r3, r2
         );
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3724      	adds	r7, #36	@ 0x24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003608:	d301      	bcc.n	800360e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800360a:	2301      	movs	r3, #1
 800360c:	e00f      	b.n	800362e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800360e:	4a0a      	ldr	r2, [pc, #40]	@ (8003638 <SysTick_Config+0x40>)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003616:	210f      	movs	r1, #15
 8003618:	f04f 30ff 	mov.w	r0, #4294967295
 800361c:	f7ff ff90 	bl	8003540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003620:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <SysTick_Config+0x40>)
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003626:	4b04      	ldr	r3, [pc, #16]	@ (8003638 <SysTick_Config+0x40>)
 8003628:	2207      	movs	r2, #7
 800362a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	e000e010 	.word	0xe000e010

0800363c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff ff09 	bl	800345c <__NVIC_SetPriorityGrouping>
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003652:	b580      	push	{r7, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af00      	add	r7, sp, #0
 8003658:	4603      	mov	r3, r0
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003664:	f7ff ff1e 	bl	80034a4 <__NVIC_GetPriorityGrouping>
 8003668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	6978      	ldr	r0, [r7, #20]
 8003670:	f7ff ff90 	bl	8003594 <NVIC_EncodePriority>
 8003674:	4602      	mov	r2, r0
 8003676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff5f 	bl	8003540 <__NVIC_SetPriority>
}
 8003682:	bf00      	nop
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	4603      	mov	r3, r0
 8003692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff11 	bl	80034c0 <__NVIC_EnableIRQ>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff ff1f 	bl	80034f8 <__NVIC_DisableIRQ>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ff94 	bl	80035f8 <SysTick_Config>
 80036d0:	4603      	mov	r3, r0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e043      	b.n	800377a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b22      	ldr	r3, [pc, #136]	@ (8003784 <HAL_DMA_Init+0xa8>)
 80036fa:	4413      	add	r3, r2
 80036fc:	4a22      	ldr	r2, [pc, #136]	@ (8003788 <HAL_DMA_Init+0xac>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	009a      	lsls	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1f      	ldr	r2, [pc, #124]	@ (800378c <HAL_DMA_Init+0xb0>)
 800370e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003726:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800372a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	bffdfff8 	.word	0xbffdfff8
 8003788:	cccccccd 	.word	0xcccccccd
 800378c:	40020000 	.word	0x40020000

08003790 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e046      	b.n	8003830 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2200      	movs	r2, #0
 80037c0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2200      	movs	r2, #0
 80037c8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	4b18      	ldr	r3, [pc, #96]	@ (800383c <HAL_DMA_DeInit+0xac>)
 80037da:	4413      	add	r3, r2
 80037dc:	4a18      	ldr	r2, [pc, #96]	@ (8003840 <HAL_DMA_DeInit+0xb0>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	091b      	lsrs	r3, r3, #4
 80037e4:	009a      	lsls	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a15      	ldr	r2, [pc, #84]	@ (8003844 <HAL_DMA_DeInit+0xb4>)
 80037ee:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f8:	2101      	movs	r1, #1
 80037fa:	fa01 f202 	lsl.w	r2, r1, r2
 80037fe:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	bffdfff8 	.word	0xbffdfff8
 8003840:	cccccccd 	.word	0xcccccccd
 8003844:	40020000 	.word	0x40020000

08003848 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d005      	beq.n	800386c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2204      	movs	r2, #4
 8003864:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
 800386a:	e051      	b.n	8003910 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 020e 	bic.w	r2, r2, #14
 800387a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a22      	ldr	r2, [pc, #136]	@ (800391c <HAL_DMA_Abort_IT+0xd4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d029      	beq.n	80038ea <HAL_DMA_Abort_IT+0xa2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a21      	ldr	r2, [pc, #132]	@ (8003920 <HAL_DMA_Abort_IT+0xd8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d022      	beq.n	80038e6 <HAL_DMA_Abort_IT+0x9e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003924 <HAL_DMA_Abort_IT+0xdc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01a      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x98>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003928 <HAL_DMA_Abort_IT+0xe0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d012      	beq.n	80038da <HAL_DMA_Abort_IT+0x92>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1c      	ldr	r2, [pc, #112]	@ (800392c <HAL_DMA_Abort_IT+0xe4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00a      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x8c>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003930 <HAL_DMA_Abort_IT+0xe8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d102      	bne.n	80038ce <HAL_DMA_Abort_IT+0x86>
 80038c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80038cc:	e00e      	b.n	80038ec <HAL_DMA_Abort_IT+0xa4>
 80038ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038d2:	e00b      	b.n	80038ec <HAL_DMA_Abort_IT+0xa4>
 80038d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038d8:	e008      	b.n	80038ec <HAL_DMA_Abort_IT+0xa4>
 80038da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038de:	e005      	b.n	80038ec <HAL_DMA_Abort_IT+0xa4>
 80038e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038e4:	e002      	b.n	80038ec <HAL_DMA_Abort_IT+0xa4>
 80038e6:	2310      	movs	r3, #16
 80038e8:	e000      	b.n	80038ec <HAL_DMA_Abort_IT+0xa4>
 80038ea:	2301      	movs	r3, #1
 80038ec:	4a11      	ldr	r2, [pc, #68]	@ (8003934 <HAL_DMA_Abort_IT+0xec>)
 80038ee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
    } 
  }
  return status;
 8003910:	7bfb      	ldrb	r3, [r7, #15]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40020008 	.word	0x40020008
 8003920:	4002001c 	.word	0x4002001c
 8003924:	40020030 	.word	0x40020030
 8003928:	40020044 	.word	0x40020044
 800392c:	40020058 	.word	0x40020058
 8003930:	4002006c 	.word	0x4002006c
 8003934:	40020000 	.word	0x40020000

08003938 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	2204      	movs	r2, #4
 8003956:	409a      	lsls	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d04f      	beq.n	8003a00 <HAL_DMA_IRQHandler+0xc8>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	d04a      	beq.n	8003a00 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b00      	cmp	r3, #0
 8003976:	d107      	bne.n	8003988 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0204 	bic.w	r2, r2, #4
 8003986:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a66      	ldr	r2, [pc, #408]	@ (8003b28 <HAL_DMA_IRQHandler+0x1f0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d029      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xae>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a65      	ldr	r2, [pc, #404]	@ (8003b2c <HAL_DMA_IRQHandler+0x1f4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d022      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xaa>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a63      	ldr	r2, [pc, #396]	@ (8003b30 <HAL_DMA_IRQHandler+0x1f8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01a      	beq.n	80039dc <HAL_DMA_IRQHandler+0xa4>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a62      	ldr	r2, [pc, #392]	@ (8003b34 <HAL_DMA_IRQHandler+0x1fc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d012      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x9e>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a60      	ldr	r2, [pc, #384]	@ (8003b38 <HAL_DMA_IRQHandler+0x200>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00a      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x98>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a5f      	ldr	r2, [pc, #380]	@ (8003b3c <HAL_DMA_IRQHandler+0x204>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d102      	bne.n	80039ca <HAL_DMA_IRQHandler+0x92>
 80039c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80039c8:	e00e      	b.n	80039e8 <HAL_DMA_IRQHandler+0xb0>
 80039ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80039ce:	e00b      	b.n	80039e8 <HAL_DMA_IRQHandler+0xb0>
 80039d0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80039d4:	e008      	b.n	80039e8 <HAL_DMA_IRQHandler+0xb0>
 80039d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80039da:	e005      	b.n	80039e8 <HAL_DMA_IRQHandler+0xb0>
 80039dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039e0:	e002      	b.n	80039e8 <HAL_DMA_IRQHandler+0xb0>
 80039e2:	2340      	movs	r3, #64	@ 0x40
 80039e4:	e000      	b.n	80039e8 <HAL_DMA_IRQHandler+0xb0>
 80039e6:	2304      	movs	r3, #4
 80039e8:	4a55      	ldr	r2, [pc, #340]	@ (8003b40 <HAL_DMA_IRQHandler+0x208>)
 80039ea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8094 	beq.w	8003b1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80039fe:	e08e      	b.n	8003b1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	2202      	movs	r2, #2
 8003a06:	409a      	lsls	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d056      	beq.n	8003abe <HAL_DMA_IRQHandler+0x186>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d051      	beq.n	8003abe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10b      	bne.n	8003a40 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 020a 	bic.w	r2, r2, #10
 8003a36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a38      	ldr	r2, [pc, #224]	@ (8003b28 <HAL_DMA_IRQHandler+0x1f0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d029      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x166>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a37      	ldr	r2, [pc, #220]	@ (8003b2c <HAL_DMA_IRQHandler+0x1f4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d022      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x162>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a35      	ldr	r2, [pc, #212]	@ (8003b30 <HAL_DMA_IRQHandler+0x1f8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01a      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x15c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a34      	ldr	r2, [pc, #208]	@ (8003b34 <HAL_DMA_IRQHandler+0x1fc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d012      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x156>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a32      	ldr	r2, [pc, #200]	@ (8003b38 <HAL_DMA_IRQHandler+0x200>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00a      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x150>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a31      	ldr	r2, [pc, #196]	@ (8003b3c <HAL_DMA_IRQHandler+0x204>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d102      	bne.n	8003a82 <HAL_DMA_IRQHandler+0x14a>
 8003a7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003a80:	e00e      	b.n	8003aa0 <HAL_DMA_IRQHandler+0x168>
 8003a82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a86:	e00b      	b.n	8003aa0 <HAL_DMA_IRQHandler+0x168>
 8003a88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a8c:	e008      	b.n	8003aa0 <HAL_DMA_IRQHandler+0x168>
 8003a8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a92:	e005      	b.n	8003aa0 <HAL_DMA_IRQHandler+0x168>
 8003a94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a98:	e002      	b.n	8003aa0 <HAL_DMA_IRQHandler+0x168>
 8003a9a:	2320      	movs	r3, #32
 8003a9c:	e000      	b.n	8003aa0 <HAL_DMA_IRQHandler+0x168>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	4a27      	ldr	r2, [pc, #156]	@ (8003b40 <HAL_DMA_IRQHandler+0x208>)
 8003aa2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d034      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003abc:	e02f      	b.n	8003b1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d028      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x1e8>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d023      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 020e 	bic.w	r2, r2, #14
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af0:	2101      	movs	r1, #1
 8003af2:	fa01 f202 	lsl.w	r2, r1, r2
 8003af6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
    }
  }
  return;
 8003b1e:	bf00      	nop
 8003b20:	bf00      	nop
}
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40020008 	.word	0x40020008
 8003b2c:	4002001c 	.word	0x4002001c
 8003b30:	40020030 	.word	0x40020030
 8003b34:	40020044 	.word	0x40020044
 8003b38:	40020058 	.word	0x40020058
 8003b3c:	4002006c 	.word	0x4002006c
 8003b40:	40020000 	.word	0x40020000

08003b44 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b52:	b2db      	uxtb	r3, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
	...

08003b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b08b      	sub	sp, #44	@ 0x2c
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b72:	e169      	b.n	8003e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b74:	2201      	movs	r2, #1
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	f040 8158 	bne.w	8003e42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4a9a      	ldr	r2, [pc, #616]	@ (8003e00 <HAL_GPIO_Init+0x2a0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d05e      	beq.n	8003c5a <HAL_GPIO_Init+0xfa>
 8003b9c:	4a98      	ldr	r2, [pc, #608]	@ (8003e00 <HAL_GPIO_Init+0x2a0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d875      	bhi.n	8003c8e <HAL_GPIO_Init+0x12e>
 8003ba2:	4a98      	ldr	r2, [pc, #608]	@ (8003e04 <HAL_GPIO_Init+0x2a4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d058      	beq.n	8003c5a <HAL_GPIO_Init+0xfa>
 8003ba8:	4a96      	ldr	r2, [pc, #600]	@ (8003e04 <HAL_GPIO_Init+0x2a4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d86f      	bhi.n	8003c8e <HAL_GPIO_Init+0x12e>
 8003bae:	4a96      	ldr	r2, [pc, #600]	@ (8003e08 <HAL_GPIO_Init+0x2a8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d052      	beq.n	8003c5a <HAL_GPIO_Init+0xfa>
 8003bb4:	4a94      	ldr	r2, [pc, #592]	@ (8003e08 <HAL_GPIO_Init+0x2a8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d869      	bhi.n	8003c8e <HAL_GPIO_Init+0x12e>
 8003bba:	4a94      	ldr	r2, [pc, #592]	@ (8003e0c <HAL_GPIO_Init+0x2ac>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d04c      	beq.n	8003c5a <HAL_GPIO_Init+0xfa>
 8003bc0:	4a92      	ldr	r2, [pc, #584]	@ (8003e0c <HAL_GPIO_Init+0x2ac>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d863      	bhi.n	8003c8e <HAL_GPIO_Init+0x12e>
 8003bc6:	4a92      	ldr	r2, [pc, #584]	@ (8003e10 <HAL_GPIO_Init+0x2b0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d046      	beq.n	8003c5a <HAL_GPIO_Init+0xfa>
 8003bcc:	4a90      	ldr	r2, [pc, #576]	@ (8003e10 <HAL_GPIO_Init+0x2b0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d85d      	bhi.n	8003c8e <HAL_GPIO_Init+0x12e>
 8003bd2:	2b12      	cmp	r3, #18
 8003bd4:	d82a      	bhi.n	8003c2c <HAL_GPIO_Init+0xcc>
 8003bd6:	2b12      	cmp	r3, #18
 8003bd8:	d859      	bhi.n	8003c8e <HAL_GPIO_Init+0x12e>
 8003bda:	a201      	add	r2, pc, #4	@ (adr r2, 8003be0 <HAL_GPIO_Init+0x80>)
 8003bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be0:	08003c5b 	.word	0x08003c5b
 8003be4:	08003c35 	.word	0x08003c35
 8003be8:	08003c47 	.word	0x08003c47
 8003bec:	08003c89 	.word	0x08003c89
 8003bf0:	08003c8f 	.word	0x08003c8f
 8003bf4:	08003c8f 	.word	0x08003c8f
 8003bf8:	08003c8f 	.word	0x08003c8f
 8003bfc:	08003c8f 	.word	0x08003c8f
 8003c00:	08003c8f 	.word	0x08003c8f
 8003c04:	08003c8f 	.word	0x08003c8f
 8003c08:	08003c8f 	.word	0x08003c8f
 8003c0c:	08003c8f 	.word	0x08003c8f
 8003c10:	08003c8f 	.word	0x08003c8f
 8003c14:	08003c8f 	.word	0x08003c8f
 8003c18:	08003c8f 	.word	0x08003c8f
 8003c1c:	08003c8f 	.word	0x08003c8f
 8003c20:	08003c8f 	.word	0x08003c8f
 8003c24:	08003c3d 	.word	0x08003c3d
 8003c28:	08003c51 	.word	0x08003c51
 8003c2c:	4a79      	ldr	r2, [pc, #484]	@ (8003e14 <HAL_GPIO_Init+0x2b4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c32:	e02c      	b.n	8003c8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	623b      	str	r3, [r7, #32]
          break;
 8003c3a:	e029      	b.n	8003c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	3304      	adds	r3, #4
 8003c42:	623b      	str	r3, [r7, #32]
          break;
 8003c44:	e024      	b.n	8003c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	623b      	str	r3, [r7, #32]
          break;
 8003c4e:	e01f      	b.n	8003c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	330c      	adds	r3, #12
 8003c56:	623b      	str	r3, [r7, #32]
          break;
 8003c58:	e01a      	b.n	8003c90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c62:	2304      	movs	r3, #4
 8003c64:	623b      	str	r3, [r7, #32]
          break;
 8003c66:	e013      	b.n	8003c90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d105      	bne.n	8003c7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c70:	2308      	movs	r3, #8
 8003c72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	611a      	str	r2, [r3, #16]
          break;
 8003c7a:	e009      	b.n	8003c90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	615a      	str	r2, [r3, #20]
          break;
 8003c86:	e003      	b.n	8003c90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	623b      	str	r3, [r7, #32]
          break;
 8003c8c:	e000      	b.n	8003c90 <HAL_GPIO_Init+0x130>
          break;
 8003c8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2bff      	cmp	r3, #255	@ 0xff
 8003c94:	d801      	bhi.n	8003c9a <HAL_GPIO_Init+0x13a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	e001      	b.n	8003c9e <HAL_GPIO_Init+0x13e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2bff      	cmp	r3, #255	@ 0xff
 8003ca4:	d802      	bhi.n	8003cac <HAL_GPIO_Init+0x14c>
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	e002      	b.n	8003cb2 <HAL_GPIO_Init+0x152>
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	3b08      	subs	r3, #8
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	210f      	movs	r1, #15
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	6a39      	ldr	r1, [r7, #32]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 80b1 	beq.w	8003e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8003e18 <HAL_GPIO_Init+0x2b8>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	4a4c      	ldr	r2, [pc, #304]	@ (8003e18 <HAL_GPIO_Init+0x2b8>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6193      	str	r3, [r2, #24]
 8003cec:	4b4a      	ldr	r3, [pc, #296]	@ (8003e18 <HAL_GPIO_Init+0x2b8>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003cf8:	4a48      	ldr	r2, [pc, #288]	@ (8003e1c <HAL_GPIO_Init+0x2bc>)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	089b      	lsrs	r3, r3, #2
 8003cfe:	3302      	adds	r3, #2
 8003d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	220f      	movs	r2, #15
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a40      	ldr	r2, [pc, #256]	@ (8003e20 <HAL_GPIO_Init+0x2c0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d013      	beq.n	8003d4c <HAL_GPIO_Init+0x1ec>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a3f      	ldr	r2, [pc, #252]	@ (8003e24 <HAL_GPIO_Init+0x2c4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00d      	beq.n	8003d48 <HAL_GPIO_Init+0x1e8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a3e      	ldr	r2, [pc, #248]	@ (8003e28 <HAL_GPIO_Init+0x2c8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d007      	beq.n	8003d44 <HAL_GPIO_Init+0x1e4>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a3d      	ldr	r2, [pc, #244]	@ (8003e2c <HAL_GPIO_Init+0x2cc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d101      	bne.n	8003d40 <HAL_GPIO_Init+0x1e0>
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e006      	b.n	8003d4e <HAL_GPIO_Init+0x1ee>
 8003d40:	2304      	movs	r3, #4
 8003d42:	e004      	b.n	8003d4e <HAL_GPIO_Init+0x1ee>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e002      	b.n	8003d4e <HAL_GPIO_Init+0x1ee>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <HAL_GPIO_Init+0x1ee>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d50:	f002 0203 	and.w	r2, r2, #3
 8003d54:	0092      	lsls	r2, r2, #2
 8003d56:	4093      	lsls	r3, r2
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d5e:	492f      	ldr	r1, [pc, #188]	@ (8003e1c <HAL_GPIO_Init+0x2bc>)
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	089b      	lsrs	r3, r3, #2
 8003d64:	3302      	adds	r3, #2
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d006      	beq.n	8003d86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d78:	4b2d      	ldr	r3, [pc, #180]	@ (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	492c      	ldr	r1, [pc, #176]	@ (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	608b      	str	r3, [r1, #8]
 8003d84:	e006      	b.n	8003d94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d86:	4b2a      	ldr	r3, [pc, #168]	@ (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	4928      	ldr	r1, [pc, #160]	@ (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d006      	beq.n	8003dae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003da0:	4b23      	ldr	r3, [pc, #140]	@ (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	4922      	ldr	r1, [pc, #136]	@ (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60cb      	str	r3, [r1, #12]
 8003dac:	e006      	b.n	8003dbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003dae:	4b20      	ldr	r3, [pc, #128]	@ (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	43db      	mvns	r3, r3
 8003db6:	491e      	ldr	r1, [pc, #120]	@ (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d006      	beq.n	8003dd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003dc8:	4b19      	ldr	r3, [pc, #100]	@ (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	4918      	ldr	r1, [pc, #96]	@ (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
 8003dd4:	e006      	b.n	8003de4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003dd6:	4b16      	ldr	r3, [pc, #88]	@ (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	4914      	ldr	r1, [pc, #80]	@ (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d021      	beq.n	8003e34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003df0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	490e      	ldr	r1, [pc, #56]	@ (8003e30 <HAL_GPIO_Init+0x2d0>)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]
 8003dfc:	e021      	b.n	8003e42 <HAL_GPIO_Init+0x2e2>
 8003dfe:	bf00      	nop
 8003e00:	10320000 	.word	0x10320000
 8003e04:	10310000 	.word	0x10310000
 8003e08:	10220000 	.word	0x10220000
 8003e0c:	10210000 	.word	0x10210000
 8003e10:	10120000 	.word	0x10120000
 8003e14:	10110000 	.word	0x10110000
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	40010800 	.word	0x40010800
 8003e24:	40010c00 	.word	0x40010c00
 8003e28:	40011000 	.word	0x40011000
 8003e2c:	40011400 	.word	0x40011400
 8003e30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e34:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <HAL_GPIO_Init+0x304>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	4909      	ldr	r1, [pc, #36]	@ (8003e64 <HAL_GPIO_Init+0x304>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	3301      	adds	r3, #1
 8003e46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f47f ae8e 	bne.w	8003b74 <HAL_GPIO_Init+0x14>
  }
}
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop
 8003e5c:	372c      	adds	r7, #44	@ 0x2c
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	40010400 	.word	0x40010400

08003e68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b089      	sub	sp, #36	@ 0x24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003e76:	e09a      	b.n	8003fae <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003e78:	2201      	movs	r2, #1
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 808d 	beq.w	8003fa8 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8003e8e:	4a4e      	ldr	r2, [pc, #312]	@ (8003fc8 <HAL_GPIO_DeInit+0x160>)
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	3302      	adds	r3, #2
 8003e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	220f      	movs	r2, #15
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4013      	ands	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a46      	ldr	r2, [pc, #280]	@ (8003fcc <HAL_GPIO_DeInit+0x164>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <HAL_GPIO_DeInit+0x78>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a45      	ldr	r2, [pc, #276]	@ (8003fd0 <HAL_GPIO_DeInit+0x168>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00d      	beq.n	8003edc <HAL_GPIO_DeInit+0x74>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a44      	ldr	r2, [pc, #272]	@ (8003fd4 <HAL_GPIO_DeInit+0x16c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d007      	beq.n	8003ed8 <HAL_GPIO_DeInit+0x70>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a43      	ldr	r2, [pc, #268]	@ (8003fd8 <HAL_GPIO_DeInit+0x170>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d101      	bne.n	8003ed4 <HAL_GPIO_DeInit+0x6c>
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e006      	b.n	8003ee2 <HAL_GPIO_DeInit+0x7a>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	e004      	b.n	8003ee2 <HAL_GPIO_DeInit+0x7a>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e002      	b.n	8003ee2 <HAL_GPIO_DeInit+0x7a>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <HAL_GPIO_DeInit+0x7a>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	f002 0203 	and.w	r2, r2, #3
 8003ee8:	0092      	lsls	r2, r2, #2
 8003eea:	4093      	lsls	r3, r2
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d132      	bne.n	8003f58 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8003fdc <HAL_GPIO_DeInit+0x174>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	4938      	ldr	r1, [pc, #224]	@ (8003fdc <HAL_GPIO_DeInit+0x174>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003f00:	4b36      	ldr	r3, [pc, #216]	@ (8003fdc <HAL_GPIO_DeInit+0x174>)
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	4934      	ldr	r1, [pc, #208]	@ (8003fdc <HAL_GPIO_DeInit+0x174>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003f0e:	4b33      	ldr	r3, [pc, #204]	@ (8003fdc <HAL_GPIO_DeInit+0x174>)
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	4931      	ldr	r1, [pc, #196]	@ (8003fdc <HAL_GPIO_DeInit+0x174>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8003fdc <HAL_GPIO_DeInit+0x174>)
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	43db      	mvns	r3, r3
 8003f24:	492d      	ldr	r1, [pc, #180]	@ (8003fdc <HAL_GPIO_DeInit+0x174>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	220f      	movs	r2, #15
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003f3a:	4a23      	ldr	r2, [pc, #140]	@ (8003fc8 <HAL_GPIO_DeInit+0x160>)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	089b      	lsrs	r3, r3, #2
 8003f40:	3302      	adds	r3, #2
 8003f42:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	43da      	mvns	r2, r3
 8003f4a:	481f      	ldr	r0, [pc, #124]	@ (8003fc8 <HAL_GPIO_DeInit+0x160>)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	400a      	ands	r2, r1
 8003f52:	3302      	adds	r3, #2
 8003f54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2bff      	cmp	r3, #255	@ 0xff
 8003f5c:	d801      	bhi.n	8003f62 <HAL_GPIO_DeInit+0xfa>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	e001      	b.n	8003f66 <HAL_GPIO_DeInit+0xfe>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3304      	adds	r3, #4
 8003f66:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2bff      	cmp	r3, #255	@ 0xff
 8003f6c:	d802      	bhi.n	8003f74 <HAL_GPIO_DeInit+0x10c>
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	e002      	b.n	8003f7a <HAL_GPIO_DeInit+0x112>
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	3b08      	subs	r3, #8
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	210f      	movs	r1, #15
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	fa01 f303 	lsl.w	r3, r1, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	401a      	ands	r2, r3
 8003f8c:	2104      	movs	r1, #4
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	fa01 f303 	lsl.w	r3, r1, r3
 8003f94:	431a      	orrs	r2, r3
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	401a      	ands	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	3301      	adds	r3, #1
 8003fac:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f47f af5e 	bne.w	8003e78 <HAL_GPIO_DeInit+0x10>
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	3724      	adds	r7, #36	@ 0x24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	40010800 	.word	0x40010800
 8003fd0:	40010c00 	.word	0x40010c00
 8003fd4:	40011000 	.word	0x40011000
 8003fd8:	40011400 	.word	0x40011400
 8003fdc:	40010400 	.word	0x40010400

08003fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e12b      	b.n	800424a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fd fefe 	bl	8001e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2224      	movs	r2, #36	@ 0x24
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004044:	f003 fa2e 	bl	80074a4 <HAL_RCC_GetPCLK1Freq>
 8004048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4a81      	ldr	r2, [pc, #516]	@ (8004254 <HAL_I2C_Init+0x274>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d807      	bhi.n	8004064 <HAL_I2C_Init+0x84>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a80      	ldr	r2, [pc, #512]	@ (8004258 <HAL_I2C_Init+0x278>)
 8004058:	4293      	cmp	r3, r2
 800405a:	bf94      	ite	ls
 800405c:	2301      	movls	r3, #1
 800405e:	2300      	movhi	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e006      	b.n	8004072 <HAL_I2C_Init+0x92>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4a7d      	ldr	r2, [pc, #500]	@ (800425c <HAL_I2C_Init+0x27c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	bf94      	ite	ls
 800406c:	2301      	movls	r3, #1
 800406e:	2300      	movhi	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e0e7      	b.n	800424a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a78      	ldr	r2, [pc, #480]	@ (8004260 <HAL_I2C_Init+0x280>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	0c9b      	lsrs	r3, r3, #18
 8004084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4a6a      	ldr	r2, [pc, #424]	@ (8004254 <HAL_I2C_Init+0x274>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d802      	bhi.n	80040b4 <HAL_I2C_Init+0xd4>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	3301      	adds	r3, #1
 80040b2:	e009      	b.n	80040c8 <HAL_I2C_Init+0xe8>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040ba:	fb02 f303 	mul.w	r3, r2, r3
 80040be:	4a69      	ldr	r2, [pc, #420]	@ (8004264 <HAL_I2C_Init+0x284>)
 80040c0:	fba2 2303 	umull	r2, r3, r2, r3
 80040c4:	099b      	lsrs	r3, r3, #6
 80040c6:	3301      	adds	r3, #1
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	430b      	orrs	r3, r1
 80040ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	495c      	ldr	r1, [pc, #368]	@ (8004254 <HAL_I2C_Init+0x274>)
 80040e4:	428b      	cmp	r3, r1
 80040e6:	d819      	bhi.n	800411c <HAL_I2C_Init+0x13c>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1e59      	subs	r1, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80040f6:	1c59      	adds	r1, r3, #1
 80040f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040fc:	400b      	ands	r3, r1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_I2C_Init+0x138>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1e59      	subs	r1, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004110:	3301      	adds	r3, #1
 8004112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004116:	e051      	b.n	80041bc <HAL_I2C_Init+0x1dc>
 8004118:	2304      	movs	r3, #4
 800411a:	e04f      	b.n	80041bc <HAL_I2C_Init+0x1dc>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d111      	bne.n	8004148 <HAL_I2C_Init+0x168>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1e58      	subs	r0, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	440b      	add	r3, r1
 8004132:	fbb0 f3f3 	udiv	r3, r0, r3
 8004136:	3301      	adds	r3, #1
 8004138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	e012      	b.n	800416e <HAL_I2C_Init+0x18e>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1e58      	subs	r0, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	0099      	lsls	r1, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	fbb0 f3f3 	udiv	r3, r0, r3
 800415e:	3301      	adds	r3, #1
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_I2C_Init+0x196>
 8004172:	2301      	movs	r3, #1
 8004174:	e022      	b.n	80041bc <HAL_I2C_Init+0x1dc>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10e      	bne.n	800419c <HAL_I2C_Init+0x1bc>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1e58      	subs	r0, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6859      	ldr	r1, [r3, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	440b      	add	r3, r1
 800418c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004190:	3301      	adds	r3, #1
 8004192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800419a:	e00f      	b.n	80041bc <HAL_I2C_Init+0x1dc>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1e58      	subs	r0, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6859      	ldr	r1, [r3, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	0099      	lsls	r1, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b2:	3301      	adds	r3, #1
 80041b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	6809      	ldr	r1, [r1, #0]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69da      	ldr	r2, [r3, #28]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6911      	ldr	r1, [r2, #16]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68d2      	ldr	r2, [r2, #12]
 80041f6:	4311      	orrs	r1, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	000186a0 	.word	0x000186a0
 8004258:	001e847f 	.word	0x001e847f
 800425c:	003d08ff 	.word	0x003d08ff
 8004260:	431bde83 	.word	0x431bde83
 8004264:	10624dd3 	.word	0x10624dd3

08004268 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e021      	b.n	80042be <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2224      	movs	r2, #36	@ 0x24
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fd fe8a 	bl	8001fac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d8:	2b80      	cmp	r3, #128	@ 0x80
 80042da:	d103      	bne.n	80042e4 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	611a      	str	r2, [r3, #16]
  }
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr
	...

080042f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	817b      	strh	r3, [r7, #10]
 8004302:	460b      	mov	r3, r1
 8004304:	813b      	strh	r3, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800430a:	f7fe fe8b 	bl	8003024 <HAL_GetTick>
 800430e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b20      	cmp	r3, #32
 800431a:	f040 80d9 	bne.w	80044d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	2319      	movs	r3, #25
 8004324:	2201      	movs	r2, #1
 8004326:	496d      	ldr	r1, [pc, #436]	@ (80044dc <HAL_I2C_Mem_Write+0x1ec>)
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f002 fa6f 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004334:	2302      	movs	r3, #2
 8004336:	e0cc      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_I2C_Mem_Write+0x56>
 8004342:	2302      	movs	r3, #2
 8004344:	e0c5      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d007      	beq.n	800436c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800437a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2221      	movs	r2, #33	@ 0x21
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2240      	movs	r2, #64	@ 0x40
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800439c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a4d      	ldr	r2, [pc, #308]	@ (80044e0 <HAL_I2C_Mem_Write+0x1f0>)
 80043ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043ae:	88f8      	ldrh	r0, [r7, #6]
 80043b0:	893a      	ldrh	r2, [r7, #8]
 80043b2:	8979      	ldrh	r1, [r7, #10]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	4603      	mov	r3, r0
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f001 fffe 	bl	80063c0 <I2C_RequestMemoryWrite>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d052      	beq.n	8004470 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e081      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f002 fb34 	bl	8006a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d107      	bne.n	80043f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e06b      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fe:	781a      	ldrb	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b04      	cmp	r3, #4
 8004436:	d11b      	bne.n	8004470 <HAL_I2C_Mem_Write+0x180>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d017      	beq.n	8004470 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	781a      	ldrb	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1aa      	bne.n	80043ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f002 fb27 	bl	8006ad0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00d      	beq.n	80044a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	2b04      	cmp	r3, #4
 800448e:	d107      	bne.n	80044a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800449e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e016      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e000      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80044d0:	2302      	movs	r3, #2
  }
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	00100002 	.word	0x00100002
 80044e0:	ffff0000 	.word	0xffff0000

080044e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08c      	sub	sp, #48	@ 0x30
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	4608      	mov	r0, r1
 80044ee:	4611      	mov	r1, r2
 80044f0:	461a      	mov	r2, r3
 80044f2:	4603      	mov	r3, r0
 80044f4:	817b      	strh	r3, [r7, #10]
 80044f6:	460b      	mov	r3, r1
 80044f8:	813b      	strh	r3, [r7, #8]
 80044fa:	4613      	mov	r3, r2
 80044fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004502:	f7fe fd8f 	bl	8003024 <HAL_GetTick>
 8004506:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b20      	cmp	r3, #32
 8004512:	f040 8250 	bne.w	80049b6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	2319      	movs	r3, #25
 800451c:	2201      	movs	r2, #1
 800451e:	4982      	ldr	r1, [pc, #520]	@ (8004728 <HAL_I2C_Mem_Read+0x244>)
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f002 f973 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
 800452e:	e243      	b.n	80049b8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_I2C_Mem_Read+0x5a>
 800453a:	2302      	movs	r3, #2
 800453c:	e23c      	b.n	80049b8 <HAL_I2C_Mem_Read+0x4d4>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	d007      	beq.n	8004564 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004572:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2222      	movs	r2, #34	@ 0x22
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2240      	movs	r2, #64	@ 0x40
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800458e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004594:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a62      	ldr	r2, [pc, #392]	@ (800472c <HAL_I2C_Mem_Read+0x248>)
 80045a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045a6:	88f8      	ldrh	r0, [r7, #6]
 80045a8:	893a      	ldrh	r2, [r7, #8]
 80045aa:	8979      	ldrh	r1, [r7, #10]
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	4603      	mov	r3, r0
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f001 ff98 	bl	80064ec <I2C_RequestMemoryRead>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e1f8      	b.n	80049b8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d113      	bne.n	80045f6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	e1cc      	b.n	8004990 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d11e      	bne.n	800463c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800460c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800460e:	b672      	cpsid	i
}
 8004610:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004612:	2300      	movs	r3, #0
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004636:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004638:	b662      	cpsie	i
}
 800463a:	e035      	b.n	80046a8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004640:	2b02      	cmp	r3, #2
 8004642:	d11e      	bne.n	8004682 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004652:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004654:	b672      	cpsid	i
}
 8004656:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800467c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800467e:	b662      	cpsie	i
}
 8004680:	e012      	b.n	80046a8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004690:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80046a8:	e172      	b.n	8004990 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	f200 811f 	bhi.w	80048f2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d123      	bne.n	8004704 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f002 fa7f 	bl	8006bc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e173      	b.n	80049b8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004702:	e145      	b.n	8004990 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004708:	2b02      	cmp	r3, #2
 800470a:	d152      	bne.n	80047b2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004712:	2200      	movs	r2, #0
 8004714:	4906      	ldr	r1, [pc, #24]	@ (8004730 <HAL_I2C_Mem_Read+0x24c>)
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f002 f878 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e148      	b.n	80049b8 <HAL_I2C_Mem_Read+0x4d4>
 8004726:	bf00      	nop
 8004728:	00100002 	.word	0x00100002
 800472c:	ffff0000 	.word	0xffff0000
 8004730:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004734:	b672      	cpsid	i
}
 8004736:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800477a:	b662      	cpsie	i
}
 800477c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047b0:	e0ee      	b.n	8004990 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b8:	2200      	movs	r2, #0
 80047ba:	4981      	ldr	r1, [pc, #516]	@ (80049c0 <HAL_I2C_Mem_Read+0x4dc>)
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f002 f825 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0f5      	b.n	80049b8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047dc:	b672      	cpsid	i
}
 80047de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004812:	4b6c      	ldr	r3, [pc, #432]	@ (80049c4 <HAL_I2C_Mem_Read+0x4e0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	08db      	lsrs	r3, r3, #3
 8004818:	4a6b      	ldr	r2, [pc, #428]	@ (80049c8 <HAL_I2C_Mem_Read+0x4e4>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	0a1a      	lsrs	r2, r3, #8
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	00da      	lsls	r2, r3, #3
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	3b01      	subs	r3, #1
 8004830:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d118      	bne.n	800486a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004852:	f043 0220 	orr.w	r2, r3, #32
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800485a:	b662      	cpsie	i
}
 800485c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e0a6      	b.n	80049b8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b04      	cmp	r3, #4
 8004876:	d1d9      	bne.n	800482c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004886:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80048ba:	b662      	cpsie	i
}
 80048bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048f0:	e04e      	b.n	8004990 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f002 f964 	bl	8006bc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e058      	b.n	80049b8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b04      	cmp	r3, #4
 8004944:	d124      	bne.n	8004990 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494a:	2b03      	cmp	r3, #3
 800494c:	d107      	bne.n	800495e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800495c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004994:	2b00      	cmp	r3, #0
 8004996:	f47f ae88 	bne.w	80046aa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e000      	b.n	80049b8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
  }
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3728      	adds	r7, #40	@ 0x28
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	00010004 	.word	0x00010004
 80049c4:	20000000 	.word	0x20000000
 80049c8:	14f8b589 	.word	0x14f8b589

080049cc <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049e8:	2b28      	cmp	r3, #40	@ 0x28
 80049ea:	d15b      	bne.n	8004aa4 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e054      	b.n	8004aa6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e04d      	b.n	8004aa6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d007      	beq.n	8004a30 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2229      	movs	r2, #41	@ 0x29
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004a9e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e000      	b.n	8004aa6 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
  }
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	4613      	mov	r3, r2
 8004abe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004acc:	2b28      	cmp	r3, #40	@ 0x28
 8004ace:	d15b      	bne.n	8004b88 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e054      	b.n	8004b8a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e04d      	b.n	8004b8a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d007      	beq.n	8004b14 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	222a      	movs	r2, #42	@ 0x2a
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004b82:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e000      	b.n	8004b8a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8004b88:	2302      	movs	r3, #2
  }
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d124      	bne.n	8004bf2 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2228      	movs	r2, #40	@ 0x28
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d007      	beq.n	8004bce <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0201 	orr.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bdc:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004bec:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
  }
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr

08004bfe <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b088      	sub	sp, #32
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c16:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c26:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d003      	beq.n	8004c36 <HAL_I2C_EV_IRQHandler+0x38>
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	2b40      	cmp	r3, #64	@ 0x40
 8004c32:	f040 80c1 	bne.w	8004db8 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10d      	bne.n	8004c6c <HAL_I2C_EV_IRQHandler+0x6e>
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004c56:	d003      	beq.n	8004c60 <HAL_I2C_EV_IRQHandler+0x62>
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004c5e:	d101      	bne.n	8004c64 <HAL_I2C_EV_IRQHandler+0x66>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e000      	b.n	8004c66 <HAL_I2C_EV_IRQHandler+0x68>
 8004c64:	2300      	movs	r3, #0
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	f000 8132 	beq.w	8004ed0 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00c      	beq.n	8004c90 <HAL_I2C_EV_IRQHandler+0x92>
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	0a5b      	lsrs	r3, r3, #9
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d006      	beq.n	8004c90 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f002 f829 	bl	8006cda <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fd73 	bl	8005774 <I2C_Master_SB>
 8004c8e:	e092      	b.n	8004db6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	08db      	lsrs	r3, r3, #3
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d009      	beq.n	8004cb0 <HAL_I2C_EV_IRQHandler+0xb2>
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	0a5b      	lsrs	r3, r3, #9
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fde8 	bl	800587e <I2C_Master_ADD10>
 8004cae:	e082      	b.n	8004db6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	085b      	lsrs	r3, r3, #1
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d009      	beq.n	8004cd0 <HAL_I2C_EV_IRQHandler+0xd2>
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	0a5b      	lsrs	r3, r3, #9
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fe01 	bl	80058d0 <I2C_Master_ADDR>
 8004cce:	e072      	b.n	8004db6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d03b      	beq.n	8004d54 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ce6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cea:	f000 80f3 	beq.w	8004ed4 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	09db      	lsrs	r3, r3, #7
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00f      	beq.n	8004d1a <HAL_I2C_EV_IRQHandler+0x11c>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	0a9b      	lsrs	r3, r3, #10
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <HAL_I2C_EV_IRQHandler+0x11c>
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	089b      	lsrs	r3, r3, #2
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d103      	bne.n	8004d1a <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f9cb 	bl	80050ae <I2C_MasterTransmit_TXE>
 8004d18:	e04d      	b.n	8004db6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	089b      	lsrs	r3, r3, #2
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 80d6 	beq.w	8004ed4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	0a5b      	lsrs	r3, r3, #9
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80cf 	beq.w	8004ed4 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004d36:	7bbb      	ldrb	r3, [r7, #14]
 8004d38:	2b21      	cmp	r3, #33	@ 0x21
 8004d3a:	d103      	bne.n	8004d44 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fa52 	bl	80051e6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d42:	e0c7      	b.n	8004ed4 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	2b40      	cmp	r3, #64	@ 0x40
 8004d48:	f040 80c4 	bne.w	8004ed4 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fac0 	bl	80052d2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d52:	e0bf      	b.n	8004ed4 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d62:	f000 80b7 	beq.w	8004ed4 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	099b      	lsrs	r3, r3, #6
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00f      	beq.n	8004d92 <HAL_I2C_EV_IRQHandler+0x194>
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	0a9b      	lsrs	r3, r3, #10
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_I2C_EV_IRQHandler+0x194>
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	089b      	lsrs	r3, r3, #2
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d103      	bne.n	8004d92 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fb39 	bl	8005402 <I2C_MasterReceive_RXNE>
 8004d90:	e011      	b.n	8004db6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	089b      	lsrs	r3, r3, #2
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 809a 	beq.w	8004ed4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	0a5b      	lsrs	r3, r3, #9
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8093 	beq.w	8004ed4 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fbef 	bl	8005592 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004db4:	e08e      	b.n	8004ed4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004db6:	e08d      	b.n	8004ed4 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d004      	beq.n	8004dca <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	e007      	b.n	8004dda <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	085b      	lsrs	r3, r3, #1
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d012      	beq.n	8004e0c <HAL_I2C_EV_IRQHandler+0x20e>
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	0a5b      	lsrs	r3, r3, #9
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00c      	beq.n	8004e0c <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004e02:	69b9      	ldr	r1, [r7, #24]
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 ffba 	bl	8005d7e <I2C_Slave_ADDR>
 8004e0a:	e066      	b.n	8004eda <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d009      	beq.n	8004e2c <HAL_I2C_EV_IRQHandler+0x22e>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	0a5b      	lsrs	r3, r3, #9
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fff5 	bl	8005e14 <I2C_Slave_STOPF>
 8004e2a:	e056      	b.n	8004eda <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e2c:	7bbb      	ldrb	r3, [r7, #14]
 8004e2e:	2b21      	cmp	r3, #33	@ 0x21
 8004e30:	d002      	beq.n	8004e38 <HAL_I2C_EV_IRQHandler+0x23a>
 8004e32:	7bbb      	ldrb	r3, [r7, #14]
 8004e34:	2b29      	cmp	r3, #41	@ 0x29
 8004e36:	d125      	bne.n	8004e84 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	09db      	lsrs	r3, r3, #7
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00f      	beq.n	8004e64 <HAL_I2C_EV_IRQHandler+0x266>
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	0a9b      	lsrs	r3, r3, #10
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d009      	beq.n	8004e64 <HAL_I2C_EV_IRQHandler+0x266>
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d103      	bne.n	8004e64 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fed2 	bl	8005c06 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e62:	e039      	b.n	8004ed8 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	089b      	lsrs	r3, r3, #2
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d033      	beq.n	8004ed8 <HAL_I2C_EV_IRQHandler+0x2da>
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	0a5b      	lsrs	r3, r3, #9
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d02d      	beq.n	8004ed8 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 feff 	bl	8005c80 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e82:	e029      	b.n	8004ed8 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	099b      	lsrs	r3, r3, #6
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00f      	beq.n	8004eb0 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	0a9b      	lsrs	r3, r3, #10
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d009      	beq.n	8004eb0 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	089b      	lsrs	r3, r3, #2
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d103      	bne.n	8004eb0 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 ff09 	bl	8005cc0 <I2C_SlaveReceive_RXNE>
 8004eae:	e014      	b.n	8004eda <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	089b      	lsrs	r3, r3, #2
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00e      	beq.n	8004eda <HAL_I2C_EV_IRQHandler+0x2dc>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	0a5b      	lsrs	r3, r3, #9
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 ff37 	bl	8005d3c <I2C_SlaveReceive_BTF>
 8004ece:	e004      	b.n	8004eda <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004ed0:	bf00      	nop
 8004ed2:	e002      	b.n	8004eda <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ed4:	bf00      	nop
 8004ed6:	e000      	b.n	8004eda <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ed8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004eda:	3720      	adds	r7, #32
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08a      	sub	sp, #40	@ 0x28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f02:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d016      	beq.n	8004f3e <HAL_I2C_ER_IRQHandler+0x5e>
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	0a1b      	lsrs	r3, r3, #8
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d010      	beq.n	8004f3e <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004f2c:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f3c:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	0a5b      	lsrs	r3, r3, #9
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00e      	beq.n	8004f68 <HAL_I2C_ER_IRQHandler+0x88>
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	0a1b      	lsrs	r3, r3, #8
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d008      	beq.n	8004f68 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	f043 0302 	orr.w	r3, r3, #2
 8004f5c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004f66:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	0a9b      	lsrs	r3, r3, #10
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d03f      	beq.n	8004ff4 <HAL_I2C_ER_IRQHandler+0x114>
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	0a1b      	lsrs	r3, r3, #8
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d039      	beq.n	8004ff4 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004f80:	7efb      	ldrb	r3, [r7, #27]
 8004f82:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f92:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f98:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004f9a:	7ebb      	ldrb	r3, [r7, #26]
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d112      	bne.n	8004fc6 <HAL_I2C_ER_IRQHandler+0xe6>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10f      	bne.n	8004fc6 <HAL_I2C_ER_IRQHandler+0xe6>
 8004fa6:	7cfb      	ldrb	r3, [r7, #19]
 8004fa8:	2b21      	cmp	r3, #33	@ 0x21
 8004faa:	d008      	beq.n	8004fbe <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	2b29      	cmp	r3, #41	@ 0x29
 8004fb0:	d005      	beq.n	8004fbe <HAL_I2C_ER_IRQHandler+0xde>
 8004fb2:	7cfb      	ldrb	r3, [r7, #19]
 8004fb4:	2b28      	cmp	r3, #40	@ 0x28
 8004fb6:	d106      	bne.n	8004fc6 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b21      	cmp	r3, #33	@ 0x21
 8004fbc:	d103      	bne.n	8004fc6 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f001 f858 	bl	8006074 <I2C_Slave_AF>
 8004fc4:	e016      	b.n	8004ff4 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fce:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	f043 0304 	orr.w	r3, r3, #4
 8004fd6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004fd8:	7efb      	ldrb	r3, [r7, #27]
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d002      	beq.n	8004fe4 <HAL_I2C_ER_IRQHandler+0x104>
 8004fde:	7efb      	ldrb	r3, [r7, #27]
 8004fe0:	2b40      	cmp	r3, #64	@ 0x40
 8004fe2:	d107      	bne.n	8004ff4 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	0adb      	lsrs	r3, r3, #11
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00e      	beq.n	800501e <HAL_I2C_ER_IRQHandler+0x13e>
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	0a1b      	lsrs	r3, r3, #8
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	f043 0308 	orr.w	r3, r3, #8
 8005012:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800501c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f001 f893 	bl	800615c <I2C_ITError>
  }
}
 8005036:	bf00      	nop
 8005038:	3728      	adds	r7, #40	@ 0x28
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr

08005050 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr

08005062 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr

08005074 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr

08005086 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr

08005098 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr

080050ae <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050c4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d150      	bne.n	8005176 <I2C_MasterTransmit_TXE+0xc8>
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	2b21      	cmp	r3, #33	@ 0x21
 80050d8:	d14d      	bne.n	8005176 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d01d      	beq.n	800511c <I2C_MasterTransmit_TXE+0x6e>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	d01a      	beq.n	800511c <I2C_MasterTransmit_TXE+0x6e>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050ec:	d016      	beq.n	800511c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050fc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2211      	movs	r2, #17
 8005102:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff ff92 	bl	800503e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800511a:	e060      	b.n	80051de <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800512a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800513a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b40      	cmp	r3, #64	@ 0x40
 8005154:	d107      	bne.n	8005166 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff ff7f 	bl	8005062 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005164:	e03b      	b.n	80051de <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff ff65 	bl	800503e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005174:	e033      	b.n	80051de <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	2b21      	cmp	r3, #33	@ 0x21
 800517a:	d005      	beq.n	8005188 <I2C_MasterTransmit_TXE+0xda>
 800517c:	7bbb      	ldrb	r3, [r7, #14]
 800517e:	2b40      	cmp	r3, #64	@ 0x40
 8005180:	d12d      	bne.n	80051de <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	2b22      	cmp	r3, #34	@ 0x22
 8005186:	d12a      	bne.n	80051de <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d108      	bne.n	80051a4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051a0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80051a2:	e01c      	b.n	80051de <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b40      	cmp	r3, #64	@ 0x40
 80051ae:	d103      	bne.n	80051b8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f88e 	bl	80052d2 <I2C_MemoryTransmit_TXE_BTF>
}
 80051b6:	e012      	b.n	80051de <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051bc:	781a      	ldrb	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80051dc:	e7ff      	b.n	80051de <I2C_MasterTransmit_TXE+0x130>
 80051de:	bf00      	nop
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b21      	cmp	r3, #33	@ 0x21
 80051fe:	d164      	bne.n	80052ca <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d012      	beq.n	8005230 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520e:	781a      	ldrb	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800522e:	e04c      	b.n	80052ca <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b08      	cmp	r3, #8
 8005234:	d01d      	beq.n	8005272 <I2C_MasterTransmit_BTF+0x8c>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b20      	cmp	r3, #32
 800523a:	d01a      	beq.n	8005272 <I2C_MasterTransmit_BTF+0x8c>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005242:	d016      	beq.n	8005272 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005252:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2211      	movs	r2, #17
 8005258:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff fee7 	bl	800503e <HAL_I2C_MasterTxCpltCallback>
}
 8005270:	e02b      	b.n	80052ca <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005280:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005290:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b40      	cmp	r3, #64	@ 0x40
 80052aa:	d107      	bne.n	80052bc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff fed4 	bl	8005062 <HAL_I2C_MemTxCpltCallback>
}
 80052ba:	e006      	b.n	80052ca <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff feba 	bl	800503e <HAL_I2C_MasterTxCpltCallback>
}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d11d      	bne.n	8005326 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d10b      	bne.n	800530a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005302:	1c9a      	adds	r2, r3, #2
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005308:	e077      	b.n	80053fa <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800530e:	b29b      	uxth	r3, r3
 8005310:	121b      	asrs	r3, r3, #8
 8005312:	b2da      	uxtb	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005324:	e069      	b.n	80053fa <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800532a:	2b01      	cmp	r3, #1
 800532c:	d10b      	bne.n	8005346 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005332:	b2da      	uxtb	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005344:	e059      	b.n	80053fa <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800534a:	2b02      	cmp	r3, #2
 800534c:	d152      	bne.n	80053f4 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	2b22      	cmp	r3, #34	@ 0x22
 8005352:	d10d      	bne.n	8005370 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005362:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800536e:	e044      	b.n	80053fa <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d015      	beq.n	80053a6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	2b21      	cmp	r3, #33	@ 0x21
 800537e:	d112      	bne.n	80053a6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005384:	781a      	ldrb	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80053a4:	e029      	b.n	80053fa <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d124      	bne.n	80053fa <I2C_MemoryTransmit_TXE_BTF+0x128>
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	2b21      	cmp	r3, #33	@ 0x21
 80053b4:	d121      	bne.n	80053fa <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80053c4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053d4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff fe38 	bl	8005062 <HAL_I2C_MemTxCpltCallback>
}
 80053f2:	e002      	b.n	80053fa <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7fe ff66 	bl	80042c6 <I2C_Flush_DR>
}
 80053fa:	bf00      	nop
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b22      	cmp	r3, #34	@ 0x22
 8005414:	f040 80b9 	bne.w	800558a <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005422:	b29b      	uxth	r3, r3
 8005424:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b03      	cmp	r3, #3
 800542a:	d921      	bls.n	8005470 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b03      	cmp	r3, #3
 800545a:	f040 8096 	bne.w	800558a <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800546c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800546e:	e08c      	b.n	800558a <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005474:	2b02      	cmp	r3, #2
 8005476:	d07f      	beq.n	8005578 <I2C_MasterReceive_RXNE+0x176>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d002      	beq.n	8005484 <I2C_MasterReceive_RXNE+0x82>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d179      	bne.n	8005578 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f001 fb6b 	bl	8006b60 <I2C_WaitOnSTOPRequestThroughIT>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d14c      	bne.n	800552a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800549e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b40      	cmp	r3, #64	@ 0x40
 80054e8:	d10a      	bne.n	8005500 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff fdbb 	bl	8005074 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80054fe:	e044      	b.n	800558a <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b08      	cmp	r3, #8
 800550c:	d002      	beq.n	8005514 <I2C_MasterReceive_RXNE+0x112>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b20      	cmp	r3, #32
 8005512:	d103      	bne.n	800551c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	631a      	str	r2, [r3, #48]	@ 0x30
 800551a:	e002      	b.n	8005522 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2212      	movs	r2, #18
 8005520:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff fd94 	bl	8005050 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005528:	e02f      	b.n	800558a <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005538:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7fd f91f 	bl	80027b4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005576:	e008      	b.n	800558a <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005586:	605a      	str	r2, [r3, #4]
}
 8005588:	e7ff      	b.n	800558a <I2C_MasterReceive_RXNE+0x188>
 800558a:	bf00      	nop
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d11b      	bne.n	80055e2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055b8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80055e0:	e0c4      	b.n	800576c <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d129      	bne.n	8005640 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055fa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d00a      	beq.n	8005618 <I2C_MasterReceive_BTF+0x86>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d007      	beq.n	8005618 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005616:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800563e:	e095      	b.n	800576c <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d17d      	bne.n	8005746 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d002      	beq.n	8005656 <I2C_MasterReceive_BTF+0xc4>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2b10      	cmp	r3, #16
 8005654:	d108      	bne.n	8005668 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	e016      	b.n	8005696 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b04      	cmp	r3, #4
 800566c:	d002      	beq.n	8005674 <I2C_MasterReceive_BTF+0xe2>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d108      	bne.n	8005686 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e007      	b.n	8005696 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005694:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80056f0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b40      	cmp	r3, #64	@ 0x40
 8005704:	d10a      	bne.n	800571c <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff fcad 	bl	8005074 <HAL_I2C_MemRxCpltCallback>
}
 800571a:	e027      	b.n	800576c <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b08      	cmp	r3, #8
 8005728:	d002      	beq.n	8005730 <I2C_MasterReceive_BTF+0x19e>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b20      	cmp	r3, #32
 800572e:	d103      	bne.n	8005738 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	631a      	str	r2, [r3, #48]	@ 0x30
 8005736:	e002      	b.n	800573e <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2212      	movs	r2, #18
 800573c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff fc86 	bl	8005050 <HAL_I2C_MasterRxCpltCallback>
}
 8005744:	e012      	b.n	800576c <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800576c:	bf00      	nop
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b40      	cmp	r3, #64	@ 0x40
 8005786:	d117      	bne.n	80057b8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005794:	b2db      	uxtb	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057a0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80057a2:	e067      	b.n	8005874 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	f043 0301 	orr.w	r3, r3, #1
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	611a      	str	r2, [r3, #16]
}
 80057b6:	e05d      	b.n	8005874 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057c0:	d133      	bne.n	800582a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b21      	cmp	r3, #33	@ 0x21
 80057cc:	d109      	bne.n	80057e2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	461a      	mov	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057de:	611a      	str	r2, [r3, #16]
 80057e0:	e008      	b.n	80057f4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	f043 0301 	orr.w	r3, r3, #1
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d004      	beq.n	8005806 <I2C_Master_SB+0x92>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005802:	2b00      	cmp	r3, #0
 8005804:	d108      	bne.n	8005818 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580a:	2b00      	cmp	r3, #0
 800580c:	d032      	beq.n	8005874 <I2C_Master_SB+0x100>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005814:	2b00      	cmp	r3, #0
 8005816:	d02d      	beq.n	8005874 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005826:	605a      	str	r2, [r3, #4]
}
 8005828:	e024      	b.n	8005874 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10e      	bne.n	8005850 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	b29b      	uxth	r3, r3
 8005838:	11db      	asrs	r3, r3, #7
 800583a:	b2db      	uxtb	r3, r3
 800583c:	f003 0306 	and.w	r3, r3, #6
 8005840:	b2db      	uxtb	r3, r3
 8005842:	f063 030f 	orn	r3, r3, #15
 8005846:	b2da      	uxtb	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	611a      	str	r2, [r3, #16]
}
 800584e:	e011      	b.n	8005874 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005854:	2b01      	cmp	r3, #1
 8005856:	d10d      	bne.n	8005874 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585c:	b29b      	uxth	r3, r3
 800585e:	11db      	asrs	r3, r3, #7
 8005860:	b2db      	uxtb	r3, r3
 8005862:	f003 0306 	and.w	r3, r3, #6
 8005866:	b2db      	uxtb	r3, r3
 8005868:	f063 030e 	orn	r3, r3, #14
 800586c:	b2da      	uxtb	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	611a      	str	r2, [r3, #16]
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr

0800587e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588a:	b2da      	uxtb	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005896:	2b00      	cmp	r3, #0
 8005898:	d004      	beq.n	80058a4 <I2C_Master_ADD10+0x26>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800589e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d108      	bne.n	80058b6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00c      	beq.n	80058c6 <I2C_Master_ADD10+0x48>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058c4:	605a      	str	r2, [r3, #4]
  }
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr

080058d0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b091      	sub	sp, #68	@ 0x44
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ec:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b22      	cmp	r3, #34	@ 0x22
 80058f8:	f040 8174 	bne.w	8005be4 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10f      	bne.n	8005924 <I2C_Master_ADDR+0x54>
 8005904:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005908:	2b40      	cmp	r3, #64	@ 0x40
 800590a:	d10b      	bne.n	8005924 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800590c:	2300      	movs	r3, #0
 800590e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	633b      	str	r3, [r7, #48]	@ 0x30
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005922:	e16b      	b.n	8005bfc <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005928:	2b00      	cmp	r3, #0
 800592a:	d11d      	bne.n	8005968 <I2C_Master_ADDR+0x98>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005934:	d118      	bne.n	8005968 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005936:	2300      	movs	r3, #0
 8005938:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800594a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800595a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	651a      	str	r2, [r3, #80]	@ 0x50
 8005966:	e149      	b.n	8005bfc <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d113      	bne.n	800599a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005972:	2300      	movs	r3, #0
 8005974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005986:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	e120      	b.n	8005bdc <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	f040 808a 	bne.w	8005aba <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80059a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80059ac:	d137      	bne.n	8005a1e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059bc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059cc:	d113      	bne.n	80059f6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059dc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059de:	2300      	movs	r3, #0
 80059e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	e0f2      	b.n	8005bdc <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059f6:	2300      	movs	r3, #0
 80059f8:	623b      	str	r3, [r7, #32]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	623b      	str	r3, [r7, #32]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	623b      	str	r3, [r7, #32]
 8005a0a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	e0de      	b.n	8005bdc <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d02e      	beq.n	8005a82 <I2C_Master_ADDR+0x1b2>
 8005a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d02b      	beq.n	8005a82 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2c:	2b12      	cmp	r3, #18
 8005a2e:	d102      	bne.n	8005a36 <I2C_Master_ADDR+0x166>
 8005a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d125      	bne.n	8005a82 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d00e      	beq.n	8005a5a <I2C_Master_ADDR+0x18a>
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d00b      	beq.n	8005a5a <I2C_Master_ADDR+0x18a>
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	d008      	beq.n	8005a5a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e007      	b.n	8005a6a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a68:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	e0ac      	b.n	8005bdc <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a90:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a92:	2300      	movs	r3, #0
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	e090      	b.n	8005bdc <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d158      	bne.n	8005b76 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d021      	beq.n	8005b0e <I2C_Master_ADDR+0x23e>
 8005aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d01e      	beq.n	8005b0e <I2C_Master_ADDR+0x23e>
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad2:	2b10      	cmp	r3, #16
 8005ad4:	d01b      	beq.n	8005b0e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ae4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e012      	b.n	8005b34 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b1c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b42:	d14b      	bne.n	8005bdc <I2C_Master_ADDR+0x30c>
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b4a:	d00b      	beq.n	8005b64 <I2C_Master_ADDR+0x294>
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d008      	beq.n	8005b64 <I2C_Master_ADDR+0x294>
 8005b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d005      	beq.n	8005b64 <I2C_Master_ADDR+0x294>
 8005b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d002      	beq.n	8005b64 <I2C_Master_ADDR+0x294>
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d13b      	bne.n	8005bdc <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b72:	605a      	str	r2, [r3, #4]
 8005b74:	e032      	b.n	8005bdc <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b84:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b94:	d117      	bne.n	8005bc6 <I2C_Master_ADDR+0x2f6>
 8005b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b9c:	d00b      	beq.n	8005bb6 <I2C_Master_ADDR+0x2e6>
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d008      	beq.n	8005bb6 <I2C_Master_ADDR+0x2e6>
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d005      	beq.n	8005bb6 <I2C_Master_ADDR+0x2e6>
 8005baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d002      	beq.n	8005bb6 <I2C_Master_ADDR+0x2e6>
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d107      	bne.n	8005bc6 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005bc4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005be2:	e00b      	b.n	8005bfc <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005be4:	2300      	movs	r3, #0
 8005be6:	60bb      	str	r3, [r7, #8]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	60bb      	str	r3, [r7, #8]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	60bb      	str	r3, [r7, #8]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
}
 8005bfa:	e7ff      	b.n	8005bfc <I2C_Master_ADDR+0x32c>
 8005bfc:	bf00      	nop
 8005bfe:	3744      	adds	r7, #68	@ 0x44
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr

08005c06 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c14:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d02b      	beq.n	8005c78 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d114      	bne.n	8005c78 <I2C_SlaveTransmit_TXE+0x72>
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
 8005c50:	2b29      	cmp	r3, #41	@ 0x29
 8005c52:	d111      	bne.n	8005c78 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c62:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2221      	movs	r2, #33	@ 0x21
 8005c68:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2228      	movs	r2, #40	@ 0x28
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fc fd76 	bl	8002764 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005c78:	bf00      	nop
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d011      	beq.n	8005cb6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c96:	781a      	ldrb	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr

08005cc0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d02c      	beq.n	8005d34 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d114      	bne.n	8005d34 <I2C_SlaveReceive_RXNE+0x74>
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d0e:	d111      	bne.n	8005d34 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d1e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2222      	movs	r2, #34	@ 0x22
 8005d24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2228      	movs	r2, #40	@ 0x28
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fc fd2c 	bl	800278c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005d34:	bf00      	nop
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d012      	beq.n	8005d74 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr

08005d7e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d98:	2b28      	cmp	r3, #40	@ 0x28
 8005d9a:	d127      	bne.n	8005dec <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005daa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	089b      	lsrs	r3, r3, #2
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005db8:	2301      	movs	r3, #1
 8005dba:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	09db      	lsrs	r3, r3, #7
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d103      	bne.n	8005dd0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	81bb      	strh	r3, [r7, #12]
 8005dce:	e002      	b.n	8005dd6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005dde:	89ba      	ldrh	r2, [r7, #12]
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7fc fca3 	bl	8002730 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005dea:	e00e      	b.n	8005e0a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dec:	2300      	movs	r3, #0
 8005dee:	60bb      	str	r3, [r7, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	60bb      	str	r3, [r7, #8]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	60bb      	str	r3, [r7, #8]
 8005e00:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e22:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e32:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005e34:	2300      	movs	r3, #0
 8005e36:	60bb      	str	r3, [r7, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	60bb      	str	r3, [r7, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e60:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e70:	d172      	bne.n	8005f58 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b22      	cmp	r3, #34	@ 0x22
 8005e76:	d002      	beq.n	8005e7e <I2C_Slave_STOPF+0x6a>
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e7c:	d135      	bne.n	8005eea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	f043 0204 	orr.w	r2, r3, #4
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fd fe44 	bl	8003b44 <HAL_DMA_GetState>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d049      	beq.n	8005f56 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec6:	4a69      	ldr	r2, [pc, #420]	@ (800606c <I2C_Slave_STOPF+0x258>)
 8005ec8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fd fcba 	bl	8003848 <HAL_DMA_Abort_IT>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d03d      	beq.n	8005f56 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ee8:	e035      	b.n	8005f56 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f06:	f043 0204 	orr.w	r2, r3, #4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f1c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fd fe0e 	bl	8003b44 <HAL_DMA_GetState>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d014      	beq.n	8005f58 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f32:	4a4e      	ldr	r2, [pc, #312]	@ (800606c <I2C_Slave_STOPF+0x258>)
 8005f34:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fd fc84 	bl	8003848 <HAL_DMA_Abort_IT>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d008      	beq.n	8005f58 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f50:	4610      	mov	r0, r2
 8005f52:	4798      	blx	r3
 8005f54:	e000      	b.n	8005f58 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f56:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d03e      	beq.n	8005fe0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d112      	bne.n	8005f96 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa0:	2b40      	cmp	r3, #64	@ 0x40
 8005fa2:	d112      	bne.n	8005fca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd8:	f043 0204 	orr.w	r2, r3, #4
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f8b7 	bl	800615c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005fee:	e039      	b.n	8006064 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ff4:	d109      	bne.n	800600a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2228      	movs	r2, #40	@ 0x28
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7fc fbc1 	bl	800278c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b28      	cmp	r3, #40	@ 0x28
 8006014:	d111      	bne.n	800603a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a15      	ldr	r2, [pc, #84]	@ (8006070 <I2C_Slave_STOPF+0x25c>)
 800601a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fc fb68 	bl	8002708 <HAL_I2C_ListenCpltCallback>
}
 8006038:	e014      	b.n	8006064 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603e:	2b22      	cmp	r3, #34	@ 0x22
 8006040:	d002      	beq.n	8006048 <I2C_Slave_STOPF+0x234>
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	2b22      	cmp	r3, #34	@ 0x22
 8006046:	d10d      	bne.n	8006064 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fc fb94 	bl	800278c <HAL_I2C_SlaveRxCpltCallback>
}
 8006064:	bf00      	nop
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	080066bd 	.word	0x080066bd
 8006070:	ffff0000 	.word	0xffff0000

08006074 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006082:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006088:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b08      	cmp	r3, #8
 800608e:	d002      	beq.n	8006096 <I2C_Slave_AF+0x22>
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b20      	cmp	r3, #32
 8006094:	d129      	bne.n	80060ea <I2C_Slave_AF+0x76>
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	2b28      	cmp	r3, #40	@ 0x28
 800609a:	d126      	bne.n	80060ea <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a2e      	ldr	r2, [pc, #184]	@ (8006158 <I2C_Slave_AF+0xe4>)
 80060a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80060b0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060ba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060ca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fc fb10 	bl	8002708 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80060e8:	e031      	b.n	800614e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	2b21      	cmp	r3, #33	@ 0x21
 80060ee:	d129      	bne.n	8006144 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a19      	ldr	r2, [pc, #100]	@ (8006158 <I2C_Slave_AF+0xe4>)
 80060f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2221      	movs	r2, #33	@ 0x21
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800611a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006124:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006134:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7fe f8c5 	bl	80042c6 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7fc fb11 	bl	8002764 <HAL_I2C_SlaveTxCpltCallback>
}
 8006142:	e004      	b.n	800614e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800614c:	615a      	str	r2, [r3, #20]
}
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	ffff0000 	.word	0xffff0000

0800615c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800616a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006172:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006174:	7bbb      	ldrb	r3, [r7, #14]
 8006176:	2b10      	cmp	r3, #16
 8006178:	d002      	beq.n	8006180 <I2C_ITError+0x24>
 800617a:	7bbb      	ldrb	r3, [r7, #14]
 800617c:	2b40      	cmp	r3, #64	@ 0x40
 800617e:	d10a      	bne.n	8006196 <I2C_ITError+0x3a>
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	2b22      	cmp	r3, #34	@ 0x22
 8006184:	d107      	bne.n	8006196 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006194:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800619c:	2b28      	cmp	r3, #40	@ 0x28
 800619e:	d107      	bne.n	80061b0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2228      	movs	r2, #40	@ 0x28
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80061ae:	e015      	b.n	80061dc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061be:	d00a      	beq.n	80061d6 <I2C_ITError+0x7a>
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	2b60      	cmp	r3, #96	@ 0x60
 80061c4:	d007      	beq.n	80061d6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ea:	d162      	bne.n	80062b2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061fa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006200:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d020      	beq.n	800624c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800620e:	4a6a      	ldr	r2, [pc, #424]	@ (80063b8 <I2C_ITError+0x25c>)
 8006210:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006216:	4618      	mov	r0, r3
 8006218:	f7fd fb16 	bl	8003848 <HAL_DMA_Abort_IT>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 8089 	beq.w	8006336 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0201 	bic.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006246:	4610      	mov	r0, r2
 8006248:	4798      	blx	r3
 800624a:	e074      	b.n	8006336 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006250:	4a59      	ldr	r2, [pc, #356]	@ (80063b8 <I2C_ITError+0x25c>)
 8006252:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006258:	4618      	mov	r0, r3
 800625a:	f7fd faf5 	bl	8003848 <HAL_DMA_Abort_IT>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d068      	beq.n	8006336 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800626e:	2b40      	cmp	r3, #64	@ 0x40
 8006270:	d10b      	bne.n	800628a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 0201 	bic.w	r2, r2, #1
 8006298:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80062ac:	4610      	mov	r0, r2
 80062ae:	4798      	blx	r3
 80062b0:	e041      	b.n	8006336 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b60      	cmp	r3, #96	@ 0x60
 80062bc:	d125      	bne.n	800630a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d6:	2b40      	cmp	r3, #64	@ 0x40
 80062d8:	d10b      	bne.n	80062f2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0201 	bic.w	r2, r2, #1
 8006300:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fe febf 	bl	8005086 <HAL_I2C_AbortCpltCallback>
 8006308:	e015      	b.n	8006336 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006314:	2b40      	cmp	r3, #64	@ 0x40
 8006316:	d10b      	bne.n	8006330 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7fc fa3f 	bl	80027b4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10e      	bne.n	8006364 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800634c:	2b00      	cmp	r3, #0
 800634e:	d109      	bne.n	8006364 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006356:	2b00      	cmp	r3, #0
 8006358:	d104      	bne.n	8006364 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006372:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800637a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d113      	bne.n	80063b0 <I2C_ITError+0x254>
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	2b28      	cmp	r3, #40	@ 0x28
 800638c:	d110      	bne.n	80063b0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a0a      	ldr	r2, [pc, #40]	@ (80063bc <I2C_ITError+0x260>)
 8006392:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fc f9ac 	bl	8002708 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	080066bd 	.word	0x080066bd
 80063bc:	ffff0000 	.word	0xffff0000

080063c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	4608      	mov	r0, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	461a      	mov	r2, r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	817b      	strh	r3, [r7, #10]
 80063d2:	460b      	mov	r3, r1
 80063d4:	813b      	strh	r3, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 fa08 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00d      	beq.n	800641e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800640c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006410:	d103      	bne.n	800641a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006418:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e05f      	b.n	80064de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800641e:	897b      	ldrh	r3, [r7, #10]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	461a      	mov	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800642c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	6a3a      	ldr	r2, [r7, #32]
 8006432:	492d      	ldr	r1, [pc, #180]	@ (80064e8 <I2C_RequestMemoryWrite+0x128>)
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 fa63 	bl	8006900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e04c      	b.n	80064de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800645a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800645c:	6a39      	ldr	r1, [r7, #32]
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 faee 	bl	8006a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00d      	beq.n	8006486 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646e:	2b04      	cmp	r3, #4
 8006470:	d107      	bne.n	8006482 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006480:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e02b      	b.n	80064de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d105      	bne.n	8006498 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800648c:	893b      	ldrh	r3, [r7, #8]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	611a      	str	r2, [r3, #16]
 8006496:	e021      	b.n	80064dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006498:	893b      	ldrh	r3, [r7, #8]
 800649a:	0a1b      	lsrs	r3, r3, #8
 800649c:	b29b      	uxth	r3, r3
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064a8:	6a39      	ldr	r1, [r7, #32]
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 fac8 	bl	8006a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00d      	beq.n	80064d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d107      	bne.n	80064ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e005      	b.n	80064de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064d2:	893b      	ldrh	r3, [r7, #8]
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	00010002 	.word	0x00010002

080064ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	4608      	mov	r0, r1
 80064f6:	4611      	mov	r1, r2
 80064f8:	461a      	mov	r2, r3
 80064fa:	4603      	mov	r3, r0
 80064fc:	817b      	strh	r3, [r7, #10]
 80064fe:	460b      	mov	r3, r1
 8006500:	813b      	strh	r3, [r7, #8]
 8006502:	4613      	mov	r3, r2
 8006504:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006514:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006524:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	2200      	movs	r2, #0
 800652e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 f96a 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00d      	beq.n	800655a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800654c:	d103      	bne.n	8006556 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006554:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e0aa      	b.n	80066b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800655a:	897b      	ldrh	r3, [r7, #10]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006568:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	6a3a      	ldr	r2, [r7, #32]
 800656e:	4952      	ldr	r1, [pc, #328]	@ (80066b8 <I2C_RequestMemoryRead+0x1cc>)
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f9c5 	bl	8006900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e097      	b.n	80066b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006580:	2300      	movs	r3, #0
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006598:	6a39      	ldr	r1, [r7, #32]
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 fa50 	bl	8006a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00d      	beq.n	80065c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d107      	bne.n	80065be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e076      	b.n	80066b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065c2:	88fb      	ldrh	r3, [r7, #6]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d105      	bne.n	80065d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065c8:	893b      	ldrh	r3, [r7, #8]
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	611a      	str	r2, [r3, #16]
 80065d2:	e021      	b.n	8006618 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065d4:	893b      	ldrh	r3, [r7, #8]
 80065d6:	0a1b      	lsrs	r3, r3, #8
 80065d8:	b29b      	uxth	r3, r3
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065e4:	6a39      	ldr	r1, [r7, #32]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 fa2a 	bl	8006a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00d      	beq.n	800660e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d107      	bne.n	800660a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006608:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e050      	b.n	80066b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800660e:	893b      	ldrh	r3, [r7, #8]
 8006610:	b2da      	uxtb	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800661a:	6a39      	ldr	r1, [r7, #32]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 fa0f 	bl	8006a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00d      	beq.n	8006644 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662c:	2b04      	cmp	r3, #4
 800662e:	d107      	bne.n	8006640 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800663e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e035      	b.n	80066b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006652:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	2200      	movs	r2, #0
 800665c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 f8d3 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00d      	beq.n	8006688 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800667a:	d103      	bne.n	8006684 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006682:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e013      	b.n	80066b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006688:	897b      	ldrh	r3, [r7, #10]
 800668a:	b2db      	uxtb	r3, r3
 800668c:	f043 0301 	orr.w	r3, r3, #1
 8006690:	b2da      	uxtb	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669a:	6a3a      	ldr	r2, [r7, #32]
 800669c:	4906      	ldr	r1, [pc, #24]	@ (80066b8 <I2C_RequestMemoryRead+0x1cc>)
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 f92e 	bl	8006900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e000      	b.n	80066b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	00010002 	.word	0x00010002

080066bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80066d6:	4b4b      	ldr	r3, [pc, #300]	@ (8006804 <I2C_DMAAbort+0x148>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	08db      	lsrs	r3, r3, #3
 80066dc:	4a4a      	ldr	r2, [pc, #296]	@ (8006808 <I2C_DMAAbort+0x14c>)
 80066de:	fba2 2303 	umull	r2, r3, r2, r3
 80066e2:	0a1a      	lsrs	r2, r3, #8
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	00da      	lsls	r2, r3, #3
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006702:	e00a      	b.n	800671a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3b01      	subs	r3, #1
 8006708:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006718:	d0ea      	beq.n	80066f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006726:	2200      	movs	r2, #0
 8006728:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006736:	2200      	movs	r2, #0
 8006738:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006748:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2200      	movs	r2, #0
 800674e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675c:	2200      	movs	r2, #0
 800675e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676c:	2200      	movs	r2, #0
 800676e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0201 	bic.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b60      	cmp	r3, #96	@ 0x60
 800678a:	d10e      	bne.n	80067aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2200      	movs	r2, #0
 80067a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067a2:	6978      	ldr	r0, [r7, #20]
 80067a4:	f7fe fc6f 	bl	8005086 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067a8:	e027      	b.n	80067fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067aa:	7cfb      	ldrb	r3, [r7, #19]
 80067ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80067b0:	2b28      	cmp	r3, #40	@ 0x28
 80067b2:	d117      	bne.n	80067e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2200      	movs	r2, #0
 80067d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2228      	movs	r2, #40	@ 0x28
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80067e2:	e007      	b.n	80067f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80067f4:	6978      	ldr	r0, [r7, #20]
 80067f6:	f7fb ffdd 	bl	80027b4 <HAL_I2C_ErrorCallback>
}
 80067fa:	bf00      	nop
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20000000 	.word	0x20000000
 8006808:	14f8b589 	.word	0x14f8b589

0800680c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	4613      	mov	r3, r2
 800681a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800681c:	e048      	b.n	80068b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006824:	d044      	beq.n	80068b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006826:	f7fc fbfd 	bl	8003024 <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	429a      	cmp	r2, r3
 8006834:	d302      	bcc.n	800683c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d139      	bne.n	80068b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	0c1b      	lsrs	r3, r3, #16
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b01      	cmp	r3, #1
 8006844:	d10d      	bne.n	8006862 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	43da      	mvns	r2, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	4013      	ands	r3, r2
 8006852:	b29b      	uxth	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	bf0c      	ite	eq
 8006858:	2301      	moveq	r3, #1
 800685a:	2300      	movne	r3, #0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	461a      	mov	r2, r3
 8006860:	e00c      	b.n	800687c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	43da      	mvns	r2, r3
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	4013      	ands	r3, r2
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	bf0c      	ite	eq
 8006874:	2301      	moveq	r3, #1
 8006876:	2300      	movne	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	429a      	cmp	r2, r3
 8006880:	d116      	bne.n	80068b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2220      	movs	r2, #32
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689c:	f043 0220 	orr.w	r2, r3, #32
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e023      	b.n	80068f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	0c1b      	lsrs	r3, r3, #16
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d10d      	bne.n	80068d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	43da      	mvns	r2, r3
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4013      	ands	r3, r2
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bf0c      	ite	eq
 80068cc:	2301      	moveq	r3, #1
 80068ce:	2300      	movne	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	461a      	mov	r2, r3
 80068d4:	e00c      	b.n	80068f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	43da      	mvns	r2, r3
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	4013      	ands	r3, r2
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf0c      	ite	eq
 80068e8:	2301      	moveq	r3, #1
 80068ea:	2300      	movne	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d093      	beq.n	800681e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800690e:	e071      	b.n	80069f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800691a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800691e:	d123      	bne.n	8006968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800692e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006938:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006954:	f043 0204 	orr.w	r2, r3, #4
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e067      	b.n	8006a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d041      	beq.n	80069f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006970:	f7fc fb58 	bl	8003024 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	429a      	cmp	r2, r3
 800697e:	d302      	bcc.n	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d136      	bne.n	80069f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	0c1b      	lsrs	r3, r3, #16
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b01      	cmp	r3, #1
 800698e:	d10c      	bne.n	80069aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	43da      	mvns	r2, r3
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4013      	ands	r3, r2
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	bf14      	ite	ne
 80069a2:	2301      	movne	r3, #1
 80069a4:	2300      	moveq	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	e00b      	b.n	80069c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	43da      	mvns	r2, r3
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	4013      	ands	r3, r2
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	bf14      	ite	ne
 80069bc:	2301      	movne	r3, #1
 80069be:	2300      	moveq	r3, #0
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d016      	beq.n	80069f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e0:	f043 0220 	orr.w	r2, r3, #32
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e021      	b.n	8006a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	0c1b      	lsrs	r3, r3, #16
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d10c      	bne.n	8006a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	43da      	mvns	r2, r3
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	bf14      	ite	ne
 8006a10:	2301      	movne	r3, #1
 8006a12:	2300      	moveq	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	e00b      	b.n	8006a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	43da      	mvns	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4013      	ands	r3, r2
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bf14      	ite	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	2300      	moveq	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f47f af6d 	bne.w	8006910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a4c:	e034      	b.n	8006ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 f915 	bl	8006c7e <I2C_IsAcknowledgeFailed>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e034      	b.n	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a64:	d028      	beq.n	8006ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a66:	f7fc fadd 	bl	8003024 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d302      	bcc.n	8006a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d11d      	bne.n	8006ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a86:	2b80      	cmp	r3, #128	@ 0x80
 8006a88:	d016      	beq.n	8006ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa4:	f043 0220 	orr.w	r2, r3, #32
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e007      	b.n	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ac2:	2b80      	cmp	r3, #128	@ 0x80
 8006ac4:	d1c3      	bne.n	8006a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006adc:	e034      	b.n	8006b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 f8cd 	bl	8006c7e <I2C_IsAcknowledgeFailed>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e034      	b.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d028      	beq.n	8006b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af6:	f7fc fa95 	bl	8003024 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d302      	bcc.n	8006b0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d11d      	bne.n	8006b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d016      	beq.n	8006b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b34:	f043 0220 	orr.w	r2, r3, #32
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e007      	b.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d1c3      	bne.n	8006ade <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b6c:	4b13      	ldr	r3, [pc, #76]	@ (8006bbc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	08db      	lsrs	r3, r3, #3
 8006b72:	4a13      	ldr	r2, [pc, #76]	@ (8006bc0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006b74:	fba2 2303 	umull	r2, r3, r2, r3
 8006b78:	0a1a      	lsrs	r2, r3, #8
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d107      	bne.n	8006b9e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b92:	f043 0220 	orr.w	r2, r3, #32
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e008      	b.n	8006bb0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bac:	d0e9      	beq.n	8006b82 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc80      	pop	{r7}
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	20000000 	.word	0x20000000
 8006bc0:	14f8b589 	.word	0x14f8b589

08006bc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bd0:	e049      	b.n	8006c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	f003 0310 	and.w	r3, r3, #16
 8006bdc:	2b10      	cmp	r3, #16
 8006bde:	d119      	bne.n	8006c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0210 	mvn.w	r2, #16
 8006be8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e030      	b.n	8006c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c14:	f7fc fa06 	bl	8003024 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d302      	bcc.n	8006c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d11d      	bne.n	8006c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c34:	2b40      	cmp	r3, #64	@ 0x40
 8006c36:	d016      	beq.n	8006c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c52:	f043 0220 	orr.w	r2, r3, #32
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e007      	b.n	8006c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c70:	2b40      	cmp	r3, #64	@ 0x40
 8006c72:	d1ae      	bne.n	8006bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c94:	d11b      	bne.n	8006cce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c9e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cba:	f043 0204 	orr.w	r2, r3, #4
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e000      	b.n	8006cd0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bc80      	pop	{r7}
 8006cd8:	4770      	bx	lr

08006cda <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006cea:	d103      	bne.n	8006cf4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cf2:	e007      	b.n	8006d04 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006cfc:	d102      	bne.n	8006d04 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2208      	movs	r2, #8
 8006d02:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bc80      	pop	{r7}
 8006d0c:	4770      	bx	lr
	...

08006d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e272      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 8087 	beq.w	8006e3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d30:	4b92      	ldr	r3, [pc, #584]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f003 030c 	and.w	r3, r3, #12
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d00c      	beq.n	8006d56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d3c:	4b8f      	ldr	r3, [pc, #572]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f003 030c 	and.w	r3, r3, #12
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d112      	bne.n	8006d6e <HAL_RCC_OscConfig+0x5e>
 8006d48:	4b8c      	ldr	r3, [pc, #560]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d54:	d10b      	bne.n	8006d6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d56:	4b89      	ldr	r3, [pc, #548]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d06c      	beq.n	8006e3c <HAL_RCC_OscConfig+0x12c>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d168      	bne.n	8006e3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e24c      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d76:	d106      	bne.n	8006d86 <HAL_RCC_OscConfig+0x76>
 8006d78:	4b80      	ldr	r3, [pc, #512]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a7f      	ldr	r2, [pc, #508]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	e02e      	b.n	8006de4 <HAL_RCC_OscConfig+0xd4>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10c      	bne.n	8006da8 <HAL_RCC_OscConfig+0x98>
 8006d8e:	4b7b      	ldr	r3, [pc, #492]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a7a      	ldr	r2, [pc, #488]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006d94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	4b78      	ldr	r3, [pc, #480]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a77      	ldr	r2, [pc, #476]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006da0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	e01d      	b.n	8006de4 <HAL_RCC_OscConfig+0xd4>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006db0:	d10c      	bne.n	8006dcc <HAL_RCC_OscConfig+0xbc>
 8006db2:	4b72      	ldr	r3, [pc, #456]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a71      	ldr	r2, [pc, #452]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	4b6f      	ldr	r3, [pc, #444]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a6e      	ldr	r2, [pc, #440]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	e00b      	b.n	8006de4 <HAL_RCC_OscConfig+0xd4>
 8006dcc:	4b6b      	ldr	r3, [pc, #428]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a6a      	ldr	r2, [pc, #424]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	4b68      	ldr	r3, [pc, #416]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a67      	ldr	r2, [pc, #412]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006dde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006de2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d013      	beq.n	8006e14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dec:	f7fc f91a 	bl	8003024 <HAL_GetTick>
 8006df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006df4:	f7fc f916 	bl	8003024 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b64      	cmp	r3, #100	@ 0x64
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e200      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e06:	4b5d      	ldr	r3, [pc, #372]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0f0      	beq.n	8006df4 <HAL_RCC_OscConfig+0xe4>
 8006e12:	e014      	b.n	8006e3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e14:	f7fc f906 	bl	8003024 <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e1c:	f7fc f902 	bl	8003024 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b64      	cmp	r3, #100	@ 0x64
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e1ec      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e2e:	4b53      	ldr	r3, [pc, #332]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f0      	bne.n	8006e1c <HAL_RCC_OscConfig+0x10c>
 8006e3a:	e000      	b.n	8006e3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d063      	beq.n	8006f12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e4a:	4b4c      	ldr	r3, [pc, #304]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f003 030c 	and.w	r3, r3, #12
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00b      	beq.n	8006e6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006e56:	4b49      	ldr	r3, [pc, #292]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f003 030c 	and.w	r3, r3, #12
 8006e5e:	2b08      	cmp	r3, #8
 8006e60:	d11c      	bne.n	8006e9c <HAL_RCC_OscConfig+0x18c>
 8006e62:	4b46      	ldr	r3, [pc, #280]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d116      	bne.n	8006e9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e6e:	4b43      	ldr	r3, [pc, #268]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d005      	beq.n	8006e86 <HAL_RCC_OscConfig+0x176>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d001      	beq.n	8006e86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e1c0      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e86:	4b3d      	ldr	r3, [pc, #244]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	4939      	ldr	r1, [pc, #228]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e9a:	e03a      	b.n	8006f12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d020      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ea4:	4b36      	ldr	r3, [pc, #216]	@ (8006f80 <HAL_RCC_OscConfig+0x270>)
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eaa:	f7fc f8bb 	bl	8003024 <HAL_GetTick>
 8006eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eb0:	e008      	b.n	8006ec4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eb2:	f7fc f8b7 	bl	8003024 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d901      	bls.n	8006ec4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e1a1      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0f0      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	4927      	ldr	r1, [pc, #156]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	600b      	str	r3, [r1, #0]
 8006ee4:	e015      	b.n	8006f12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ee6:	4b26      	ldr	r3, [pc, #152]	@ (8006f80 <HAL_RCC_OscConfig+0x270>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eec:	f7fc f89a 	bl	8003024 <HAL_GetTick>
 8006ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ef4:	f7fc f896 	bl	8003024 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e180      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f06:	4b1d      	ldr	r3, [pc, #116]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f0      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d03a      	beq.n	8006f94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d019      	beq.n	8006f5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f26:	4b17      	ldr	r3, [pc, #92]	@ (8006f84 <HAL_RCC_OscConfig+0x274>)
 8006f28:	2201      	movs	r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f2c:	f7fc f87a 	bl	8003024 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f34:	f7fc f876 	bl	8003024 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e160      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f46:	4b0d      	ldr	r3, [pc, #52]	@ (8006f7c <HAL_RCC_OscConfig+0x26c>)
 8006f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0f0      	beq.n	8006f34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006f52:	2001      	movs	r0, #1
 8006f54:	f000 faba 	bl	80074cc <RCC_Delay>
 8006f58:	e01c      	b.n	8006f94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f84 <HAL_RCC_OscConfig+0x274>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f60:	f7fc f860 	bl	8003024 <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f66:	e00f      	b.n	8006f88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f68:	f7fc f85c 	bl	8003024 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d908      	bls.n	8006f88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e146      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
 8006f7a:	bf00      	nop
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	42420000 	.word	0x42420000
 8006f84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f88:	4b92      	ldr	r3, [pc, #584]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e9      	bne.n	8006f68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 80a6 	beq.w	80070ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fa6:	4b8b      	ldr	r3, [pc, #556]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10d      	bne.n	8006fce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fb2:	4b88      	ldr	r3, [pc, #544]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	4a87      	ldr	r2, [pc, #540]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8006fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fbc:	61d3      	str	r3, [r2, #28]
 8006fbe:	4b85      	ldr	r3, [pc, #532]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fc6:	60bb      	str	r3, [r7, #8]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fce:	4b82      	ldr	r3, [pc, #520]	@ (80071d8 <HAL_RCC_OscConfig+0x4c8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d118      	bne.n	800700c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fda:	4b7f      	ldr	r3, [pc, #508]	@ (80071d8 <HAL_RCC_OscConfig+0x4c8>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a7e      	ldr	r2, [pc, #504]	@ (80071d8 <HAL_RCC_OscConfig+0x4c8>)
 8006fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fe6:	f7fc f81d 	bl	8003024 <HAL_GetTick>
 8006fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fec:	e008      	b.n	8007000 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fee:	f7fc f819 	bl	8003024 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b64      	cmp	r3, #100	@ 0x64
 8006ffa:	d901      	bls.n	8007000 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e103      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007000:	4b75      	ldr	r3, [pc, #468]	@ (80071d8 <HAL_RCC_OscConfig+0x4c8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0f0      	beq.n	8006fee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d106      	bne.n	8007022 <HAL_RCC_OscConfig+0x312>
 8007014:	4b6f      	ldr	r3, [pc, #444]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	4a6e      	ldr	r2, [pc, #440]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 800701a:	f043 0301 	orr.w	r3, r3, #1
 800701e:	6213      	str	r3, [r2, #32]
 8007020:	e02d      	b.n	800707e <HAL_RCC_OscConfig+0x36e>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10c      	bne.n	8007044 <HAL_RCC_OscConfig+0x334>
 800702a:	4b6a      	ldr	r3, [pc, #424]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	4a69      	ldr	r2, [pc, #420]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	6213      	str	r3, [r2, #32]
 8007036:	4b67      	ldr	r3, [pc, #412]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	4a66      	ldr	r2, [pc, #408]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 800703c:	f023 0304 	bic.w	r3, r3, #4
 8007040:	6213      	str	r3, [r2, #32]
 8007042:	e01c      	b.n	800707e <HAL_RCC_OscConfig+0x36e>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	2b05      	cmp	r3, #5
 800704a:	d10c      	bne.n	8007066 <HAL_RCC_OscConfig+0x356>
 800704c:	4b61      	ldr	r3, [pc, #388]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	4a60      	ldr	r2, [pc, #384]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8007052:	f043 0304 	orr.w	r3, r3, #4
 8007056:	6213      	str	r3, [r2, #32]
 8007058:	4b5e      	ldr	r3, [pc, #376]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	4a5d      	ldr	r2, [pc, #372]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 800705e:	f043 0301 	orr.w	r3, r3, #1
 8007062:	6213      	str	r3, [r2, #32]
 8007064:	e00b      	b.n	800707e <HAL_RCC_OscConfig+0x36e>
 8007066:	4b5b      	ldr	r3, [pc, #364]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	4a5a      	ldr	r2, [pc, #360]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 800706c:	f023 0301 	bic.w	r3, r3, #1
 8007070:	6213      	str	r3, [r2, #32]
 8007072:	4b58      	ldr	r3, [pc, #352]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	4a57      	ldr	r2, [pc, #348]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8007078:	f023 0304 	bic.w	r3, r3, #4
 800707c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d015      	beq.n	80070b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007086:	f7fb ffcd 	bl	8003024 <HAL_GetTick>
 800708a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800708c:	e00a      	b.n	80070a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800708e:	f7fb ffc9 	bl	8003024 <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800709c:	4293      	cmp	r3, r2
 800709e:	d901      	bls.n	80070a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e0b1      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070a4:	4b4b      	ldr	r3, [pc, #300]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0ee      	beq.n	800708e <HAL_RCC_OscConfig+0x37e>
 80070b0:	e014      	b.n	80070dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070b2:	f7fb ffb7 	bl	8003024 <HAL_GetTick>
 80070b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070b8:	e00a      	b.n	80070d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ba:	f7fb ffb3 	bl	8003024 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d901      	bls.n	80070d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e09b      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070d0:	4b40      	ldr	r3, [pc, #256]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1ee      	bne.n	80070ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070dc:	7dfb      	ldrb	r3, [r7, #23]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d105      	bne.n	80070ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070e2:	4b3c      	ldr	r3, [pc, #240]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	4a3b      	ldr	r2, [pc, #236]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 80070e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 8087 	beq.w	8007206 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070f8:	4b36      	ldr	r3, [pc, #216]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f003 030c 	and.w	r3, r3, #12
 8007100:	2b08      	cmp	r3, #8
 8007102:	d061      	beq.n	80071c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d146      	bne.n	800719a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800710c:	4b33      	ldr	r3, [pc, #204]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007112:	f7fb ff87 	bl	8003024 <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800711a:	f7fb ff83 	bl	8003024 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e06d      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800712c:	4b29      	ldr	r3, [pc, #164]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f0      	bne.n	800711a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007140:	d108      	bne.n	8007154 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007142:	4b24      	ldr	r3, [pc, #144]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	4921      	ldr	r1, [pc, #132]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8007150:	4313      	orrs	r3, r2
 8007152:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007154:	4b1f      	ldr	r3, [pc, #124]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a19      	ldr	r1, [r3, #32]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007164:	430b      	orrs	r3, r1
 8007166:	491b      	ldr	r1, [pc, #108]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 8007168:	4313      	orrs	r3, r2
 800716a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800716c:	4b1b      	ldr	r3, [pc, #108]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800716e:	2201      	movs	r2, #1
 8007170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007172:	f7fb ff57 	bl	8003024 <HAL_GetTick>
 8007176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007178:	e008      	b.n	800718c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800717a:	f7fb ff53 	bl	8003024 <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	2b02      	cmp	r3, #2
 8007186:	d901      	bls.n	800718c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e03d      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800718c:	4b11      	ldr	r3, [pc, #68]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d0f0      	beq.n	800717a <HAL_RCC_OscConfig+0x46a>
 8007198:	e035      	b.n	8007206 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800719a:	4b10      	ldr	r3, [pc, #64]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071a0:	f7fb ff40 	bl	8003024 <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a8:	f7fb ff3c 	bl	8003024 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e026      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071ba:	4b06      	ldr	r3, [pc, #24]	@ (80071d4 <HAL_RCC_OscConfig+0x4c4>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1f0      	bne.n	80071a8 <HAL_RCC_OscConfig+0x498>
 80071c6:	e01e      	b.n	8007206 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d107      	bne.n	80071e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e019      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
 80071d4:	40021000 	.word	0x40021000
 80071d8:	40007000 	.word	0x40007000
 80071dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80071e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007210 <HAL_RCC_OscConfig+0x500>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d106      	bne.n	8007202 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071fe:	429a      	cmp	r2, r3
 8007200:	d001      	beq.n	8007206 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e000      	b.n	8007208 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	40021000 	.word	0x40021000

08007214 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e0d0      	b.n	80073ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007228:	4b6a      	ldr	r3, [pc, #424]	@ (80073d4 <HAL_RCC_ClockConfig+0x1c0>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0307 	and.w	r3, r3, #7
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	429a      	cmp	r2, r3
 8007234:	d910      	bls.n	8007258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007236:	4b67      	ldr	r3, [pc, #412]	@ (80073d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f023 0207 	bic.w	r2, r3, #7
 800723e:	4965      	ldr	r1, [pc, #404]	@ (80073d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	4313      	orrs	r3, r2
 8007244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007246:	4b63      	ldr	r3, [pc, #396]	@ (80073d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0307 	and.w	r3, r3, #7
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	d001      	beq.n	8007258 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e0b8      	b.n	80073ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d020      	beq.n	80072a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007270:	4b59      	ldr	r3, [pc, #356]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	4a58      	ldr	r2, [pc, #352]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007276:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800727a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0308 	and.w	r3, r3, #8
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007288:	4b53      	ldr	r3, [pc, #332]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	4a52      	ldr	r2, [pc, #328]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 800728e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007292:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007294:	4b50      	ldr	r3, [pc, #320]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	494d      	ldr	r1, [pc, #308]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d040      	beq.n	8007334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d107      	bne.n	80072ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072ba:	4b47      	ldr	r3, [pc, #284]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d115      	bne.n	80072f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e07f      	b.n	80073ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d107      	bne.n	80072e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072d2:	4b41      	ldr	r3, [pc, #260]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d109      	bne.n	80072f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e073      	b.n	80073ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e2:	4b3d      	ldr	r3, [pc, #244]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e06b      	b.n	80073ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072f2:	4b39      	ldr	r3, [pc, #228]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f023 0203 	bic.w	r2, r3, #3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	4936      	ldr	r1, [pc, #216]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007300:	4313      	orrs	r3, r2
 8007302:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007304:	f7fb fe8e 	bl	8003024 <HAL_GetTick>
 8007308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800730a:	e00a      	b.n	8007322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800730c:	f7fb fe8a 	bl	8003024 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800731a:	4293      	cmp	r3, r2
 800731c:	d901      	bls.n	8007322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e053      	b.n	80073ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007322:	4b2d      	ldr	r3, [pc, #180]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f003 020c 	and.w	r2, r3, #12
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	429a      	cmp	r2, r3
 8007332:	d1eb      	bne.n	800730c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007334:	4b27      	ldr	r3, [pc, #156]	@ (80073d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	429a      	cmp	r2, r3
 8007340:	d210      	bcs.n	8007364 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007342:	4b24      	ldr	r3, [pc, #144]	@ (80073d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f023 0207 	bic.w	r2, r3, #7
 800734a:	4922      	ldr	r1, [pc, #136]	@ (80073d4 <HAL_RCC_ClockConfig+0x1c0>)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	4313      	orrs	r3, r2
 8007350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007352:	4b20      	ldr	r3, [pc, #128]	@ (80073d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	429a      	cmp	r2, r3
 800735e:	d001      	beq.n	8007364 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e032      	b.n	80073ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b00      	cmp	r3, #0
 800736e:	d008      	beq.n	8007382 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007370:	4b19      	ldr	r3, [pc, #100]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	4916      	ldr	r1, [pc, #88]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 800737e:	4313      	orrs	r3, r2
 8007380:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b00      	cmp	r3, #0
 800738c:	d009      	beq.n	80073a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800738e:	4b12      	ldr	r3, [pc, #72]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	490e      	ldr	r1, [pc, #56]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073a2:	f000 f821 	bl	80073e8 <HAL_RCC_GetSysClockFreq>
 80073a6:	4602      	mov	r2, r0
 80073a8:	4b0b      	ldr	r3, [pc, #44]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	091b      	lsrs	r3, r3, #4
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	490a      	ldr	r1, [pc, #40]	@ (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80073b4:	5ccb      	ldrb	r3, [r1, r3]
 80073b6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ba:	4a09      	ldr	r2, [pc, #36]	@ (80073e0 <HAL_RCC_ClockConfig+0x1cc>)
 80073bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80073be:	4b09      	ldr	r3, [pc, #36]	@ (80073e4 <HAL_RCC_ClockConfig+0x1d0>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fb fdec 	bl	8002fa0 <HAL_InitTick>

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	40022000 	.word	0x40022000
 80073d8:	40021000 	.word	0x40021000
 80073dc:	08008908 	.word	0x08008908
 80073e0:	20000000 	.word	0x20000000
 80073e4:	20000004 	.word	0x20000004

080073e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60fb      	str	r3, [r7, #12]
 80073f2:	2300      	movs	r3, #0
 80073f4:	60bb      	str	r3, [r7, #8]
 80073f6:	2300      	movs	r3, #0
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	2300      	movs	r3, #0
 80073fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007402:	4b1e      	ldr	r3, [pc, #120]	@ (800747c <HAL_RCC_GetSysClockFreq+0x94>)
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f003 030c 	and.w	r3, r3, #12
 800740e:	2b04      	cmp	r3, #4
 8007410:	d002      	beq.n	8007418 <HAL_RCC_GetSysClockFreq+0x30>
 8007412:	2b08      	cmp	r3, #8
 8007414:	d003      	beq.n	800741e <HAL_RCC_GetSysClockFreq+0x36>
 8007416:	e027      	b.n	8007468 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007418:	4b19      	ldr	r3, [pc, #100]	@ (8007480 <HAL_RCC_GetSysClockFreq+0x98>)
 800741a:	613b      	str	r3, [r7, #16]
      break;
 800741c:	e027      	b.n	800746e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	0c9b      	lsrs	r3, r3, #18
 8007422:	f003 030f 	and.w	r3, r3, #15
 8007426:	4a17      	ldr	r2, [pc, #92]	@ (8007484 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007428:	5cd3      	ldrb	r3, [r2, r3]
 800742a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d010      	beq.n	8007458 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007436:	4b11      	ldr	r3, [pc, #68]	@ (800747c <HAL_RCC_GetSysClockFreq+0x94>)
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	0c5b      	lsrs	r3, r3, #17
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	4a11      	ldr	r2, [pc, #68]	@ (8007488 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007442:	5cd3      	ldrb	r3, [r2, r3]
 8007444:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a0d      	ldr	r2, [pc, #52]	@ (8007480 <HAL_RCC_GetSysClockFreq+0x98>)
 800744a:	fb03 f202 	mul.w	r2, r3, r2
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	fbb2 f3f3 	udiv	r3, r2, r3
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	e004      	b.n	8007462 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a0c      	ldr	r2, [pc, #48]	@ (800748c <HAL_RCC_GetSysClockFreq+0xa4>)
 800745c:	fb02 f303 	mul.w	r3, r2, r3
 8007460:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	613b      	str	r3, [r7, #16]
      break;
 8007466:	e002      	b.n	800746e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007468:	4b05      	ldr	r3, [pc, #20]	@ (8007480 <HAL_RCC_GetSysClockFreq+0x98>)
 800746a:	613b      	str	r3, [r7, #16]
      break;
 800746c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800746e:	693b      	ldr	r3, [r7, #16]
}
 8007470:	4618      	mov	r0, r3
 8007472:	371c      	adds	r7, #28
 8007474:	46bd      	mov	sp, r7
 8007476:	bc80      	pop	{r7}
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40021000 	.word	0x40021000
 8007480:	007a1200 	.word	0x007a1200
 8007484:	08008920 	.word	0x08008920
 8007488:	08008930 	.word	0x08008930
 800748c:	003d0900 	.word	0x003d0900

08007490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007490:	b480      	push	{r7}
 8007492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007494:	4b02      	ldr	r3, [pc, #8]	@ (80074a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8007496:	681b      	ldr	r3, [r3, #0]
}
 8007498:	4618      	mov	r0, r3
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr
 80074a0:	20000000 	.word	0x20000000

080074a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80074a8:	f7ff fff2 	bl	8007490 <HAL_RCC_GetHCLKFreq>
 80074ac:	4602      	mov	r2, r0
 80074ae:	4b05      	ldr	r3, [pc, #20]	@ (80074c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	0a1b      	lsrs	r3, r3, #8
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	4903      	ldr	r1, [pc, #12]	@ (80074c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074ba:	5ccb      	ldrb	r3, [r1, r3]
 80074bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	40021000 	.word	0x40021000
 80074c8:	08008918 	.word	0x08008918

080074cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80074d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007500 <RCC_Delay+0x34>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a0a      	ldr	r2, [pc, #40]	@ (8007504 <RCC_Delay+0x38>)
 80074da:	fba2 2303 	umull	r2, r3, r2, r3
 80074de:	0a5b      	lsrs	r3, r3, #9
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	fb02 f303 	mul.w	r3, r2, r3
 80074e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80074e8:	bf00      	nop
  }
  while (Delay --);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	1e5a      	subs	r2, r3, #1
 80074ee:	60fa      	str	r2, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1f9      	bne.n	80074e8 <RCC_Delay+0x1c>
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr
 8007500:	20000000 	.word	0x20000000
 8007504:	10624dd3 	.word	0x10624dd3

08007508 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	613b      	str	r3, [r7, #16]
 8007514:	2300      	movs	r3, #0
 8007516:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d07d      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007524:	2300      	movs	r3, #0
 8007526:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007528:	4b4f      	ldr	r3, [pc, #316]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10d      	bne.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007534:	4b4c      	ldr	r3, [pc, #304]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	4a4b      	ldr	r2, [pc, #300]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800753a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800753e:	61d3      	str	r3, [r2, #28]
 8007540:	4b49      	ldr	r3, [pc, #292]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800754c:	2301      	movs	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007550:	4b46      	ldr	r3, [pc, #280]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007558:	2b00      	cmp	r3, #0
 800755a:	d118      	bne.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800755c:	4b43      	ldr	r3, [pc, #268]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a42      	ldr	r2, [pc, #264]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007566:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007568:	f7fb fd5c 	bl	8003024 <HAL_GetTick>
 800756c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800756e:	e008      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007570:	f7fb fd58 	bl	8003024 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b64      	cmp	r3, #100	@ 0x64
 800757c:	d901      	bls.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e06d      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007582:	4b3a      	ldr	r3, [pc, #232]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0f0      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800758e:	4b36      	ldr	r3, [pc, #216]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007596:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d02e      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d027      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075ac:	4b2e      	ldr	r3, [pc, #184]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075b6:	4b2e      	ldr	r3, [pc, #184]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80075b8:	2201      	movs	r2, #1
 80075ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075bc:	4b2c      	ldr	r3, [pc, #176]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80075be:	2200      	movs	r2, #0
 80075c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80075c2:	4a29      	ldr	r2, [pc, #164]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d014      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075d2:	f7fb fd27 	bl	8003024 <HAL_GetTick>
 80075d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075d8:	e00a      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075da:	f7fb fd23 	bl	8003024 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d901      	bls.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e036      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d0ee      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075fe:	6a1b      	ldr	r3, [r3, #32]
 8007600:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	4917      	ldr	r1, [pc, #92]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800760a:	4313      	orrs	r3, r2
 800760c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800760e:	7dfb      	ldrb	r3, [r7, #23]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d105      	bne.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007614:	4b14      	ldr	r3, [pc, #80]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	4a13      	ldr	r2, [pc, #76]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800761a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800761e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d008      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800762c:	4b0e      	ldr	r3, [pc, #56]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	490b      	ldr	r1, [pc, #44]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800763a:	4313      	orrs	r3, r2
 800763c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0310 	and.w	r3, r3, #16
 8007646:	2b00      	cmp	r3, #0
 8007648:	d008      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800764a:	4b07      	ldr	r3, [pc, #28]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	4904      	ldr	r1, [pc, #16]	@ (8007668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007658:	4313      	orrs	r3, r2
 800765a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40021000 	.word	0x40021000
 800766c:	40007000 	.word	0x40007000
 8007670:	42420440 	.word	0x42420440

08007674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e041      	b.n	800770a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d106      	bne.n	80076a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7fb fbdc 	bl	8002e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3304      	adds	r3, #4
 80076b0:	4619      	mov	r1, r3
 80076b2:	4610      	mov	r0, r2
 80076b4:	f000 fc18 	bl	8007ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
	...

08007714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b01      	cmp	r3, #1
 8007726:	d001      	beq.n	800772c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e03a      	b.n	80077a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0201 	orr.w	r2, r2, #1
 8007742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a18      	ldr	r2, [pc, #96]	@ (80077ac <HAL_TIM_Base_Start_IT+0x98>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d00e      	beq.n	800776c <HAL_TIM_Base_Start_IT+0x58>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007756:	d009      	beq.n	800776c <HAL_TIM_Base_Start_IT+0x58>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a14      	ldr	r2, [pc, #80]	@ (80077b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d004      	beq.n	800776c <HAL_TIM_Base_Start_IT+0x58>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a13      	ldr	r2, [pc, #76]	@ (80077b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d111      	bne.n	8007790 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b06      	cmp	r3, #6
 800777c:	d010      	beq.n	80077a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f042 0201 	orr.w	r2, r2, #1
 800778c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800778e:	e007      	b.n	80077a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f042 0201 	orr.w	r2, r2, #1
 800779e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bc80      	pop	{r7}
 80077aa:	4770      	bx	lr
 80077ac:	40012c00 	.word	0x40012c00
 80077b0:	40000400 	.word	0x40000400
 80077b4:	40000800 	.word	0x40000800

080077b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e041      	b.n	800784e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f839 	bl	8007856 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	4610      	mov	r0, r2
 80077f8:	f000 fb76 	bl	8007ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	bc80      	pop	{r7}
 8007866:	4770      	bx	lr

08007868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d109      	bne.n	800788c <HAL_TIM_PWM_Start+0x24>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b01      	cmp	r3, #1
 8007882:	bf14      	ite	ne
 8007884:	2301      	movne	r3, #1
 8007886:	2300      	moveq	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	e022      	b.n	80078d2 <HAL_TIM_PWM_Start+0x6a>
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b04      	cmp	r3, #4
 8007890:	d109      	bne.n	80078a6 <HAL_TIM_PWM_Start+0x3e>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b01      	cmp	r3, #1
 800789c:	bf14      	ite	ne
 800789e:	2301      	movne	r3, #1
 80078a0:	2300      	moveq	r3, #0
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	e015      	b.n	80078d2 <HAL_TIM_PWM_Start+0x6a>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d109      	bne.n	80078c0 <HAL_TIM_PWM_Start+0x58>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	bf14      	ite	ne
 80078b8:	2301      	movne	r3, #1
 80078ba:	2300      	moveq	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	e008      	b.n	80078d2 <HAL_TIM_PWM_Start+0x6a>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	bf14      	ite	ne
 80078cc:	2301      	movne	r3, #1
 80078ce:	2300      	moveq	r3, #0
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e05e      	b.n	8007998 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d104      	bne.n	80078ea <HAL_TIM_PWM_Start+0x82>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078e8:	e013      	b.n	8007912 <HAL_TIM_PWM_Start+0xaa>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d104      	bne.n	80078fa <HAL_TIM_PWM_Start+0x92>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078f8:	e00b      	b.n	8007912 <HAL_TIM_PWM_Start+0xaa>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d104      	bne.n	800790a <HAL_TIM_PWM_Start+0xa2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007908:	e003      	b.n	8007912 <HAL_TIM_PWM_Start+0xaa>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2202      	movs	r2, #2
 800790e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2201      	movs	r2, #1
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fd70 	bl	8008400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1e      	ldr	r2, [pc, #120]	@ (80079a0 <HAL_TIM_PWM_Start+0x138>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d107      	bne.n	800793a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007938:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a18      	ldr	r2, [pc, #96]	@ (80079a0 <HAL_TIM_PWM_Start+0x138>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d00e      	beq.n	8007962 <HAL_TIM_PWM_Start+0xfa>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800794c:	d009      	beq.n	8007962 <HAL_TIM_PWM_Start+0xfa>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a14      	ldr	r2, [pc, #80]	@ (80079a4 <HAL_TIM_PWM_Start+0x13c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d004      	beq.n	8007962 <HAL_TIM_PWM_Start+0xfa>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a12      	ldr	r2, [pc, #72]	@ (80079a8 <HAL_TIM_PWM_Start+0x140>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d111      	bne.n	8007986 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b06      	cmp	r3, #6
 8007972:	d010      	beq.n	8007996 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0201 	orr.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007984:	e007      	b.n	8007996 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f042 0201 	orr.w	r2, r2, #1
 8007994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	40012c00 	.word	0x40012c00
 80079a4:	40000400 	.word	0x40000400
 80079a8:	40000800 	.word	0x40000800

080079ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d020      	beq.n	8007a10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d01b      	beq.n	8007a10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f06f 0202 	mvn.w	r2, #2
 80079e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	f003 0303 	and.w	r3, r3, #3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fa5a 	bl	8007eb0 <HAL_TIM_IC_CaptureCallback>
 80079fc:	e005      	b.n	8007a0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa4d 	bl	8007e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fa5c 	bl	8007ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f003 0304 	and.w	r3, r3, #4
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d020      	beq.n	8007a5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01b      	beq.n	8007a5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f06f 0204 	mvn.w	r2, #4
 8007a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2202      	movs	r2, #2
 8007a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa34 	bl	8007eb0 <HAL_TIM_IC_CaptureCallback>
 8007a48:	e005      	b.n	8007a56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fa27 	bl	8007e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fa36 	bl	8007ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f003 0308 	and.w	r3, r3, #8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d020      	beq.n	8007aa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f003 0308 	and.w	r3, r3, #8
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01b      	beq.n	8007aa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f06f 0208 	mvn.w	r2, #8
 8007a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2204      	movs	r2, #4
 8007a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa0e 	bl	8007eb0 <HAL_TIM_IC_CaptureCallback>
 8007a94:	e005      	b.n	8007aa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fa01 	bl	8007e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fa10 	bl	8007ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f003 0310 	and.w	r3, r3, #16
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d020      	beq.n	8007af4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d01b      	beq.n	8007af4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f06f 0210 	mvn.w	r2, #16
 8007ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2208      	movs	r2, #8
 8007aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f9e8 	bl	8007eb0 <HAL_TIM_IC_CaptureCallback>
 8007ae0:	e005      	b.n	8007aee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f9db 	bl	8007e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f9ea 	bl	8007ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00c      	beq.n	8007b18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d007      	beq.n	8007b18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f06f 0201 	mvn.w	r2, #1
 8007b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7fa fde2 	bl	80026dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00c      	beq.n	8007b3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d007      	beq.n	8007b3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fced 	bl	8008516 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00c      	beq.n	8007b60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d007      	beq.n	8007b60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f9ba 	bl	8007ed4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00c      	beq.n	8007b84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f003 0320 	and.w	r3, r3, #32
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d007      	beq.n	8007b84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f06f 0220 	mvn.w	r2, #32
 8007b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fcc0 	bl	8008504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d101      	bne.n	8007baa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e0ae      	b.n	8007d08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b0c      	cmp	r3, #12
 8007bb6:	f200 809f 	bhi.w	8007cf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007bba:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007bf5 	.word	0x08007bf5
 8007bc4:	08007cf9 	.word	0x08007cf9
 8007bc8:	08007cf9 	.word	0x08007cf9
 8007bcc:	08007cf9 	.word	0x08007cf9
 8007bd0:	08007c35 	.word	0x08007c35
 8007bd4:	08007cf9 	.word	0x08007cf9
 8007bd8:	08007cf9 	.word	0x08007cf9
 8007bdc:	08007cf9 	.word	0x08007cf9
 8007be0:	08007c77 	.word	0x08007c77
 8007be4:	08007cf9 	.word	0x08007cf9
 8007be8:	08007cf9 	.word	0x08007cf9
 8007bec:	08007cf9 	.word	0x08007cf9
 8007bf0:	08007cb7 	.word	0x08007cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 f9e2 	bl	8007fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	699a      	ldr	r2, [r3, #24]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0208 	orr.w	r2, r2, #8
 8007c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699a      	ldr	r2, [r3, #24]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0204 	bic.w	r2, r2, #4
 8007c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6999      	ldr	r1, [r3, #24]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	691a      	ldr	r2, [r3, #16]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	619a      	str	r2, [r3, #24]
      break;
 8007c32:	e064      	b.n	8007cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68b9      	ldr	r1, [r7, #8]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fa28 	bl	8008090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699a      	ldr	r2, [r3, #24]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	699a      	ldr	r2, [r3, #24]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6999      	ldr	r1, [r3, #24]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	021a      	lsls	r2, r3, #8
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	619a      	str	r2, [r3, #24]
      break;
 8007c74:	e043      	b.n	8007cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68b9      	ldr	r1, [r7, #8]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 fa71 	bl	8008164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69da      	ldr	r2, [r3, #28]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f042 0208 	orr.w	r2, r2, #8
 8007c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69da      	ldr	r2, [r3, #28]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 0204 	bic.w	r2, r2, #4
 8007ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69d9      	ldr	r1, [r3, #28]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	691a      	ldr	r2, [r3, #16]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	61da      	str	r2, [r3, #28]
      break;
 8007cb4:	e023      	b.n	8007cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68b9      	ldr	r1, [r7, #8]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 fabb 	bl	8008238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	69da      	ldr	r2, [r3, #28]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	69da      	ldr	r2, [r3, #28]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69d9      	ldr	r1, [r3, #28]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	021a      	lsls	r2, r3, #8
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	61da      	str	r2, [r3, #28]
      break;
 8007cf6:	e002      	b.n	8007cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8007cfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3718      	adds	r7, #24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_TIM_ConfigClockSource+0x1c>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e0b4      	b.n	8007e96 <HAL_TIM_ConfigClockSource+0x186>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d64:	d03e      	beq.n	8007de4 <HAL_TIM_ConfigClockSource+0xd4>
 8007d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d6a:	f200 8087 	bhi.w	8007e7c <HAL_TIM_ConfigClockSource+0x16c>
 8007d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d72:	f000 8086 	beq.w	8007e82 <HAL_TIM_ConfigClockSource+0x172>
 8007d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d7a:	d87f      	bhi.n	8007e7c <HAL_TIM_ConfigClockSource+0x16c>
 8007d7c:	2b70      	cmp	r3, #112	@ 0x70
 8007d7e:	d01a      	beq.n	8007db6 <HAL_TIM_ConfigClockSource+0xa6>
 8007d80:	2b70      	cmp	r3, #112	@ 0x70
 8007d82:	d87b      	bhi.n	8007e7c <HAL_TIM_ConfigClockSource+0x16c>
 8007d84:	2b60      	cmp	r3, #96	@ 0x60
 8007d86:	d050      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x11a>
 8007d88:	2b60      	cmp	r3, #96	@ 0x60
 8007d8a:	d877      	bhi.n	8007e7c <HAL_TIM_ConfigClockSource+0x16c>
 8007d8c:	2b50      	cmp	r3, #80	@ 0x50
 8007d8e:	d03c      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0xfa>
 8007d90:	2b50      	cmp	r3, #80	@ 0x50
 8007d92:	d873      	bhi.n	8007e7c <HAL_TIM_ConfigClockSource+0x16c>
 8007d94:	2b40      	cmp	r3, #64	@ 0x40
 8007d96:	d058      	beq.n	8007e4a <HAL_TIM_ConfigClockSource+0x13a>
 8007d98:	2b40      	cmp	r3, #64	@ 0x40
 8007d9a:	d86f      	bhi.n	8007e7c <HAL_TIM_ConfigClockSource+0x16c>
 8007d9c:	2b30      	cmp	r3, #48	@ 0x30
 8007d9e:	d064      	beq.n	8007e6a <HAL_TIM_ConfigClockSource+0x15a>
 8007da0:	2b30      	cmp	r3, #48	@ 0x30
 8007da2:	d86b      	bhi.n	8007e7c <HAL_TIM_ConfigClockSource+0x16c>
 8007da4:	2b20      	cmp	r3, #32
 8007da6:	d060      	beq.n	8007e6a <HAL_TIM_ConfigClockSource+0x15a>
 8007da8:	2b20      	cmp	r3, #32
 8007daa:	d867      	bhi.n	8007e7c <HAL_TIM_ConfigClockSource+0x16c>
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d05c      	beq.n	8007e6a <HAL_TIM_ConfigClockSource+0x15a>
 8007db0:	2b10      	cmp	r3, #16
 8007db2:	d05a      	beq.n	8007e6a <HAL_TIM_ConfigClockSource+0x15a>
 8007db4:	e062      	b.n	8007e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007dc6:	f000 fafc 	bl	80083c2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	609a      	str	r2, [r3, #8]
      break;
 8007de2:	e04f      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007df4:	f000 fae5 	bl	80083c2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689a      	ldr	r2, [r3, #8]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e06:	609a      	str	r2, [r3, #8]
      break;
 8007e08:	e03c      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e16:	461a      	mov	r2, r3
 8007e18:	f000 fa5c 	bl	80082d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2150      	movs	r1, #80	@ 0x50
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fab3 	bl	800838e <TIM_ITRx_SetConfig>
      break;
 8007e28:	e02c      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e36:	461a      	mov	r2, r3
 8007e38:	f000 fa7a 	bl	8008330 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2160      	movs	r1, #96	@ 0x60
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 faa3 	bl	800838e <TIM_ITRx_SetConfig>
      break;
 8007e48:	e01c      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e56:	461a      	mov	r2, r3
 8007e58:	f000 fa3c 	bl	80082d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2140      	movs	r1, #64	@ 0x40
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fa93 	bl	800838e <TIM_ITRx_SetConfig>
      break;
 8007e68:	e00c      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4619      	mov	r1, r3
 8007e74:	4610      	mov	r0, r2
 8007e76:	f000 fa8a 	bl	800838e <TIM_ITRx_SetConfig>
      break;
 8007e7a:	e003      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e80:	e000      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr

08007eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bc80      	pop	{r7}
 8007ec0:	4770      	bx	lr

08007ec2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b083      	sub	sp, #12
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc80      	pop	{r7}
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc80      	pop	{r7}
 8007ee4:	4770      	bx	lr
	...

08007ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a2f      	ldr	r2, [pc, #188]	@ (8007fb8 <TIM_Base_SetConfig+0xd0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00b      	beq.n	8007f18 <TIM_Base_SetConfig+0x30>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f06:	d007      	beq.n	8007f18 <TIM_Base_SetConfig+0x30>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a2c      	ldr	r2, [pc, #176]	@ (8007fbc <TIM_Base_SetConfig+0xd4>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d003      	beq.n	8007f18 <TIM_Base_SetConfig+0x30>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a2b      	ldr	r2, [pc, #172]	@ (8007fc0 <TIM_Base_SetConfig+0xd8>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d108      	bne.n	8007f2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a22      	ldr	r2, [pc, #136]	@ (8007fb8 <TIM_Base_SetConfig+0xd0>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00b      	beq.n	8007f4a <TIM_Base_SetConfig+0x62>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f38:	d007      	beq.n	8007f4a <TIM_Base_SetConfig+0x62>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007fbc <TIM_Base_SetConfig+0xd4>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d003      	beq.n	8007f4a <TIM_Base_SetConfig+0x62>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a1e      	ldr	r2, [pc, #120]	@ (8007fc0 <TIM_Base_SetConfig+0xd8>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d108      	bne.n	8007f5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	689a      	ldr	r2, [r3, #8]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a0d      	ldr	r2, [pc, #52]	@ (8007fb8 <TIM_Base_SetConfig+0xd0>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d103      	bne.n	8007f90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	691a      	ldr	r2, [r3, #16]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d005      	beq.n	8007fae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	f023 0201 	bic.w	r2, r3, #1
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	611a      	str	r2, [r3, #16]
  }
}
 8007fae:	bf00      	nop
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bc80      	pop	{r7}
 8007fb6:	4770      	bx	lr
 8007fb8:	40012c00 	.word	0x40012c00
 8007fbc:	40000400 	.word	0x40000400
 8007fc0:	40000800 	.word	0x40000800

08007fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	f023 0201 	bic.w	r2, r3, #1
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 0303 	bic.w	r3, r3, #3
 8007ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f023 0302 	bic.w	r3, r3, #2
 800800c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	4313      	orrs	r3, r2
 8008016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a1c      	ldr	r2, [pc, #112]	@ (800808c <TIM_OC1_SetConfig+0xc8>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d10c      	bne.n	800803a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f023 0308 	bic.w	r3, r3, #8
 8008026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f023 0304 	bic.w	r3, r3, #4
 8008038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a13      	ldr	r2, [pc, #76]	@ (800808c <TIM_OC1_SetConfig+0xc8>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d111      	bne.n	8008066 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	4313      	orrs	r3, r2
 800805a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	4313      	orrs	r3, r2
 8008064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	621a      	str	r2, [r3, #32]
}
 8008080:	bf00      	nop
 8008082:	371c      	adds	r7, #28
 8008084:	46bd      	mov	sp, r7
 8008086:	bc80      	pop	{r7}
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	40012c00 	.word	0x40012c00

08008090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008090:	b480      	push	{r7}
 8008092:	b087      	sub	sp, #28
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	f023 0210 	bic.w	r2, r3, #16
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	021b      	lsls	r3, r3, #8
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f023 0320 	bic.w	r3, r3, #32
 80080da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	011b      	lsls	r3, r3, #4
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a1d      	ldr	r2, [pc, #116]	@ (8008160 <TIM_OC2_SetConfig+0xd0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d10d      	bne.n	800810c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	011b      	lsls	r3, r3, #4
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	4313      	orrs	r3, r2
 8008102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800810a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a14      	ldr	r2, [pc, #80]	@ (8008160 <TIM_OC2_SetConfig+0xd0>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d113      	bne.n	800813c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800811a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	4313      	orrs	r3, r2
 800813a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	621a      	str	r2, [r3, #32]
}
 8008156:	bf00      	nop
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	bc80      	pop	{r7}
 800815e:	4770      	bx	lr
 8008160:	40012c00 	.word	0x40012c00

08008164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a1b      	ldr	r3, [r3, #32]
 8008178:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 0303 	bic.w	r3, r3, #3
 800819a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	021b      	lsls	r3, r3, #8
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008234 <TIM_OC3_SetConfig+0xd0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d10d      	bne.n	80081de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	021b      	lsls	r3, r3, #8
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a14      	ldr	r2, [pc, #80]	@ (8008234 <TIM_OC3_SetConfig+0xd0>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d113      	bne.n	800820e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	4313      	orrs	r3, r2
 8008200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	011b      	lsls	r3, r3, #4
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4313      	orrs	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	621a      	str	r2, [r3, #32]
}
 8008228:	bf00      	nop
 800822a:	371c      	adds	r7, #28
 800822c:	46bd      	mov	sp, r7
 800822e:	bc80      	pop	{r7}
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	40012c00 	.word	0x40012c00

08008238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a1b      	ldr	r3, [r3, #32]
 800824c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800826e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	021b      	lsls	r3, r3, #8
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	4313      	orrs	r3, r2
 800827a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	031b      	lsls	r3, r3, #12
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	4313      	orrs	r3, r2
 800828e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a0f      	ldr	r2, [pc, #60]	@ (80082d0 <TIM_OC4_SetConfig+0x98>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d109      	bne.n	80082ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800829e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	019b      	lsls	r3, r3, #6
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	621a      	str	r2, [r3, #32]
}
 80082c6:	bf00      	nop
 80082c8:	371c      	adds	r7, #28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bc80      	pop	{r7}
 80082ce:	4770      	bx	lr
 80082d0:	40012c00 	.word	0x40012c00

080082d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	f023 0201 	bic.w	r2, r3, #1
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	011b      	lsls	r3, r3, #4
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	4313      	orrs	r3, r2
 8008308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f023 030a 	bic.w	r3, r3, #10
 8008310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4313      	orrs	r3, r2
 8008318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	621a      	str	r2, [r3, #32]
}
 8008326:	bf00      	nop
 8008328:	371c      	adds	r7, #28
 800832a:	46bd      	mov	sp, r7
 800832c:	bc80      	pop	{r7}
 800832e:	4770      	bx	lr

08008330 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008330:	b480      	push	{r7}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	f023 0210 	bic.w	r2, r3, #16
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800835a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	031b      	lsls	r3, r3, #12
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	4313      	orrs	r3, r2
 8008364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800836c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	011b      	lsls	r3, r3, #4
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	4313      	orrs	r3, r2
 8008376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	621a      	str	r2, [r3, #32]
}
 8008384:	bf00      	nop
 8008386:	371c      	adds	r7, #28
 8008388:	46bd      	mov	sp, r7
 800838a:	bc80      	pop	{r7}
 800838c:	4770      	bx	lr

0800838e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800838e:	b480      	push	{r7}
 8008390:	b085      	sub	sp, #20
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	f043 0307 	orr.w	r3, r3, #7
 80083b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	609a      	str	r2, [r3, #8]
}
 80083b8:	bf00      	nop
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc80      	pop	{r7}
 80083c0:	4770      	bx	lr

080083c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b087      	sub	sp, #28
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	607a      	str	r2, [r7, #4]
 80083ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	021a      	lsls	r2, r3, #8
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	431a      	orrs	r2, r3
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	609a      	str	r2, [r3, #8]
}
 80083f6:	bf00      	nop
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bc80      	pop	{r7}
 80083fe:	4770      	bx	lr

08008400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008400:	b480      	push	{r7}
 8008402:	b087      	sub	sp, #28
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f003 031f 	and.w	r3, r3, #31
 8008412:	2201      	movs	r2, #1
 8008414:	fa02 f303 	lsl.w	r3, r2, r3
 8008418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6a1a      	ldr	r2, [r3, #32]
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	43db      	mvns	r3, r3
 8008422:	401a      	ands	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6a1a      	ldr	r2, [r3, #32]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f003 031f 	and.w	r3, r3, #31
 8008432:	6879      	ldr	r1, [r7, #4]
 8008434:	fa01 f303 	lsl.w	r3, r1, r3
 8008438:	431a      	orrs	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	621a      	str	r2, [r3, #32]
}
 800843e:	bf00      	nop
 8008440:	371c      	adds	r7, #28
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr

08008448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008458:	2b01      	cmp	r3, #1
 800845a:	d101      	bne.n	8008460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800845c:	2302      	movs	r3, #2
 800845e:	e046      	b.n	80084ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a16      	ldr	r2, [pc, #88]	@ (80084f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d00e      	beq.n	80084c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ac:	d009      	beq.n	80084c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a12      	ldr	r2, [pc, #72]	@ (80084fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d004      	beq.n	80084c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a10      	ldr	r2, [pc, #64]	@ (8008500 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d10c      	bne.n	80084dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bc80      	pop	{r7}
 80084f6:	4770      	bx	lr
 80084f8:	40012c00 	.word	0x40012c00
 80084fc:	40000400 	.word	0x40000400
 8008500:	40000800 	.word	0x40000800

08008504 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	bc80      	pop	{r7}
 8008514:	4770      	bx	lr

08008516 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr

08008528 <_ZdlPvj>:
 8008528:	f000 b802 	b.w	8008530 <_ZdlPv>

0800852c <_Znaj>:
 800852c:	f000 b802 	b.w	8008534 <_Znwj>

08008530 <_ZdlPv>:
 8008530:	f000 b82a 	b.w	8008588 <free>

08008534 <_Znwj>:
 8008534:	2801      	cmp	r0, #1
 8008536:	bf38      	it	cc
 8008538:	2001      	movcc	r0, #1
 800853a:	b510      	push	{r4, lr}
 800853c:	4604      	mov	r4, r0
 800853e:	4620      	mov	r0, r4
 8008540:	f000 f81a 	bl	8008578 <malloc>
 8008544:	b100      	cbz	r0, 8008548 <_Znwj+0x14>
 8008546:	bd10      	pop	{r4, pc}
 8008548:	f000 f806 	bl	8008558 <_ZSt15get_new_handlerv>
 800854c:	b908      	cbnz	r0, 8008552 <_Znwj+0x1e>
 800854e:	f000 f80b 	bl	8008568 <abort>
 8008552:	4780      	blx	r0
 8008554:	e7f3      	b.n	800853e <_Znwj+0xa>
	...

08008558 <_ZSt15get_new_handlerv>:
 8008558:	4b02      	ldr	r3, [pc, #8]	@ (8008564 <_ZSt15get_new_handlerv+0xc>)
 800855a:	6818      	ldr	r0, [r3, #0]
 800855c:	f3bf 8f5b 	dmb	ish
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	20000bb0 	.word	0x20000bb0

08008568 <abort>:
 8008568:	2006      	movs	r0, #6
 800856a:	b508      	push	{r3, lr}
 800856c:	f000 f8f2 	bl	8008754 <raise>
 8008570:	2001      	movs	r0, #1
 8008572:	f7fa fb5c 	bl	8002c2e <_exit>
	...

08008578 <malloc>:
 8008578:	4b02      	ldr	r3, [pc, #8]	@ (8008584 <malloc+0xc>)
 800857a:	4601      	mov	r1, r0
 800857c:	6818      	ldr	r0, [r3, #0]
 800857e:	f000 b82d 	b.w	80085dc <_malloc_r>
 8008582:	bf00      	nop
 8008584:	2000000c 	.word	0x2000000c

08008588 <free>:
 8008588:	4b02      	ldr	r3, [pc, #8]	@ (8008594 <free+0xc>)
 800858a:	4601      	mov	r1, r0
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	f000 b947 	b.w	8008820 <_free_r>
 8008592:	bf00      	nop
 8008594:	2000000c 	.word	0x2000000c

08008598 <sbrk_aligned>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	4e0f      	ldr	r6, [pc, #60]	@ (80085d8 <sbrk_aligned+0x40>)
 800859c:	460c      	mov	r4, r1
 800859e:	6831      	ldr	r1, [r6, #0]
 80085a0:	4605      	mov	r5, r0
 80085a2:	b911      	cbnz	r1, 80085aa <sbrk_aligned+0x12>
 80085a4:	f000 f8f2 	bl	800878c <_sbrk_r>
 80085a8:	6030      	str	r0, [r6, #0]
 80085aa:	4621      	mov	r1, r4
 80085ac:	4628      	mov	r0, r5
 80085ae:	f000 f8ed 	bl	800878c <_sbrk_r>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	d103      	bne.n	80085be <sbrk_aligned+0x26>
 80085b6:	f04f 34ff 	mov.w	r4, #4294967295
 80085ba:	4620      	mov	r0, r4
 80085bc:	bd70      	pop	{r4, r5, r6, pc}
 80085be:	1cc4      	adds	r4, r0, #3
 80085c0:	f024 0403 	bic.w	r4, r4, #3
 80085c4:	42a0      	cmp	r0, r4
 80085c6:	d0f8      	beq.n	80085ba <sbrk_aligned+0x22>
 80085c8:	1a21      	subs	r1, r4, r0
 80085ca:	4628      	mov	r0, r5
 80085cc:	f000 f8de 	bl	800878c <_sbrk_r>
 80085d0:	3001      	adds	r0, #1
 80085d2:	d1f2      	bne.n	80085ba <sbrk_aligned+0x22>
 80085d4:	e7ef      	b.n	80085b6 <sbrk_aligned+0x1e>
 80085d6:	bf00      	nop
 80085d8:	20000bb4 	.word	0x20000bb4

080085dc <_malloc_r>:
 80085dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e0:	1ccd      	adds	r5, r1, #3
 80085e2:	f025 0503 	bic.w	r5, r5, #3
 80085e6:	3508      	adds	r5, #8
 80085e8:	2d0c      	cmp	r5, #12
 80085ea:	bf38      	it	cc
 80085ec:	250c      	movcc	r5, #12
 80085ee:	2d00      	cmp	r5, #0
 80085f0:	4606      	mov	r6, r0
 80085f2:	db01      	blt.n	80085f8 <_malloc_r+0x1c>
 80085f4:	42a9      	cmp	r1, r5
 80085f6:	d904      	bls.n	8008602 <_malloc_r+0x26>
 80085f8:	230c      	movs	r3, #12
 80085fa:	6033      	str	r3, [r6, #0]
 80085fc:	2000      	movs	r0, #0
 80085fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008602:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086d8 <_malloc_r+0xfc>
 8008606:	f000 f869 	bl	80086dc <__malloc_lock>
 800860a:	f8d8 3000 	ldr.w	r3, [r8]
 800860e:	461c      	mov	r4, r3
 8008610:	bb44      	cbnz	r4, 8008664 <_malloc_r+0x88>
 8008612:	4629      	mov	r1, r5
 8008614:	4630      	mov	r0, r6
 8008616:	f7ff ffbf 	bl	8008598 <sbrk_aligned>
 800861a:	1c43      	adds	r3, r0, #1
 800861c:	4604      	mov	r4, r0
 800861e:	d158      	bne.n	80086d2 <_malloc_r+0xf6>
 8008620:	f8d8 4000 	ldr.w	r4, [r8]
 8008624:	4627      	mov	r7, r4
 8008626:	2f00      	cmp	r7, #0
 8008628:	d143      	bne.n	80086b2 <_malloc_r+0xd6>
 800862a:	2c00      	cmp	r4, #0
 800862c:	d04b      	beq.n	80086c6 <_malloc_r+0xea>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	4639      	mov	r1, r7
 8008632:	4630      	mov	r0, r6
 8008634:	eb04 0903 	add.w	r9, r4, r3
 8008638:	f000 f8a8 	bl	800878c <_sbrk_r>
 800863c:	4581      	cmp	r9, r0
 800863e:	d142      	bne.n	80086c6 <_malloc_r+0xea>
 8008640:	6821      	ldr	r1, [r4, #0]
 8008642:	4630      	mov	r0, r6
 8008644:	1a6d      	subs	r5, r5, r1
 8008646:	4629      	mov	r1, r5
 8008648:	f7ff ffa6 	bl	8008598 <sbrk_aligned>
 800864c:	3001      	adds	r0, #1
 800864e:	d03a      	beq.n	80086c6 <_malloc_r+0xea>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	442b      	add	r3, r5
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	f8d8 3000 	ldr.w	r3, [r8]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	bb62      	cbnz	r2, 80086b8 <_malloc_r+0xdc>
 800865e:	f8c8 7000 	str.w	r7, [r8]
 8008662:	e00f      	b.n	8008684 <_malloc_r+0xa8>
 8008664:	6822      	ldr	r2, [r4, #0]
 8008666:	1b52      	subs	r2, r2, r5
 8008668:	d420      	bmi.n	80086ac <_malloc_r+0xd0>
 800866a:	2a0b      	cmp	r2, #11
 800866c:	d917      	bls.n	800869e <_malloc_r+0xc2>
 800866e:	1961      	adds	r1, r4, r5
 8008670:	42a3      	cmp	r3, r4
 8008672:	6025      	str	r5, [r4, #0]
 8008674:	bf18      	it	ne
 8008676:	6059      	strne	r1, [r3, #4]
 8008678:	6863      	ldr	r3, [r4, #4]
 800867a:	bf08      	it	eq
 800867c:	f8c8 1000 	streq.w	r1, [r8]
 8008680:	5162      	str	r2, [r4, r5]
 8008682:	604b      	str	r3, [r1, #4]
 8008684:	4630      	mov	r0, r6
 8008686:	f000 f82f 	bl	80086e8 <__malloc_unlock>
 800868a:	f104 000b 	add.w	r0, r4, #11
 800868e:	1d23      	adds	r3, r4, #4
 8008690:	f020 0007 	bic.w	r0, r0, #7
 8008694:	1ac2      	subs	r2, r0, r3
 8008696:	bf1c      	itt	ne
 8008698:	1a1b      	subne	r3, r3, r0
 800869a:	50a3      	strne	r3, [r4, r2]
 800869c:	e7af      	b.n	80085fe <_malloc_r+0x22>
 800869e:	6862      	ldr	r2, [r4, #4]
 80086a0:	42a3      	cmp	r3, r4
 80086a2:	bf0c      	ite	eq
 80086a4:	f8c8 2000 	streq.w	r2, [r8]
 80086a8:	605a      	strne	r2, [r3, #4]
 80086aa:	e7eb      	b.n	8008684 <_malloc_r+0xa8>
 80086ac:	4623      	mov	r3, r4
 80086ae:	6864      	ldr	r4, [r4, #4]
 80086b0:	e7ae      	b.n	8008610 <_malloc_r+0x34>
 80086b2:	463c      	mov	r4, r7
 80086b4:	687f      	ldr	r7, [r7, #4]
 80086b6:	e7b6      	b.n	8008626 <_malloc_r+0x4a>
 80086b8:	461a      	mov	r2, r3
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	42a3      	cmp	r3, r4
 80086be:	d1fb      	bne.n	80086b8 <_malloc_r+0xdc>
 80086c0:	2300      	movs	r3, #0
 80086c2:	6053      	str	r3, [r2, #4]
 80086c4:	e7de      	b.n	8008684 <_malloc_r+0xa8>
 80086c6:	230c      	movs	r3, #12
 80086c8:	4630      	mov	r0, r6
 80086ca:	6033      	str	r3, [r6, #0]
 80086cc:	f000 f80c 	bl	80086e8 <__malloc_unlock>
 80086d0:	e794      	b.n	80085fc <_malloc_r+0x20>
 80086d2:	6005      	str	r5, [r0, #0]
 80086d4:	e7d6      	b.n	8008684 <_malloc_r+0xa8>
 80086d6:	bf00      	nop
 80086d8:	20000bb8 	.word	0x20000bb8

080086dc <__malloc_lock>:
 80086dc:	4801      	ldr	r0, [pc, #4]	@ (80086e4 <__malloc_lock+0x8>)
 80086de:	f000 b88f 	b.w	8008800 <__retarget_lock_acquire_recursive>
 80086e2:	bf00      	nop
 80086e4:	20000cf8 	.word	0x20000cf8

080086e8 <__malloc_unlock>:
 80086e8:	4801      	ldr	r0, [pc, #4]	@ (80086f0 <__malloc_unlock+0x8>)
 80086ea:	f000 b88a 	b.w	8008802 <__retarget_lock_release_recursive>
 80086ee:	bf00      	nop
 80086f0:	20000cf8 	.word	0x20000cf8

080086f4 <memset>:
 80086f4:	4603      	mov	r3, r0
 80086f6:	4402      	add	r2, r0
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d100      	bne.n	80086fe <memset+0xa>
 80086fc:	4770      	bx	lr
 80086fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008702:	e7f9      	b.n	80086f8 <memset+0x4>

08008704 <_raise_r>:
 8008704:	291f      	cmp	r1, #31
 8008706:	b538      	push	{r3, r4, r5, lr}
 8008708:	4605      	mov	r5, r0
 800870a:	460c      	mov	r4, r1
 800870c:	d904      	bls.n	8008718 <_raise_r+0x14>
 800870e:	2316      	movs	r3, #22
 8008710:	6003      	str	r3, [r0, #0]
 8008712:	f04f 30ff 	mov.w	r0, #4294967295
 8008716:	bd38      	pop	{r3, r4, r5, pc}
 8008718:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800871a:	b112      	cbz	r2, 8008722 <_raise_r+0x1e>
 800871c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008720:	b94b      	cbnz	r3, 8008736 <_raise_r+0x32>
 8008722:	4628      	mov	r0, r5
 8008724:	f000 f830 	bl	8008788 <_getpid_r>
 8008728:	4622      	mov	r2, r4
 800872a:	4601      	mov	r1, r0
 800872c:	4628      	mov	r0, r5
 800872e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008732:	f000 b817 	b.w	8008764 <_kill_r>
 8008736:	2b01      	cmp	r3, #1
 8008738:	d00a      	beq.n	8008750 <_raise_r+0x4c>
 800873a:	1c59      	adds	r1, r3, #1
 800873c:	d103      	bne.n	8008746 <_raise_r+0x42>
 800873e:	2316      	movs	r3, #22
 8008740:	6003      	str	r3, [r0, #0]
 8008742:	2001      	movs	r0, #1
 8008744:	e7e7      	b.n	8008716 <_raise_r+0x12>
 8008746:	2100      	movs	r1, #0
 8008748:	4620      	mov	r0, r4
 800874a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800874e:	4798      	blx	r3
 8008750:	2000      	movs	r0, #0
 8008752:	e7e0      	b.n	8008716 <_raise_r+0x12>

08008754 <raise>:
 8008754:	4b02      	ldr	r3, [pc, #8]	@ (8008760 <raise+0xc>)
 8008756:	4601      	mov	r1, r0
 8008758:	6818      	ldr	r0, [r3, #0]
 800875a:	f7ff bfd3 	b.w	8008704 <_raise_r>
 800875e:	bf00      	nop
 8008760:	2000000c 	.word	0x2000000c

08008764 <_kill_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	2300      	movs	r3, #0
 8008768:	4d06      	ldr	r5, [pc, #24]	@ (8008784 <_kill_r+0x20>)
 800876a:	4604      	mov	r4, r0
 800876c:	4608      	mov	r0, r1
 800876e:	4611      	mov	r1, r2
 8008770:	602b      	str	r3, [r5, #0]
 8008772:	f7fa fa4c 	bl	8002c0e <_kill>
 8008776:	1c43      	adds	r3, r0, #1
 8008778:	d102      	bne.n	8008780 <_kill_r+0x1c>
 800877a:	682b      	ldr	r3, [r5, #0]
 800877c:	b103      	cbz	r3, 8008780 <_kill_r+0x1c>
 800877e:	6023      	str	r3, [r4, #0]
 8008780:	bd38      	pop	{r3, r4, r5, pc}
 8008782:	bf00      	nop
 8008784:	20000cf4 	.word	0x20000cf4

08008788 <_getpid_r>:
 8008788:	f7fa ba3a 	b.w	8002c00 <_getpid>

0800878c <_sbrk_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	2300      	movs	r3, #0
 8008790:	4d05      	ldr	r5, [pc, #20]	@ (80087a8 <_sbrk_r+0x1c>)
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	602b      	str	r3, [r5, #0]
 8008798:	f7fa fa54 	bl	8002c44 <_sbrk>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_sbrk_r+0x1a>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_sbrk_r+0x1a>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	20000cf4 	.word	0x20000cf4

080087ac <__errno>:
 80087ac:	4b01      	ldr	r3, [pc, #4]	@ (80087b4 <__errno+0x8>)
 80087ae:	6818      	ldr	r0, [r3, #0]
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	2000000c 	.word	0x2000000c

080087b8 <__libc_init_array>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	2600      	movs	r6, #0
 80087bc:	4d0c      	ldr	r5, [pc, #48]	@ (80087f0 <__libc_init_array+0x38>)
 80087be:	4c0d      	ldr	r4, [pc, #52]	@ (80087f4 <__libc_init_array+0x3c>)
 80087c0:	1b64      	subs	r4, r4, r5
 80087c2:	10a4      	asrs	r4, r4, #2
 80087c4:	42a6      	cmp	r6, r4
 80087c6:	d109      	bne.n	80087dc <__libc_init_array+0x24>
 80087c8:	f000 f872 	bl	80088b0 <_init>
 80087cc:	2600      	movs	r6, #0
 80087ce:	4d0a      	ldr	r5, [pc, #40]	@ (80087f8 <__libc_init_array+0x40>)
 80087d0:	4c0a      	ldr	r4, [pc, #40]	@ (80087fc <__libc_init_array+0x44>)
 80087d2:	1b64      	subs	r4, r4, r5
 80087d4:	10a4      	asrs	r4, r4, #2
 80087d6:	42a6      	cmp	r6, r4
 80087d8:	d105      	bne.n	80087e6 <__libc_init_array+0x2e>
 80087da:	bd70      	pop	{r4, r5, r6, pc}
 80087dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e0:	4798      	blx	r3
 80087e2:	3601      	adds	r6, #1
 80087e4:	e7ee      	b.n	80087c4 <__libc_init_array+0xc>
 80087e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ea:	4798      	blx	r3
 80087ec:	3601      	adds	r6, #1
 80087ee:	e7f2      	b.n	80087d6 <__libc_init_array+0x1e>
 80087f0:	08008934 	.word	0x08008934
 80087f4:	08008934 	.word	0x08008934
 80087f8:	08008934 	.word	0x08008934
 80087fc:	0800893c 	.word	0x0800893c

08008800 <__retarget_lock_acquire_recursive>:
 8008800:	4770      	bx	lr

08008802 <__retarget_lock_release_recursive>:
 8008802:	4770      	bx	lr

08008804 <memcpy>:
 8008804:	440a      	add	r2, r1
 8008806:	4291      	cmp	r1, r2
 8008808:	f100 33ff 	add.w	r3, r0, #4294967295
 800880c:	d100      	bne.n	8008810 <memcpy+0xc>
 800880e:	4770      	bx	lr
 8008810:	b510      	push	{r4, lr}
 8008812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008816:	4291      	cmp	r1, r2
 8008818:	f803 4f01 	strb.w	r4, [r3, #1]!
 800881c:	d1f9      	bne.n	8008812 <memcpy+0xe>
 800881e:	bd10      	pop	{r4, pc}

08008820 <_free_r>:
 8008820:	b538      	push	{r3, r4, r5, lr}
 8008822:	4605      	mov	r5, r0
 8008824:	2900      	cmp	r1, #0
 8008826:	d040      	beq.n	80088aa <_free_r+0x8a>
 8008828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800882c:	1f0c      	subs	r4, r1, #4
 800882e:	2b00      	cmp	r3, #0
 8008830:	bfb8      	it	lt
 8008832:	18e4      	addlt	r4, r4, r3
 8008834:	f7ff ff52 	bl	80086dc <__malloc_lock>
 8008838:	4a1c      	ldr	r2, [pc, #112]	@ (80088ac <_free_r+0x8c>)
 800883a:	6813      	ldr	r3, [r2, #0]
 800883c:	b933      	cbnz	r3, 800884c <_free_r+0x2c>
 800883e:	6063      	str	r3, [r4, #4]
 8008840:	6014      	str	r4, [r2, #0]
 8008842:	4628      	mov	r0, r5
 8008844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008848:	f7ff bf4e 	b.w	80086e8 <__malloc_unlock>
 800884c:	42a3      	cmp	r3, r4
 800884e:	d908      	bls.n	8008862 <_free_r+0x42>
 8008850:	6820      	ldr	r0, [r4, #0]
 8008852:	1821      	adds	r1, r4, r0
 8008854:	428b      	cmp	r3, r1
 8008856:	bf01      	itttt	eq
 8008858:	6819      	ldreq	r1, [r3, #0]
 800885a:	685b      	ldreq	r3, [r3, #4]
 800885c:	1809      	addeq	r1, r1, r0
 800885e:	6021      	streq	r1, [r4, #0]
 8008860:	e7ed      	b.n	800883e <_free_r+0x1e>
 8008862:	461a      	mov	r2, r3
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	b10b      	cbz	r3, 800886c <_free_r+0x4c>
 8008868:	42a3      	cmp	r3, r4
 800886a:	d9fa      	bls.n	8008862 <_free_r+0x42>
 800886c:	6811      	ldr	r1, [r2, #0]
 800886e:	1850      	adds	r0, r2, r1
 8008870:	42a0      	cmp	r0, r4
 8008872:	d10b      	bne.n	800888c <_free_r+0x6c>
 8008874:	6820      	ldr	r0, [r4, #0]
 8008876:	4401      	add	r1, r0
 8008878:	1850      	adds	r0, r2, r1
 800887a:	4283      	cmp	r3, r0
 800887c:	6011      	str	r1, [r2, #0]
 800887e:	d1e0      	bne.n	8008842 <_free_r+0x22>
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	4408      	add	r0, r1
 8008886:	6010      	str	r0, [r2, #0]
 8008888:	6053      	str	r3, [r2, #4]
 800888a:	e7da      	b.n	8008842 <_free_r+0x22>
 800888c:	d902      	bls.n	8008894 <_free_r+0x74>
 800888e:	230c      	movs	r3, #12
 8008890:	602b      	str	r3, [r5, #0]
 8008892:	e7d6      	b.n	8008842 <_free_r+0x22>
 8008894:	6820      	ldr	r0, [r4, #0]
 8008896:	1821      	adds	r1, r4, r0
 8008898:	428b      	cmp	r3, r1
 800889a:	bf01      	itttt	eq
 800889c:	6819      	ldreq	r1, [r3, #0]
 800889e:	685b      	ldreq	r3, [r3, #4]
 80088a0:	1809      	addeq	r1, r1, r0
 80088a2:	6021      	streq	r1, [r4, #0]
 80088a4:	6063      	str	r3, [r4, #4]
 80088a6:	6054      	str	r4, [r2, #4]
 80088a8:	e7cb      	b.n	8008842 <_free_r+0x22>
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	20000bb8 	.word	0x20000bb8

080088b0 <_init>:
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	bf00      	nop
 80088b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b6:	bc08      	pop	{r3}
 80088b8:	469e      	mov	lr, r3
 80088ba:	4770      	bx	lr

080088bc <_fini>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	bf00      	nop
 80088c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c2:	bc08      	pop	{r3}
 80088c4:	469e      	mov	lr, r3
 80088c6:	4770      	bx	lr
